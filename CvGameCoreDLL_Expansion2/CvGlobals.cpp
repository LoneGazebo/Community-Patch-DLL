/*	-------------------------------------------------------------------------------------------------------
	© 1991-2012 Take-Two Interactive Software and its subsidiaries.  Developed by Firaxis Games.  
	Sid Meier's Civilization V, Civ, Civilization, 2K Games, Firaxis Games, Take-Two Interactive Software 
	and their respective logos are all trademarks of Take-Two interactive Software, Inc.  
	All other marks and trademarks are the property of their respective owners.  
	All rights reserved. 
	------------------------------------------------------------------------------------------------------- */

// Author -	Mustafa Thamer
//			Jon Shafer - 03/2005

#include "CvGameCoreDLLPCH.h"
#include "CvGlobals.h"
#include "CvRandom.h"
#include "ICvDLLUserInterface.h"
#include "CvMap.h"
#include "CvPlayerAI.h"
#include "CvTeam.h"
#include "CvInfos.h"
#include "ICvDLLUtility.h"
#include "CvPlayerAI.h"
#include "CvGameTextMgr.h"
#include "CvDiplomacyAI.h"
#include "CvEconomicAI.h"
#include "CvMilitaryAI.h"
#include "CvCitySpecializationAI.h"
#include "CvGrandStrategyAI.h"
#include "CvMinorCivAI.h"
#include "CvImprovementClasses.h"
#include "CvAStar.h"
#include "cvStopWatch.h"
#include "CvReplayInfo.h"
#include "CvTypes.h"

#include "CvDllDatabaseUtility.h"
#include "CvDllScriptSystemUtility.h"

#include "CvDllCity.h"
#include "CvDllDeal.h"
#include "CvDllContext.h"
#include "CvDllPlayer.h"
#include "CvDllPlot.h"
#include "CvDllRandom.h"
#include "CvDllUnit.h"

#if defined(MOD_DEBUG_MINIDUMP)
#include <dbghelp.h>
#endif

// must be included after all other headers
#include "LintFree.h"

template <class T>
void deleteInfoArray(std::vector<T*>& array)
{
	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)
	{
		SAFE_DELETE(*it);
	}

	array.clear();
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

CvGlobals gGlobals;

//
// CONSTRUCTOR
//
CvGlobals::CvGlobals() :
	m_bGraphicsInitialized(false),
	m_bTutorialDisabled(false),
	m_bLogging(false),
	m_iRandLogging(0),
	m_bOverwriteLogs(false),
	m_bOutOfSyncDebuggingEnabled(false),
	m_bSynchLogging(false),
	m_bAILogging(false),
	m_bAIPerfLogging(false),
	m_bBuilderAILogging(false),
	m_bSerializationLogging(false),
	m_bPlayerAndCityAILogSplit(false),
	m_bTutorialLogging(false),
	m_bTutorialDebugging(false),
	m_bDLLProfiler(false),
	m_iNewPlayers(0),
	m_bZoomOut(false),
	m_bZoomIn(false),
	m_bLoadGameFromFile(false),
	m_bAllowRClickMovementWhileCameraScrolling(false),
	m_bPostTurnAutosaves(false),
	m_asyncRand(NULL),
	m_game(NULL),
	m_map(NULL),
	m_pathFinder(NULL),
	m_interfacePathFinder(NULL),
	m_stepFinder(NULL),
	m_pDLL(NULL),
	m_pEngineUI(NULL),

// -- ints --
	m_iAI_ATTEMPT_RUSH_OVER_X_TURNS_TO_BUILD(15),
	m_iINITIAL_AI_CITY_PRODUCTION(0),
	m_iAI_CAN_DISBAND_UNITS(1),
	m_iAI_SHOULDNT_MANAGE_PLOT_ASSIGNMENT(0),
	m_iPOLICY_WEIGHT_PROPAGATION_PERCENT(50),
	m_iPOLICY_WEIGHT_PROPAGATION_LEVELS(2),
	m_iPOLICY_WEIGHT_PERCENT_DROP_NEW_BRANCH(75),
	m_iTECH_WEIGHT_PROPAGATION_PERCENT(50),
	m_iTECH_WEIGHT_PROPAGATION_LEVELS(2),
	m_iTECH_PRIORITY_UNIQUE_ITEM(5),
	m_iTECH_PRIORITY_MAYA_CALENDAR_BONUS(50),
	m_iAI_VALUE_OF_YIELD_GOLD(7),
	m_iAI_VALUE_OF_YIELD_PRODUCTION(15),
	m_iAI_VALUE_OF_YIELD_SCIENCE(8),
	m_iDEFAULT_FLAVOR_VALUE(5),
	m_iPERSONALITY_FLAVOR_MAX_VALUE(20),
	m_iPERSONALITY_FLAVOR_MIN_VALUE(0),
	m_iDIPLO_PERSONALITY_FLAVOR_MAX_VALUE(10),
	m_iDIPLO_PERSONALITY_FLAVOR_MIN_VALUE(1),
	m_iFLAVOR_MIN_VALUE(-1000),
	m_iFLAVOR_MAX_VALUE(1000),
	m_iFLAVOR_RANDOMIZATION_RANGE(2),
	m_iFLAVOR_EXPANDGROW_COEFFICIENT(8),
	m_iAI_GRAND_STRATEGY_NUM_TURNS_STRATEGY_MUST_BE_ACTIVE(0),
	m_iAI_GS_RAND_ROLL(50),
	m_iAI_GRAND_STRATEGY_CURRENT_STRATEGY_WEIGHT(50),
	m_iAI_GRAND_STRATEGY_GUESS_NO_CLUE_WEIGHT(40),
	m_iAI_GRAND_STRATEGY_GUESS_POSITIVE_THRESHOLD(120),
	m_iAI_GRAND_STRATEGY_GUESS_LIKELY_THRESHOLD(70),
	m_iAI_GRAND_STRATEGY_OTHER_PLAYERS_GS_MULTIPLIER(40),
	m_iAI_GS_CONQUEST_NOBODY_MET_FIRST_TURN(20),
	m_iAI_GRAND_STRATEGY_CONQUEST_NOBODY_MET_WEIGHT(-50),
	m_iAI_GRAND_STRATEGY_CONQUEST_AT_WAR_WEIGHT(10),
	m_iAI_GS_CONQUEST_MILITARY_STRENGTH_FIRST_TURN(60),
	m_iAI_GRAND_STRATEGY_CONQUEST_POWER_RATIO_MULTIPLIER(100),
	m_iAI_GRAND_STRATEGY_CONQUEST_CRAMPED_WEIGHT(20),
	m_iAI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MINOR_ATTACKED(5),
	m_iAI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MINOR_CONQUERED(10),
	m_iAI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MAJOR_ATTACKED(10),
	m_iAI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MAJOR_CONQUERED(15),
	m_iAI_GS_CULTURE_RATIO_MULTIPLIER(75),
	m_iAI_GS_TOURISM_RATIO_MULTIPLIER(75),
	m_iAI_GS_CULTURE_AHEAD_WEIGHT(50),
	m_iAI_GS_CULTURE_TOURISM_AHEAD_WEIGHT(100),
	m_iAI_GS_CULTURE_INFLUENTIAL_CIV_MOD(50),
	m_iAI_GRAND_STRATEGY_UN_EACH_MINOR_ATTACKED_WEIGHT(-40),
	m_iAI_GS_UN_SECURED_VOTE_MOD(300),
	m_iAI_GS_SS_HAS_APOLLO_PROGRAM(150),
	m_iAI_GS_SS_TECH_PROGRESS_MOD(300),
#if defined(MOD_BALANCE_CORE_HAPPINESS)
	m_iEVENT_MIN_DURATION_BETWEEN(10),
	m_iCITY_EVENT_MIN_DURATION_BETWEEN(25),
	m_iBALANCE_HAPPINESS_THRESHOLD_PERCENTILE(50),
	m_iGLOBAL_RESOURCE_MONOPOLY_THRESHOLD(50),
	m_iSTRATEGIC_RESOURCE_MONOPOLY_THRESHOLD(25),
	m_iRELIGION_MIN_FAITH_SECOND_PROPHET(600),
#endif
	m_iAI_STRATEGY_EARLY_EXPLORATION_STARTING_WEIGHT(100),
	m_iAI_STRATEGY_EARLY_EXPLORATION_EXPLORERS_WEIGHT_DIVISOR(1),
	m_iAI_STRATEGY_EARLY_EXPLORATION_WEIGHT_PER_FLAVOR(10),
	m_iAI_STRATEGY_EARLY_EXPANSION_RELATIVE_TILE_QUALITY(50),
	m_iAI_STRATEGY_EARLY_EXPANSION_NUM_CITIES_LIMIT(4),
	m_fAI_STRATEGY_NEED_IMPROVEMENT_CITY_RATIO(0.34f),
	m_iAI_STRATEGY_ISLAND_START_COAST_REVEAL_PERCENT(80),
	m_iAI_STRATEGY_AREA_IS_FULL_PERCENT(75),
	m_iAI_STRATEGY_MINIMUM_SETTLE_FERTILITY(20000),
	m_iAI_BUY_PLOT_TEST_PROBES(5),
	m_iAI_PLOT_VALUE_STRATEGIC_RESOURCE(50),
	m_iAI_PLOT_VALUE_LUXURY_RESOURCE(40),
	m_iAI_PLOT_VALUE_SPECIALIZATION_MULTIPLIER(20),
	m_iAI_PLOT_VALUE_YIELD_MULTIPLIER(10),
	m_iAI_PLOT_VALUE_DEFICIENT_YIELD_MULTIPLIER(5),
	m_iAI_PLOT_VALUE_FIERCE_DISPUTE(6),
	m_iAI_PLOT_VALUE_STRONG_DISPUTE(4),
	m_iAI_PLOT_VALUE_WEAK_DISPUTE(2),
	m_iAI_GOLD_PRIORITY_MINIMUM_PLOT_BUY_VALUE(150),
	m_iAI_GOLD_BALANCE_TO_HALVE_PLOT_BUY_MINIMUM(1000),
	m_iAI_GOLD_PRIORITY_UPGRADE_BASE(150),
	m_iAI_GOLD_PRIORITY_UPGRADE_PER_FLAVOR_POINT(25),
	m_iAI_GOLD_PRIORITY_DIPLOMACY_BASE(150),
	m_iAI_GOLD_PRIORITY_DIPLOMACY_PER_FLAVOR_POINT(25),
	m_iAI_GOLD_PRIORITY_UNIT(300),
	m_iAI_GOLD_PRIORITY_DEFENSIVE_BUILDING(400),
	m_iAI_GOLD_PRIORITY_BUYOUT_CITY_STATE(100),
	m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_FOOD(2),
	m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_PRODUCTION(2),
	m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_GOLD(1),
	m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_SCIENCE(1),
	m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_CULTURE(1),
	m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_LUXURY_RESOURCE(50000),
	m_iBUILDER_TASKING_IMPROVE_RESOURCE_TENDENCY(15),
	m_iBUILDER_TASKING_BUILD_ROUTE_TENDENCY(100),
	m_iBUILDER_TASKING_DIRECTIVES_TO_EVALUATE(1),
	m_iBUILDER_TASKING_BASELINE_BUILD_IMPROVEMENTS(1),
	m_iBUILDER_TASKING_BASELINE_BUILD_RESOURCE_IMPROVEMENTS(100),
	m_iBUILDER_TASKING_BASELINE_BUILD_ROUTES(10),
	m_iBUILDER_TASKING_BASELINE_REPAIR(10),
	m_iBUILDER_TASKING_BASELINE_SCRUB_FALLOUT(1000),
	m_iAI_MILITARY_THREAT_WEIGHT_MINOR(1),
	m_iAI_MILITARY_THREAT_WEIGHT_MAJOR(3),
	m_iAI_MILITARY_THREAT_WEIGHT_SEVERE(6),
	m_iAI_MILITARY_THREAT_WEIGHT_CRITICAL(10),
	m_iAI_STRATEGY_DEFEND_MY_LANDS_BASE_UNITS(2),
	m_iAI_STRATEGY_MILITARY_RESERVE_PERCENTAGE(33),
	m_iAI_MILITARY_CITY_THREAT_WEIGHT_CAPITAL(125),
	m_iAI_MILITARY_BARBARIANS_FOR_MINOR_THREAT(2),
	m_iAI_MILITARY_IGNORE_BAD_ODDS(0),
	m_iAI_MILITARY_RECAPTURING_OWN_CITY(150),
	m_iAI_MILITARY_CAPTURING_ORIGINAL_CAPITAL(150),
	m_iAI_CITY_SPECIALIZATION_EARLIEST_TURN(25),
	m_iAI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL(10000),
	m_iAI_CITY_SPECIALIZATION_GENERAL_ECONOMIC_WEIGHT(200),
	m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_FLAVOR_EXPANSION(5),
	m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_PERCENT_CONTINENT_UNOWNED(5),
	m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_CITIES(-50),
	m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_SETTLERS(-40),
	m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_EARLY_EXPANSION(500),
	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED(10),
	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH(100),
	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION(300),
	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE(300),
	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL(1000),
	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT(50),
	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS(50),
	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL(250),
	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER(200),
	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP(5),
	m_iAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE(10),
	m_iAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY(10),
	m_iAI_CITY_SPECIALIZATION_GOLD_WEIGHT_FLAVOR_GOLD(20),
	m_iAI_CITY_SPECIALIZATION_GOLD_WEIGHT_LAND_DISPUTE(10),
	m_iAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SCIENCE(20),
	m_iAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SPACESHIP(10),
	m_iAI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING(8),
	m_iAI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING(5),
	m_iAI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING(2),
	m_iAI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED(18),
	m_iAI_CITYSTRATEGY_SMALL_CITY_POP_THRESHOLD(2),
	m_iAI_CITYSTRATEGY_MEDIUM_CITY_POP_THRESHOLD(8),
	m_iAI_CITYSTRATEGY_LARGE_CITY_POP_THRESHOLD(15),
	m_iAI_CITYSTRATEGY_NEED_TILE_IMPROVERS_CITY_THRESHOLD(2),
	m_iAI_CITYSTRATEGY_NEED_TILE_IMPROVERS_WORKER_MOD(200),
	m_iAI_CITYSTRATEGY_NEED_TILE_IMPROVERS_DESPERATE_TURN(30),
	m_iAI_CITYSTRATEGY_WANT_TILE_IMPROVERS_MINIMUM_SIZE(2),
	m_fAI_CITYSTRATEGY_YIELD_DEFICIENT_FOOD(2.0f),
	m_fAI_CITYSTRATEGY_YIELD_DEFICIENT_PRODUCTION(0.8f),
	m_fAI_CITYSTRATEGY_YIELD_DEFICIENT_GOLD(0.0f),
	m_fAI_CITYSTRATEGY_YIELD_DEFICIENT_SCIENCE(0.0f),
	m_fAI_CITYSTRATEGY_YIELD_DEFICIENT_CULTURE(0.0f),
	m_iAI_CITYSTRATEGY_OPERATION_UNIT_BASE_WEIGHT(900),
	m_iAI_CITYSTRATEGY_OPERATION_UNIT_FLAVOR_MULTIPLIER(100),
	m_iAI_CITYSTRATEGY_ARMY_UNIT_BASE_WEIGHT(700),
	m_iAI_CITIZEN_VALUE_FOOD(12),
	m_iAI_CITIZEN_VALUE_PRODUCTION(8),
	m_iAI_CITIZEN_VALUE_GOLD(6),
	m_iAI_CITIZEN_VALUE_SCIENCE(6),
	m_iAI_CITIZEN_VALUE_CULTURE(8),
	m_iAI_CITIZEN_VALUE_FAITH(6),
	m_iAI_CITIZEN_FOOD_MOD_SIZE_CUTOFF(6),
	m_iAI_CITIZEN_FOOD_MOD_SIZE_EXPONENT(5),
	m_iAI_CITIZEN_MOD_FOOD_DEFICIT(300),
	m_iAI_CITIZEN_MOD_PRODUCTION_DEFICIT(250),
	m_iAI_OPERATIONAL_BARBARIAN_CAMP_DEPLOY_RANGE(2),
	m_iAI_OPERATIONAL_CITY_ATTACK_DEPLOY_RANGE(5),
	m_iAI_OPERATIONAL_PERCENT_DANGER_FOR_FORWARD_MUSTER(20),
	m_iAI_OPERATIONAL_PERCENT_HEALTH_FOR_OPERATION(80),
	m_iAI_TACTICAL_MAP_UNIT_STRENGTH_MULTIPLIER(10),
	m_iAI_TACTICAL_MAP_DOMINANCE_PERCENTAGE(25),
	m_iAI_TACTICAL_MAP_TEMP_ZONE_RADIUS(5),
	m_iAI_TACTICAL_MAP_TEMP_ZONE_TURNS(4),
	m_iAI_TACTICAL_MAP_BOMBARDMENT_ZONE_TURNS(1),
	m_iAI_TACTICAL_RECRUIT_RANGE(10),
	m_iAI_TACTICAL_REPOSITION_RANGE(12),
	m_iAI_TACTICAL_OVERKILL_PERCENT(50),
	m_iAI_TACTICAL_BARBARIAN_RELEASE_VARIATION(15),
	m_iAI_HOMELAND_MAX_UPGRADE_MOVE_TURNS(5),
	m_iAI_HOMELAND_MAX_DEFENSIVE_MOVE_TURNS(4),
	m_iAI_HOMELAND_ESTIMATE_TURNS_DISTANCE(10),
	m_iAI_HOMELAND_GREAT_PERSON_TURNS_TO_WAIT(10),
	m_iAI_DIPLO_PLOT_RANGE_FROM_CITY_HOME_FRONT(5),
	m_iAI_DIPLO_LAND_DISPUTE_WEIGHT_WEAK(1),
	m_iAI_DIPLO_LAND_DISPUTE_WEIGHT_STRONG(3),
	m_iAI_DIPLO_LAND_DISPUTE_WEIGHT_FIERCE(5),
	GD_INT_INIT(AI_CONFIG_MILITARY_MELEE_PER_AA, 4),
	GD_INT_INIT(AI_CONFIG_MILITARY_TILES_PER_SHIP, 5),

	// Don't sweat that these are hard-coded by ID, as they will be over-written by the values as set in the PostDefines table
	GD_INT_INIT(RELIGION_LAST_FOUND_ERA, 3), // ERA_RENAISSANCE
	GD_INT_INIT(RELIGION_GP_FAITH_PURCHASE_ERA, 4), // ERA_INDUSTRIAL
	GD_INT_INIT(IDEOLOGY_START_ERA, 4), // ERA_INDUSTRIAL
	GD_INT_INIT(IDEOLOGY_PREREQ_ERA, 4), // ERA_INDUSTRIAL
#if defined(MOD_API_UNIFIED_YIELDS_TOURISM)
	GD_INT_INIT(TOURISM_START_TECH, 0), // TECH_AGRICULTURE
	GD_INT_INIT(TOURISM_START_ERA, 0), // ERA_ANCIENT
#endif

	m_iMINOR_BULLY_GOLD(100),
	m_iMINOR_FRIENDSHIP_RATE_MOD_MAXIMUM(150),
	m_iMINOR_FRIENDSHIP_RATE_MOD_SHARED_RELIGION(50),
	m_iMINOR_FRIENDSHIP_DROP_PER_TURN(-100),
	m_iMINOR_FRIENDSHIP_DROP_PER_TURN_HOSTILE(-150),
	m_iMINOR_FRIENDSHIP_DROP_PER_TURN_AGGRESSOR(-200),
	m_iMINOR_FRIENDSHIP_DROP_DISHONOR_PLEDGE_TO_PROTECT(-2000),
	m_iMINOR_FRIENDSHIP_DROP_BULLY_GOLD_SUCCESS(-1500),
	m_iMINOR_FRIENDSHIP_DROP_BULLY_GOLD_FAILURE(0),
	m_iMINOR_FRIENDSHIP_DROP_BULLY_WORKER_SUCCESS(-5000),
	m_iMINOR_FRIENDSHIP_DROP_BULLY_WORKER_FAILURE(0),
	m_iMINOR_FRIENDSHIP_NEGATIVE_INCREASE_PER_TURN(100),
	m_iMINOR_FRIENDSHIP_AT_WAR(-60),
	m_iMINOR_CIV_AGGRESSOR_THRESHOLD(2),
	m_iMINOR_CIV_WARMONGER_THRESHOLD(4),
	m_iPERMANENT_WAR_AGGRESSOR_CHANCE(50),
	m_iPERMANENT_WAR_OTHER_WARMONGER_CHANCE_DISTANT(25),
	m_iPERMANENT_WAR_OTHER_WARMONGER_CHANCE_FAR(50),
	m_iPERMANENT_WAR_OTHER_WARMONGER_CHANCE_CLOSE(75),
	m_iPERMANENT_WAR_OTHER_WARMONGER_CHANCE_NEIGHBORS(100),
	m_iPERMANENT_WAR_OTHER_CHANCE_DISTANT(0),
	m_iPERMANENT_WAR_OTHER_CHANCE_FAR(0),
	m_iPERMANENT_WAR_OTHER_CHANCE_CLOSE(20),
	m_iPERMANENT_WAR_OTHER_CHANCE_NEIGHBORS(50),
	m_iPERMANENT_WAR_OTHER_AT_WAR(50),
	m_iFRIENDSHIP_NEUTRAL_ON_DEATH(0),
	m_iFRIENDSHIP_THRESHOLD_NEUTRAL(0),
	m_iFRIENDSHIP_FRIENDS_ON_DEATH(0),
	m_iFRIENDSHIP_THRESHOLD_FRIENDS(30),
	m_iFRIENDSHIP_ALLIES_ON_DEATH(0),
	m_iFRIENDSHIP_THRESHOLD_ALLIES(60),
	m_iFRIENDSHIP_THRESHOLD_MAX(120),
	m_iFRIENDSHIP_THRESHOLD_CAN_BULLY(-30),
	m_iFRIENDSHIP_THRESHOLD_CAN_PLEDGE_TO_PROTECT(0),
#if defined(MOD_CITY_STATE_SCALE)
	GD_INT_INIT(FRIENDSHIP_THRESHOLD_MOD_MEDIEVAL, 100),
	GD_INT_INIT(FRIENDSHIP_THRESHOLD_MOD_INDUSTRIAL, 100),
#endif
	m_iMINOR_FRIENDSHIP_CLOSE_AMOUNT(8),
	m_iMINOR_CIV_SCIENCE_BONUS_MULTIPLIER(25),
	m_iFRIENDS_CULTURE_BONUS_AMOUNT_ANCIENT(4),
	m_iFRIENDS_CULTURE_BONUS_AMOUNT_MEDIEVAL(6),
	m_iFRIENDS_CULTURE_BONUS_AMOUNT_INDUSTRIAL(10),
	m_iALLIES_CULTURE_BONUS_AMOUNT_ANCIENT(4),
	m_iALLIES_CULTURE_BONUS_AMOUNT_MEDIEVAL(6),
	m_iALLIES_CULTURE_BONUS_AMOUNT_INDUSTRIAL(10),
	m_iFRIENDS_CAPITAL_FOOD_BONUS_AMOUNT_PRE_RENAISSANCE(1),
	m_iFRIENDS_CAPITAL_FOOD_BONUS_AMOUNT_POST_RENAISSANCE(1),
	m_iFRIENDS_OTHER_CITIES_FOOD_BONUS_AMOUNT_PRE_RENAISSANCE(1),
	m_iFRIENDS_OTHER_CITIES_FOOD_BONUS_AMOUNT_POST_RENAISSANCE(2),
	m_iALLIES_CAPITAL_FOOD_BONUS_AMOUNT(1),
	m_iALLIES_OTHER_CITIES_FOOD_BONUS_AMOUNT(1),
	m_iFRIENDS_BASE_TURNS_UNIT_SPAWN(15),
	m_iFRIENDS_RAND_TURNS_UNIT_SPAWN(3),
	m_iALLIES_EXTRA_TURNS_UNIT_SPAWN(-3),
	m_iUNIT_SPAWN_BIAS_MULTIPLIER(67),
	m_iUNIT_SPAWN_NUM_CHOICES(5),
	m_iFRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_ANCIENT(2),
	m_iFRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_MEDIEVAL(3),
	m_iFRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_INDUSTRIAL(4),
	m_iALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_ANCIENT(2),
	m_iALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_MEDIEVAL(2),
	m_iALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_INDUSTRIAL(2),
	m_iFRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_ANCIENT(1),
	m_iFRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_MEDIEVAL(1),
	m_iFRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_INDUSTRIAL(1),
	m_iALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_ANCIENT(1),
	m_iALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_MEDIEVAL(1),
	m_iALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_INDUSTRIAL(1),
	m_iFRIENDS_FAITH_FLAT_BONUS_AMOUNT_INDUSTRIAL(13),
	m_iFRIENDS_FAITH_FLAT_BONUS_AMOUNT_RENAISSANCE(12),
	m_iFRIENDS_FAITH_FLAT_BONUS_AMOUNT_MEDIEVAL(10),
	m_iFRIENDS_FAITH_FLAT_BONUS_AMOUNT_CLASSICAL(7),
	m_iFRIENDS_FAITH_FLAT_BONUS_AMOUNT_ANCIENT(2),
	m_iALLIES_FAITH_FLAT_BONUS_AMOUNT_INDUSTRIAL(13),
	m_iALLIES_FAITH_FLAT_BONUS_AMOUNT_RENAISSANCE(12),
	m_iALLIES_FAITH_FLAT_BONUS_AMOUNT_MEDIEVAL(10),
	m_iALLIES_FAITH_FLAT_BONUS_AMOUNT_CLASSICAL(7),
	m_iALLIES_FAITH_FLAT_BONUS_AMOUNT_ANCIENT(2),
	m_iMINOR_TURNS_GREAT_PEOPLE_SPAWN_BASE(37),
	m_iMINOR_TURNS_GREAT_PEOPLE_SPAWN_RAND(7),
	m_iMINOR_TURNS_GREAT_PEOPLE_SPAWN_BIAS_MULTIPLY(50),
	m_iMINOR_ADDITIONAL_ALLIES_GP_CHANGE(-1),
	m_iMAX_MINOR_ADDITIONAL_ALLIES_GP_CHANGE(-10),
	m_iMAX_DISTANCE_MINORS_BARB_QUEST(50),
	m_iTXT_KEY_MINOR_GIFT_UNITS_REMINDER(2),
	m_iWAR_QUEST_COMPLETE_FRIENDSHIP(100),
	m_iWAR_QUEST_UNITS_TO_KILL_DIVISOR(4),
	m_iWAR_QUEST_MIN_UNITS_TO_KILL(3),
	m_iMINOR_QUEST_FRIENDSHIP_ROUTE(50),
	m_iMINOR_QUEST_FRIENDSHIP_KILL_CAMP(50),
	m_iMINOR_QUEST_FRIENDSHIP_CONNECT_RESOURCE(40),
	m_iMINOR_QUEST_FRIENDSHIP_CONSTRUCT_WONDER(40),
	m_iMINOR_QUEST_FRIENDSHIP_GREAT_PERSON(40),
	m_iMINOR_QUEST_FRIENDSHIP_KILL_CITY_STATE(80),
	m_iMINOR_QUEST_FRIENDSHIP_FIND_PLAYER(35),
	m_iMINOR_QUEST_FRIENDSHIP_FIND_NATURAL_WONDER(40),
	m_iMINOR_QUEST_FRIENDSHIP_GIVE_GOLD(10),
	m_iMINOR_QUEST_FRIENDSHIP_PLEDGE_TO_PROTECT(20),
	m_iMINOR_QUEST_FRIENDSHIP_CONTEST_CULTURE(40),
	m_iMINOR_QUEST_FRIENDSHIP_CONTEST_FAITH(40),
	m_iMINOR_QUEST_FRIENDSHIP_CONTEST_TECHS(40),
	m_iMINOR_QUEST_FRIENDSHIP_INVEST(0),
	m_iMINOR_QUEST_FRIENDSHIP_BULLY_CITY_STATE(40),
	m_iMINOR_QUEST_FRIENDSHIP_DENOUNCE_MAJOR(40),
	m_iMINOR_QUEST_FRIENDSHIP_SPREAD_RELIGION(40),
	m_iMINOR_QUEST_FRIENDSHIP_TRADE_ROUTE(40),
#if defined(MOD_DIPLOMACY_CITYSTATES_QUESTS)
	m_iMINOR_QUEST_FRIENDSHIP_WAR(45),
	m_iMINOR_QUEST_FRIENDSHIP_FIND_CITY_STATE(35),
	m_iMINOR_QUEST_FRIENDSHIP_INFLUENCE(0),
	m_iMINOR_QUEST_FRIENDSHIP_TOURISM(40),
	m_iMINOR_QUEST_FRIENDSHIP_ARCHAEOLOGY(45),
	m_iMINOR_QUEST_FRIENDSHIP_CIRCUMNAVIGATION(30),
	m_iIDEOLOGY_PER_CITY_UNHAPPY(2),
	m_iIDEOLOGY_POP_PER_UNHAPPY(6),
	m_iWARMONGER_THREAT_PER_TURN_DECAY_INCREASED(200),
	m_iWARMONGER_THREAT_PER_TURN_DECAY_DECREASED(50),
	m_iWARMONGER_THREAT_ATTACKED_WEIGHT_WORLD_WAR(125),
	m_iWARMONGER_THREAT_ATTACKED_WEIGHT_WORLD_PEACE(400),
	m_iSCHOLAR_MINOR_ALLY_MULTIPLIER(5),
	m_iSCIENCE_LEAGUE_GREAT_WORK_MODIFIER(1),
	m_iPIONEER_POPULATION_CHANGE(3),
	m_iPIONEER_EXTRA_PLOTS(3),
	m_iPIONEER_FOOD_PERCENT(25),
	m_iCOLONIST_POPULATION_CHANGE(5),
	m_iCOLONIST_EXTRA_PLOTS(5),
	m_iCOLONIST_FOOD_PERCENT(50),
	m_iMINOR_QUEST_REBELLION_TIMER(20),
#endif
	m_iMINOR_QUEST_STANDARD_CONTEST_LENGTH(30),
	m_iMINOR_CIV_GOLD_GIFT_GAME_MULTIPLIER(2),
	m_iMINOR_CIV_GOLD_GIFT_GAME_DIVISOR(3),
	m_iMINOR_CIV_GOLD_GIFT_VISIBLE_DIVISOR(5),
	m_iMINOR_CIV_GOLD_GIFT_MINIMUM_FRIENDSHIP_REWARD(5),
	m_iMINOR_CIV_BEST_RELATIONS_HAPPINESS_BONUS(2),
	m_iMINOR_CIV_RESOURCE_SEARCH_RADIUS(5),
	m_iFRIENDSHIP_PER_UNIT_INTRUDING(-6),
	m_iFRIENDSHIP_PER_BARB_KILLED(5),
	m_iFRIENDSHIP_PER_UNIT_GIFTED(2),
	m_iMAX_INFLUENCE_FROM_MINOR_GIFTS(3),
	m_iMINOR_LIBERATION_FRIENDSHIP(150),
	m_iRETURN_CIVILIAN_FRIENDSHIP(30),
	m_iMINOR_CIV_MAX_GLOBAL_QUESTS_FOR_PLAYER(1),
	m_iMINOR_CIV_MAX_PERSONAL_QUESTS_FOR_PLAYER(2),
	m_iMINOR_CIV_GLOBAL_QUEST_FIRST_POSSIBLE_TURN(30),
	m_iMINOR_CIV_GLOBAL_QUEST_FIRST_POSSIBLE_TURN_RAND(20),
	m_iMINOR_CIV_GLOBAL_QUEST_MIN_TURNS_BETWEEN(10),
	m_iMINOR_CIV_GLOBAL_QUEST_RAND_TURNS_BETWEEN(25),
	m_iMINOR_CIV_GLOBAL_QUEST_RAND_TURNS_BETWEEN_HOSTILE_MULTIPLIER(200),
	m_iMINOR_CIV_PERSONAL_QUEST_FIRST_POSSIBLE_TURN(30),
	m_iMINOR_CIV_PERSONAL_QUEST_FIRST_POSSIBLE_TURN_RAND(20),
	m_iMINOR_CIV_PERSONAL_QUEST_MIN_TURNS_BETWEEN(10),
	m_iMINOR_CIV_PERSONAL_QUEST_RAND_TURNS_BETWEEN(25),
	m_iMINOR_CIV_PERSONAL_QUEST_RAND_TURNS_BETWEEN_HOSTILE_MULTIPLIER(200),
	m_iMINOR_CIV_QUEST_KILL_CAMP_RANGE(8),
	m_iMINOR_CIV_QUEST_WONDER_COMPLETION_THRESHOLD(25),
	m_iMINOR_CIV_THREATENED_BY_BARBS_NOTIF_THRESHOLD(2),
	m_iMINOR_CIV_MERCANTILE_RESOURCES_QUANTITY(1),
	m_iMINOR_CIV_MERCANTILE_RESOURCES_KEEP_ON_CAPTURE_DISABLED(0),	
	m_iQUEST_DISABLED_ROUTE(0),
	m_iQUEST_DISABLED_KILL_CAMP(0),
	m_iQUEST_DISABLED_CONNECT_RESOURCE(0),
	m_iQUEST_DISABLED_CONSTRUCT_WONDER(0),
	m_iQUEST_DISABLED_GREAT_PERSON(0),
	m_iQUEST_DISABLED_KILL_CITY_STATE(0),
	m_iQUEST_DISABLED_FIND_PLAYER(0),
	m_iQUEST_DISABLED_NATURAL_WONDER(0),
	m_iQUEST_DISABLED_GIVE_GOLD(0),
	m_iQUEST_DISABLED_PLEDGE_TO_PROTECT(0),
	m_iQUEST_DISABLED_CONTEST_CULTURE(0),
	m_iQUEST_DISABLED_CONTEST_FAITH(0),
	m_iQUEST_DISABLED_CONTEST_TECHS(0),
	m_iQUEST_DISABLED_INVEST(0),
	m_iQUEST_DISABLED_BULLY_CITY_STATE(0),
	m_iQUEST_DISABLED_DENOUNCE_MAJOR(0),
	m_iQUEST_DISABLED_SPREAD_RELIGION(0),
	m_iQUEST_DISABLED_TRADE_ROUTE(0),
#if defined(MOD_DIPLOMACY_CITYSTATES_QUESTS)
	m_iQUEST_DISABLED_WAR(0),
	m_iQUEST_DISABLED_FIND_CITY_STATE(0),
	m_iQUEST_DISABLED_INFLUENCE(0),
	m_iQUEST_DISABLED_TOURISM(0),
	m_iQUEST_DISABLED_ARCHAEOLOGY(0),
	m_iQUEST_DISABLED_CIRCUMNAVIGATION(0),
	m_iQUEST_DISABLED_LIBERATION(0),
	m_iQUEST_DISABLED_HORDE(0),
	m_iQUEST_DISABLED_REBELLION(0),
#endif
#if defined(MOD_BALANCE_CORE)
	m_iQUEST_DISABLED_CP_QUESTS(0),
#endif
	m_iMINOR_CIV_QUEST_WEIGHT_DEFAULT(10),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_FRIENDLY_ROUTE(200),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_HOSTILE_ROUTE(20),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MARITIME_ROUTE(120),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_ROUTE(150),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_KILL_CAMP(300),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MARITIME_CONNECT_RESOURCE(200),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_CONNECT_RESOURCE(300),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_CULTURED_CONSTRUCT_WONDER(300),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_CULTURED_GREAT_PERSON(300),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_KILL_CITY_STATE(200),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_HOSTILE_KILL_CITY_STATE(200),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_NEUTRAL_KILL_CITY_STATE(40),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MARITIME_FIND_PLAYER(300),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_FIND_PLAYER(200),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_FIND_NATURAL_WONDER(50),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_HOSTILE_FIND_NATURAL_WONDER(30),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_GIVE_GOLD(200),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_GIVE_GOLD(350),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_OTHER_GIVE_GOLD(300),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_PLEDGE_TO_PROTECT(200),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_CULTURED_PLEDGE_TO_PROTECT(350),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_OTHER_PLEDGE_TO_PROTECT(300),
#if defined(MOD_DIPLOMACY_CITYSTATES_QUESTS)
	m_iMINOR_CIV_QUEST_WAR_MILITARISTIC_VALUE(800),
	m_iMINOR_CIV_QUEST_WAR_HOSTILE_VALUE(600),
	m_iMINOR_CIV_QUEST_WAR_CULTURED_VALUE(500),
	m_iMINOR_CIV_QUEST_NATIONAL_WONDER_CULTURED_VALUE(300),
	m_iMINOR_CIV_QUEST_FIND_CITYSTATE_MARITIME_VALUE(115),
	m_iMINOR_CIV_QUEST_FIND_CITYSTATE_MERCANTILE_VALUE(120),
	m_iMINOR_CIV_QUEST_ARCHAEOLOGY_MILITARISTIC_VALUE(250),
	m_iMINOR_CIV_QUEST_ARCHAEOLOGY_RELIGIOUS_VALUE(300),
	m_iMINOR_CIV_QUEST_CIRCUMNAVIGATION_MARITIME_VALUE(250),
	m_iMINOR_CIV_QUEST_INFLUENCE_HOSTILE_VALUE(50),
	m_iMINOR_CIV_QUEST_TOURISM_FRIENDLY_VALUE(130),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_RELIGIOUS_LIBERATION(500),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_FRIENDLY_LIBERATION(400),
	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_LIBERATION(600),
	m_iINFLUENCE_TARGET_DISTANCE_WEIGHT_VALUE(2),
	m_iAI_MILITARY_RECAPTURING_CITY_STATE(200),
	m_iNEED_DIPLOMAT_THRESHOLD_MODIFIER(125),
	m_iNEED_DIPLOMAT_DESIRE_MODIFIER(1),
	m_iNEED_DIPLOMAT_DISTASTE_MODIFIER(7),
	m_iINFLUENCE_MINOR_QUEST_BOOST(20),
	m_iQUEST_REBELLION_FREQUENCY(300),
	m_iBARBARIAN_HORDE_FREQUENCY(300),
	m_iLEAGUE_AID_MAX(30),
	m_iCSD_GOLD_GIFT_DISABLED(1),
#endif
	m_iRELIGION_BELIEF_SCORE_CITY_MULTIPLIER(10),
	m_iRELIGION_BELIEF_SCORE_WORKED_PLOT_MULTIPLIER(8),
	m_iRELIGION_BELIEF_SCORE_OWNED_PLOT_MULTIPLIER(5),
	m_iRELIGION_BELIEF_SCORE_UNOWNED_PLOT_MULTIPLIER(3),
	m_iRELIGION_MISSIONARY_RANGE_IN_TURNS(10),
	m_iRELIGION_MAX_MISSIONARIES(4),
	m_iMC_GIFT_WEIGHT_THRESHOLD(100),
	m_iMC_ALWAYS_GIFT_DIPLO_THRESHOLD(4),
	m_iMC_SOMETIMES_GIFT_RAND_MULTIPLIER(5),
	m_iMC_SMALL_GIFT_WEIGHT_PASS_OTHER_PLAYER(30),
	m_iMC_GIFT_WEIGHT_PASS_OTHER_PLAYER(15),
	m_iMC_GIFT_WEIGHT_MARITIME_GROWTH(100),
	m_iMC_GIFT_WEIGHT_DIPLO_VICTORY(100),
	m_iMC_GIFT_WEIGHT_CULTURE_VICTORY(100),
	m_iMC_GIFT_WEIGHT_CONQUEST_VICTORY(100),
	m_iMC_GIFT_WEIGHT_MILITARISTIC(-50),
	m_iMC_GIFT_WEIGHT_RESOURCE_WE_NEED(80),
	m_iMC_GIFT_WEIGHT_NEUTRAL_VICTORY_ROLL(101),
	m_iMC_GIFT_WEIGHT_PROTECTIVE(10),
	m_iMC_GIFT_WEIGHT_HOSTILE(-20),
	m_iMC_GIFT_WEIGHT_NEIGHBORS(5),
	m_iMC_GIFT_WEIGHT_CLOSE(4),
	m_iMC_GIFT_WEIGHT_FAR(3),
	m_iMC_GIFT_WEIGHT_ALMOST_NOT_ALLIES(150),
	m_iMC_GIFT_WEIGHT_ALMOST_NOT_FRIENDS(125),
	m_iOPINION_WEIGHT_BASE_HUMAN(0),
	m_iOPINION_WEIGHT_BASE_AI(0),
	m_iOPINION_WEIGHT_LAND_FIERCE(30),
	m_iOPINION_WEIGHT_LAND_STRONG(20),
	m_iOPINION_WEIGHT_LAND_WEAK(10),
	m_iOPINION_WEIGHT_LAND_NONE(-6),
	m_iOPINION_WEIGHT_LAND_ANCIENT_ERA(10),
	m_iOPINION_WEIGHT_LAND_CLASSICAL_ERA(5),
	m_iOPINION_WEIGHT_LAND_NONE_EARLY_GAME(-5),
	m_iOPINION_WEIGHT_LAND_WARMONGER(10),
	m_iOPINION_WEIGHT_LAND_NONE_WARMONGER(-5),
	m_iOPINION_WEIGHT_VICTORY_FIERCE(30),
	m_iOPINION_WEIGHT_VICTORY_STRONG(20),
	m_iOPINION_WEIGHT_VICTORY_WEAK(10),
	m_iOPINION_WEIGHT_VICTORY_NONE(0),
	m_iOPINION_WEIGHT_VICTORY_PER_ERA(1),
	m_iOPINION_WEIGHT_VICTORY_BLOCK_FIERCE(30),
	m_iOPINION_WEIGHT_VICTORY_BLOCK_STRONG(20),
	m_iOPINION_WEIGHT_VICTORY_BLOCK_WEAK(10),
	m_iOPINION_WEIGHT_VICTORY_BLOCK_NONE(0),
	m_iOPINION_WEIGHT_VICTORY_BLOCK_PER_ERA(1),
	m_iOPINION_WEIGHT_WONDER_FIERCE(20),
	m_iOPINION_WEIGHT_WONDER_STRONG(15),
	m_iOPINION_WEIGHT_WONDER_WEAK(10),
	m_iOPINION_WEIGHT_WONDER_NONE(0),
	m_iOPINION_WEIGHT_WONDER_CULTURAL(10),
	m_iOPINION_WEIGHT_WONDER_NONE_CULTURAL(-10),
	m_iOPINION_WEIGHT_MINOR_CIV_FIERCE(30),
	m_iOPINION_WEIGHT_MINOR_CIV_STRONG(20),
	m_iOPINION_WEIGHT_MINOR_CIV_WEAK(10),
	m_iOPINION_WEIGHT_MINOR_CIV_NONE(0),
	m_iOPINION_WEIGHT_MINOR_CIV_DIPLOMAT(10),
	m_iOPINION_WEIGHT_MINOR_CIV_NONE_DIPLOMAT(-10),
	m_iOPINION_WEIGHT_TECH_FIERCE(30),
	m_iOPINION_WEIGHT_TECH_STRONG(20),
	m_iOPINION_WEIGHT_TECH_WEAK(10),
	m_iOPINION_WEIGHT_TECH_NONE(-10),
	m_iOPINION_WEIGHT_POLICY_FIERCE(30),
	m_iOPINION_WEIGHT_POLICY_STRONG(20),
	m_iOPINION_WEIGHT_POLICY_WEAK(10),
	m_iOPINION_WEIGHT_POLICY_NONE(-10),
	m_iOPINION_WEIGHT_WARMONGER_CRITICAL(100),
	m_iOPINION_WEIGHT_WARMONGER_SEVERE(70),
	m_iOPINION_WEIGHT_WARMONGER_MAJOR(40),
	m_iOPINION_WEIGHT_WARMONGER_MINOR(15),
	m_iOPINION_WEIGHT_WARMONGER_NONE(0),
	m_iOPINION_WEIGHT_ASKED_NO_SETTLE(20),
	m_iOPINION_WEIGHT_ASKED_STOP_SPYING(20),
	m_iOPINION_WEIGHT_MADE_DEMAND_OF_US(20),
	m_iOPINION_WEIGHT_MADE_DEMAND_OF_US_SUBSEQUENT(10),
	m_iOPINION_WEIGHT_RETURNED_CIVILIAN(-20),
	m_iOPINION_WEIGHT_RETURNED_CIVILIAN_SUBSEQUENT(-5),
	m_iOPINION_WEIGHT_BUILT_LANDMARK(-20),
	m_iOPINION_WEIGHT_BUILT_LANDMARK_SUBSEQUENT(-10),
	m_iOPINION_WEIGHT_RESURRECTED(-200),
	m_iOPINION_WEIGHT_LIBERATOR_CAPTURED_CAPITAL_DIVISOR(200),
	m_iOPINION_WEIGHT_LIBERATOR_CAPTURED_HOLY_CITY_DIVISOR(200),
	m_iOPINION_WEIGHT_LIBERATED_CAPITAL(-120),
	m_iOPINION_WEIGHT_LIBERATED_CAPITAL_VASSAL_MULTIPLIER(150),
	m_iOPINION_WEIGHT_LIBERATED_HOLY_CITY(-80),
	m_iOPINION_WEIGHT_LIBERATED_HOLY_CITY_VASSAL_MULTIPLIER(150),
	m_iOPINION_WEIGHT_LIBERATED_CITY(-30),
	m_iOPINION_WEIGHT_LIBERATED_CITY_VASSAL_MULTIPLIER(200),
	m_iOPINION_WEIGHT_RETURNED_CAPITAL(-60),
	m_iOPINION_WEIGHT_RETURNED_CAPITAL_VASSAL_MULTIPLIER(150),
	m_iOPINION_WEIGHT_RETURNED_HOLY_CITY(-40),
	m_iOPINION_WEIGHT_RETURNED_HOLY_CITY_VASSAL_MULTIPLIER(150),
	m_iOPINION_WEIGHT_LIBERATED_ONE_CITY(-30),
	m_iOPINION_WEIGHT_LIBERATED_TWO_CITIES(-50),
	m_iOPINION_WEIGHT_LIBERATED_THREE_CITIES(-60),
	m_iOPINION_WEIGHT_EMBASSY(-1),
	m_iOPINION_WEIGHT_DIPLOMAT(-15),
	m_iOPINION_WEIGHT_DIPLOMAT_MOD(-10),
	m_iOPINION_WEIGHT_CULTURE_BOMBED(30),
	m_iOPINION_WEIGHT_PER_NEGATIVE_CONVERSION(2),
	m_iOPINION_WEIGHT_ADOPTING_HIS_RELIGION(-10),
	m_iOPINION_WEIGHT_ADOPTING_MY_RELIGION(-6),
	m_iOPINION_WEIGHT_SAME_MAJORITY_RELIGIONS(-2),
	m_iOPINION_WEIGHT_DIFFERENT_STATE_RELIGIONS(5),
	m_iOPINION_WEIGHT_DIFFERENT_MAJORITY_RELIGIONS(2),
	m_iOPINION_WEIGHT_WORLD_RELIGION_MODIFIER(150),
	m_iOPINION_WEIGHT_SAME_LATE_POLICIES(-10),
	m_iOPINION_WEIGHT_DIFFERENT_LATE_POLICIES(10),
	m_iOPINION_WEIGHT_WORLD_IDEOLOGY_MODIFIER(150),
	m_iOPINION_WEIGHT_IDEOLOGY_VASSAL_DIVISOR(200),
	m_iOPINION_WEIGHT_BROKEN_MILITARY_PROMISE(40),
	m_iOPINION_WEIGHT_BROKEN_MILITARY_PROMISE_WORLD(15),
	m_iOPINION_WEIGHT_IGNORED_MILITARY_PROMISE(15),
	m_iOPINION_WEIGHT_BROKEN_EXPANSION_PROMISE(20),
	m_iOPINION_WEIGHT_IGNORED_EXPANSION_PROMISE(15),
	m_iOPINION_WEIGHT_BROKEN_BORDER_PROMISE(20),
	m_iOPINION_WEIGHT_IGNORED_BORDER_PROMISE(15),
	m_iOPINION_WEIGHT_BROKEN_CITY_STATE_PROMISE(40),
	m_iOPINION_WEIGHT_BROKEN_CITY_STATE_PROMISE_WORLD(15),
	m_iOPINION_WEIGHT_IGNORED_CITY_STATE_PROMISE(15),
	m_iOPINION_WEIGHT_BROKEN_BULLY_CITY_STATE_PROMISE(20),
	m_iOPINION_WEIGHT_IGNORED_BULLY_CITY_STATE_PROMISE(10),
	m_iOPINION_WEIGHT_BROKEN_SPY_PROMISE(20),
	m_iOPINION_WEIGHT_IGNORED_SPY_PROMISE(10),
	m_iOPINION_WEIGHT_FORGAVE_FOR_SPYING(-10),
	m_iOPINION_WEIGHT_BROKEN_NO_CONVERT_PROMISE(8),
	m_iOPINION_WEIGHT_IGNORED_NO_CONVERT_PROMISE(4),
	m_iOPINION_WEIGHT_BROKEN_NO_DIG_PROMISE(30),
	m_iOPINION_WEIGHT_IGNORED_NO_DIG_PROMISE(20),
	m_iOPINION_WEIGHT_BROKEN_COOP_WAR_PROMISE(20),
	m_iOPINION_WEIGHT_KILLED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN(125),
	m_iOPINION_WEIGHT_KILLED_PROTECTED_MINOR(40),
	m_iOPINION_WEIGHT_KILLED_MANY_PROTECTED_MINORS(10),
	m_iOPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN(75),
	m_iOPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_RECENTLY_NUM_TURNS(50),
	m_iOPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_RECENTLY(20),
	m_iOPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_WHILE_AGO(15),
	m_iOPINION_WEIGHT_ATTACKED_MANY_PROTECTED_MINORS(15),
	m_iOPINION_WEIGHT_BULLIED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN(75),
	m_iOPINION_WEIGHT_BULLIED_PROTECTED_MINOR_RECENTLY_NUM_TURNS(50),
	m_iOPINION_WEIGHT_BULLIED_PROTECTED_MINOR_RECENTLY(15),
	m_iOPINION_WEIGHT_BULLIED_PROTECTED_MINOR_WHILE_AGO(10),
	m_iOPINION_WEIGHT_BULLIED_MANY_PROTECTED_MINORS(10),
	m_iOPINION_WEIGHT_SIDED_WITH_THEIR_MINOR_NUM_TURNS_UNTIL_FORGIVEN(25),
	m_iOPINION_WEIGHT_SIDED_WITH_THEIR_MINOR(5),
	m_iOPINION_WEIGHT_SIDED_WITH_THEIR_MINOR_AGGRESSIVE_MOD(10),
	m_iOPINION_WEIGHT_DOF(-35),
	m_iOPINION_WEIGHT_DOF_MOST_VALUED_FRIEND(-20),
	m_iOPINION_WEIGHT_DOF_TYPE_FRIENDS(-10),
	m_iOPINION_WEIGHT_DOF_TYPE_ALLIES(-20),
	m_iOPINION_WEIGHT_DOF_TYPE_BATTLE_BROTHERS(-30),
	m_iOPINION_WEIGHT_DOF_WITH_FRIEND(-20),
	m_iOPINION_WEIGHT_DOF_WITH_FRIEND_SUBSEQUENT(-8),
	m_iOPINION_WEIGHT_DOF_WITH_MOST_VALUED_FRIEND(-20),
	m_iOPINION_WEIGHT_DOF_WITH_MOST_VALUED_ALLY(-10),
	m_iOPINION_WEIGHT_DOF_WITH_ENEMY(20),
	m_iOPINION_WEIGHT_DOF_WITH_ENEMY_SUBSEQUENT(8),
	m_iOPINION_WEIGHT_DOF_WITH_BIGGEST_COMPETITOR(20),
	m_iOPINION_WEIGHT_DOF_WITH_BIGGEST_LEAGUE_RIVAL(20),
	m_iOPINION_WEIGHT_BETRAYED_OUR_FRIEND_MULTIPLIER(200),
	m_iOPINION_WEIGHT_DENOUNCED_BY_FRIEND_EACH(25),
	m_iOPINION_WEIGHT_DENOUNCED_BY_FRIEND_DONT_LIKE(-10),
	m_iOPINION_WEIGHT_DENOUNCED_FRIEND_EACH(15),
	m_iOPINION_WEIGHT_DENOUNCED_ME_FRIENDS(35),
	m_iOPINION_WEIGHT_WAR_FRIEND_EACH(40),
	m_iOPINION_WEIGHT_WAR_ME_FRIENDS(60),
	m_iOPINION_WEIGHT_RESURRECTOR_ATTACKED_US(200),
	m_iOPINION_WEIGHT_REFUSED_REQUEST_EACH(15),
	m_iOPINION_WEIGHT_DENOUNCED_ME(35),
	m_iOPINION_WEIGHT_DENOUNCED_THEM(35),
	m_iOPINION_WEIGHT_MUTUAL_DENOUNCEMENT(70),
	m_iOPINION_WEIGHT_DENOUNCED_FRIEND(20),
	m_iOPINION_WEIGHT_DENOUNCED_FRIEND_SUBSEQUENT(8),
	m_iOPINION_WEIGHT_DENOUNCED_MOST_VALUED_FRIEND(15),
	m_iOPINION_WEIGHT_DENOUNCED_MOST_VALUED_ALLY(15),
	m_iOPINION_WEIGHT_DENOUNCED_ENEMY(-20),
	m_iOPINION_WEIGHT_DENOUNCED_ENEMY_SUBSEQUENT(-8),
	m_iOPINION_WEIGHT_DENOUNCED_BIGGEST_COMPETITOR(-15),
	m_iOPINION_WEIGHT_DENOUNCED_BIGGEST_LEAGUE_RIVAL(-15),
	m_iOPINION_WEIGHT_DENOUNCED_BY_THEIR_FRIEND(20),
	m_iOPINION_WEIGHT_DENOUNCED_BY_THEIR_FRIEND_SUBSEQUENT(8),
	m_iOPINION_WEIGHT_DENOUNCED_BY_THEIR_KEY_FRIEND(15),
	m_iRECKLESS_EXPANDER_CITIES_THRESHOLD(200),
	m_iRECKLESS_EXPANDER_LAND_THRESHOLD(250),
	m_iOPINION_WEIGHT_RECKLESS_EXPANDER(35),
	m_iOPINION_WEIGHT_RECKLESS_EXPANDER_PER_CITY(10),
	m_iOPINION_WEIGHT_RECKLESS_EXPANDER_PER_TILE(1),
	m_iOPINION_WEIGHT_RECKLESS_EXPANDER_STRATEGIC_MOD(20),
	m_iWONDER_SPAMMER_THRESHOLD(3),
	m_iOPINION_WEIGHT_WONDER_SPAMMER(20),
	m_iOPINION_WEIGHT_WONDER_SPAMMER_PER_WONDER(5),
	m_iOPINION_WEIGHT_WONDER_SPAMMER_CAP(60),
	m_iOPINION_WEIGHT_WONDER_SPAMMER_STRATEGIC_MOD(20),
	m_iOPINION_WEIGHT_TRADE_MAX(-40),
	m_iOPINION_WEIGHT_STRATEGIC_TRADE_PARTNER_MULTIPLIER(150),
	m_iOPINION_WEIGHT_NUKED_MAX(50),
	m_iCIVILIAN_KILLER_VALUE_PER_OPINION_WEIGHT(100),
	m_iCIVILIAN_KILLER_VALUE_PER_TURN_DECAY(100),
	m_iOPINION_WEIGHT_CIVILIAN_KILLER_MAX(50),
	m_iOPINION_WEIGHT_CIVILIAN_KILLER_WORLD_THRESHOLD(25),
	m_iOPINION_WEIGHT_CIVILIAN_KILLER_WORLD(20),
	m_iOPINION_WEIGHT_PER_SIMILAR_POLICY(-5),
	m_iOPINION_WEIGHT_PER_DIVERGENT_POLICY(-5),
	m_iOPINION_WEIGHT_SIMILAR_POLICIES(-10),
	m_iOPINION_WEIGHT_DIVERGENT_POLICIES(10),
	m_iPOLICY_SCORE_NEEDY_THRESHOLD(8),
	m_iPOLICY_SCORE_NEEDY_BONUS(5),
	m_iOPINION_WEIGHT_PTP_SAME_MINOR_EACH(-3),
	m_iOPINION_WEIGHT_PTP_SAME_MINOR_MIN(-12),
	m_iOPINION_WEIGHT_PTP_SAME_MINOR_DIPLOMAT_MULTIPLIER(200),
	m_iOPINION_WEIGHT_CAPTURED_HOLY_CITY(80),
	m_iOPINION_WEIGHT_CAPTURED_KEY_CITY_RETURNED_DIVISOR(200),
	m_iOPINION_WEIGHT_CAPTURED_KEY_CITY_CAPITULATION_DIVISOR(200),
	m_iOPINION_WEIGHT_ROBBED_BY(20),
	m_iOPINION_WEIGHT_INTRIGUE_SHARED_BY(-10),
	m_iOPINION_WEIGHT_INTRIGUE_SHARED_BY_SUBSEQUENT(-5),
	m_iOPINION_WEIGHT_PRIME_LEAGUE_COMPETITOR(25),
	m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_ENEMY(20),
	m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_HATRED(15),
	m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_RIVAL(10),
	m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_FRIEND(-10),
	m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_CONFIDANT(-15),
	m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_ALLY(-20),
	m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_LIBERATOR(-25),
	m_iOPINION_WEIGHT_PRIME_LEAGUE_COMPETITOR_DIPLOMAT(50),
	m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_ENEMY_DIPLOMAT(40),
	m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_HATRED_DIPLOMAT(30),
	m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_RIVAL_DIPLOMAT(20),
	m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_FRIEND_DIPLOMAT(-20),
	m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_CONFIDANT_DIPLOMAT(-30),
	m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_ALLY_DIPLOMAT(-40),
	m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_LIBERATOR_DIPLOMAT(-50),
	m_iOPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL(-15),
	m_iOPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_STRONG(-15),
	m_iOPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_OVERWHELMING(-45),
	m_iOPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_DIPLOMAT_MULTIPLIER(134),
	m_iOPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_NUM_TURNS(45),
	m_iOPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL(15),
	m_iOPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_STRONG(15),
	m_iOPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_OVERWHELMING(45),
	m_iOPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_DIPLOMAT_MULTIPLIER(134),
	m_iOPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_NUM_TURNS(45),
	m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL(-10),
	m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_MAX(-60),
	m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_DIPLOMAT_MULTIPLIER(167),
	m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_NUM_TURNS(45),
	m_iOPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL(10),
	m_iOPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_MAX(60),
	m_iOPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_DIPLOMAT_MULTIPLIER(167),
	m_iOPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_NUM_TURNS(45),
	m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING(-20),
	m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_MAX(-70),
	m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_DIPLOMAT_MULTIPLIER(150),
	m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_NUM_TURNS(45),
	m_iOPINION_WEIGHT_PER_VOTE_PERCENT(2),
	m_iOPINION_THRESHOLD_UNFORGIVABLE(160),
	m_iOPINION_THRESHOLD_ENEMY(80),
	m_iOPINION_THRESHOLD_COMPETITOR(30),
	m_iOPINION_THRESHOLD_FAVORABLE(-30),
	m_iOPINION_THRESHOLD_FRIEND(-80),
	m_iOPINION_THRESHOLD_ALLY(-160),
	m_iAPPROACH_NEUTRAL_HUMAN(0),
	m_iAPPROACH_FRIENDLY_HUMAN(0),
	m_iAPPROACH_AFRAID_HUMAN(0),
	m_iAPPROACH_GUARDED_HUMAN(0),
	m_iAPPROACH_DECEPTIVE_HUMAN(0),
	m_iAPPROACH_HOSTILE_HUMAN(0),
	m_iAPPROACH_WAR_HUMAN(0),
	m_iAPPROACH_NEUTRAL_HUMAN_PERCENT(0),
	m_iAPPROACH_FRIENDLY_HUMAN_PERCENT(0),
	m_iAPPROACH_AFRAID_HUMAN_PERCENT(0),
	m_iAPPROACH_GUARDED_HUMAN_PERCENT(0),
	m_iAPPROACH_DECEPTIVE_HUMAN_PERCENT(0),
	m_iAPPROACH_HOSTILE_HUMAN_PERCENT(0),
	m_iAPPROACH_WAR_HUMAN_PERCENT(0),
	m_iAPPROACH_NEUTRAL_AI(0),
	m_iAPPROACH_FRIENDLY_AI(0),
	m_iAPPROACH_AFRAID_AI(0),
	m_iAPPROACH_GUARDED_AI(0),
	m_iAPPROACH_DECEPTIVE_AI(0),
	m_iAPPROACH_HOSTILE_AI(0),
	m_iAPPROACH_WAR_AI(0),
	m_iAPPROACH_NEUTRAL_AI_PERCENT(0),
	m_iAPPROACH_FRIENDLY_AI_PERCENT(0),
	m_iAPPROACH_AFRAID_AI_PERCENT(0),
	m_iAPPROACH_GUARDED_AI_PERCENT(0),
	m_iAPPROACH_DECEPTIVE_AI_PERCENT(0),
	m_iAPPROACH_HOSTILE_AI_PERCENT(0),
	m_iAPPROACH_WAR_AI_PERCENT(0),
	m_iMAJOR_WAR_MULTIPLIER_TARGET_SOFT(150),
	m_iMAJOR_WAR_MULTIPLIER_TARGET_FAVORABLE(125),
	m_iMAJOR_WAR_MULTIPLIER_TARGET_AVERAGE(75),
	m_iMAJOR_WAR_MULTIPLIER_TARGET_BAD(50),
	m_iMAJOR_WAR_MULTIPLIER_TARGET_IMPOSSIBLE(25),
	m_iCONQUEST_WAR_MULTIPLIER_TARGET_SOFT(150),
	m_iCONQUEST_WAR_MULTIPLIER_TARGET_FAVORABLE(125),
	m_iCONQUEST_WAR_MULTIPLIER_TARGET_AVERAGE(75),
	m_iCONQUEST_WAR_MULTIPLIER_TARGET_BAD(50),
	m_iCONQUEST_WAR_MULTIPLIER_TARGET_IMPOSSIBLE(25),
	m_iAPPROACH_MULTIPLIER_PROXIMITY_NEIGHBORS(200),
	m_iAPPROACH_MULTIPLIER_PROXIMITY_CLOSE(150),
	m_iAPPROACH_MULTIPLIER_PROXIMITY_FAR(75),
	m_iAPPROACH_MULTIPLIER_PROXIMITY_DISTANT(50),
	m_iAPPROACH_NEUTRAL_DEFAULT(4),
	m_iAPPROACH_BIAS_FOR_CURRENT(3),
	m_iAPPROACH_WAR_CURRENTLY_DECEPTIVE(2),
	m_iAPPROACH_HOSTILE_CURRENTLY_HOSTILE(5),
	m_iAPPROACH_WAR_CURRENTLY_WAR(3),
	m_iAPPROACH_RANDOM_PERCENT(15),
	m_iAPPROACH_WAR_CONQUEST_GRAND_STRATEGY(5),
	m_iAPPROACH_OPINION_UNFORGIVABLE_WAR(10),
	m_iAPPROACH_OPINION_UNFORGIVABLE_HOSTILE(4),
	m_iAPPROACH_OPINION_UNFORGIVABLE_DECEPTIVE(0),
	m_iAPPROACH_OPINION_UNFORGIVABLE_GUARDED(4),
	m_iAPPROACH_OPINION_ENEMY_WAR(8),
	m_iAPPROACH_OPINION_ENEMY_HOSTILE(4),
	m_iAPPROACH_OPINION_ENEMY_DECEPTIVE(1),
	m_iAPPROACH_OPINION_ENEMY_GUARDED(4),
	m_iAPPROACH_OPINION_COMPETITOR_WAR(4),
	m_iAPPROACH_OPINION_COMPETITOR_HOSTILE(4),
	m_iAPPROACH_OPINION_COMPETITOR_DECEPTIVE(2),
	m_iAPPROACH_OPINION_COMPETITOR_GUARDED(2),
	m_iAPPROACH_OPINION_NEUTRAL_DECEPTIVE(0),
	m_iAPPROACH_OPINION_NEUTRAL_FRIENDLY(2),
	m_iAPPROACH_OPINION_FAVORABLE_HOSTILE(-5),
	m_iAPPROACH_OPINION_FAVORABLE_DECEPTIVE(0),
	m_iAPPROACH_OPINION_FAVORABLE_FRIENDLY(4),
	m_iAPPROACH_OPINION_FRIEND_HOSTILE(-5),
	m_iAPPROACH_OPINION_FRIEND_FRIENDLY(10),
	m_iAPPROACH_OPINION_ALLY_FRIENDLY(10),
	m_iAPPROACH_DECEPTIVE_WORKING_WITH_PLAYER(15),
	m_iAPPROACH_FRIENDLY_WORKING_WITH_PLAYER(15),
	m_iAPPROACH_HOSTILE_WORKING_WITH_PLAYER(-10),
	m_iAPPROACH_GUARDED_WORKING_WITH_PLAYER(-10),
	m_iAPPROACH_DECEPTIVE_WORKING_AGAINST_PLAYER(10),
	m_iAPPROACH_HOSTILE_WORKING_AGAINST_PLAYER(10),
	m_iAPPROACH_WAR_WORKING_AGAINST_PLAYER(10),
	m_iAPPROACH_WAR_DENOUNCED(10),
	m_iAPPROACH_HOSTILE_DENOUNCED(10),
	m_iAPPROACH_GUARDED_DENOUNCED(5),
	m_iAPPROACH_FRIENDLY_DENOUNCED(-15),
	m_iAPPROACH_DECEPTIVE_DENOUNCED(-15),
	m_iAPPROACH_ATTACKED_PROTECTED_MINOR_WAR(6),
	m_iAPPROACH_ATTACKED_PROTECTED_MINOR_HOSTILE(2),
	m_iAPPROACH_ATTACKED_PROTECTED_MINOR_GUARDED(1),
	m_iAPPROACH_ATTACKED_PROTECTED_MINOR_PAST_WAR(4),
	m_iAPPROACH_ATTACKED_PROTECTED_MINOR_PAST_HOSTILE(1),
	m_iAPPROACH_ATTACKED_PROTECTED_MINOR_PAST_GUARDED(1),
	m_iAPPROACH_DECEPTIVE_MILITARY_THREAT_CRITICAL(0),
	m_iAPPROACH_GUARDED_MILITARY_THREAT_CRITICAL(4),
	m_iAPPROACH_AFRAID_MILITARY_THREAT_CRITICAL(4),
	m_iAPPROACH_DECEPTIVE_DEMAND(-6),
	m_iAPPROACH_FRIENDLY_DEMAND(-6),
	m_iAPPROACH_WAR_BROKEN_MILITARY_PROMISE(4),
	m_iAPPROACH_DECEPTIVE_BROKEN_MILITARY_PROMISE(-10),
	m_iAPPROACH_FRIENDLY_BROKEN_MILITARY_PROMISE(-10),
	m_iAPPROACH_WAR_BROKEN_MILITARY_PROMISE_WORLD(5),
	m_iAPPROACH_DECEPTIVE_BROKEN_MILITARY_PROMISE_WORLD(-4),
	m_iAPPROACH_FRIENDLY_BROKEN_MILITARY_PROMISE_WORLD(-4),
	m_iAPPROACH_DECEPTIVE_IGNORED_MILITARY_PROMISE(-4),
	m_iAPPROACH_FRIENDLY_IGNORED_MILITARY_PROMISE(-4),
	m_iAPPROACH_WAR_BROKEN_EXPANSION_PROMISE(4),
	m_iAPPROACH_DECEPTIVE_BROKEN_EXPANSION_PROMISE(-6),
	m_iAPPROACH_FRIENDLY_BROKEN_EXPANSION_PROMISE(-6),
	m_iAPPROACH_WAR_IGNORED_EXPANSION_PROMISE(3),
	m_iAPPROACH_DECEPTIVE_IGNORED_EXPANSION_PROMISE(-4),
	m_iAPPROACH_FRIENDLY_IGNORED_EXPANSION_PROMISE(-4),
	m_iAPPROACH_WAR_BROKEN_BORDER_PROMISE(4),
	m_iAPPROACH_DECEPTIVE_BROKEN_BORDER_PROMISE(-6),
	m_iAPPROACH_FRIENDLY_BROKEN_BORDER_PROMISE(-6),
	m_iAPPROACH_WAR_IGNORED_BORDER_PROMISE(3),
	m_iAPPROACH_DECEPTIVE_IGNORED_BORDER_PROMISE(-4),
	m_iAPPROACH_FRIENDLY_IGNORED_BORDER_PROMISE(-4),
	m_iAPPROACH_WAR_BROKEN_CITY_STATE_PROMISE(4),
	m_iAPPROACH_DECEPTIVE_BROKEN_CITY_STATE_PROMISE(-10),
	m_iAPPROACH_FRIENDLY_BROKEN_CITY_STATE_PROMISE(-10),
	m_iAPPROACH_WAR_BROKEN_CITY_STATE_PROMISE_WORLD(3),
	m_iAPPROACH_DECEPTIVE_BROKEN_CITY_STATE_PROMISE_WORLD(-3),
	m_iAPPROACH_FRIENDLY_BROKEN_CITY_STATE_PROMISE_WORLD(-3),
	m_iAPPROACH_WAR_IGNORED_CITY_STATE_PROMISE(4),
	m_iAPPROACH_DECEPTIVE_IGNORED_CITY_STATE_PROMISE(-4),
	m_iAPPROACH_FRIENDLY_IGNORED_CITY_STATE_PROMISE(-4),
	m_iAPPROACH_FRIENDLY_MILITARY_THREAT_CRITICAL(0),
	m_iAPPROACH_DECEPTIVE_MILITARY_THREAT_SEVERE(0),
	m_iAPPROACH_GUARDED_MILITARY_THREAT_SEVERE(3),
	m_iAPPROACH_AFRAID_MILITARY_THREAT_SEVERE(2),
	m_iAPPROACH_FRIENDLY_MILITARY_THREAT_SEVERE(0),
	m_iAPPROACH_DECEPTIVE_MILITARY_THREAT_MAJOR(0),
	m_iAPPROACH_GUARDED_MILITARY_THREAT_MAJOR(2),
	m_iAPPROACH_AFRAID_MILITARY_THREAT_MAJOR(1),
	m_iAPPROACH_FRIENDLY_MILITARY_THREAT_MAJOR(0),
	m_iAPPROACH_DECEPTIVE_MILITARY_THREAT_MINOR(0),
	m_iAPPROACH_GUARDED_MILITARY_THREAT_MINOR(0),
	m_iAPPROACH_AFRAID_MILITARY_THREAT_MINOR(1),
	m_iAPPROACH_FRIENDLY_MILITARY_THREAT_MINOR(0),
	m_iAPPROACH_HOSTILE_MILITARY_THREAT_NONE(2),
	m_iAPPROACH_WAR_AT_WAR_WITH_PLAYER_WARS_NEUTRAL(-9),
	m_iAPPROACH_WAR_AT_WAR_WITH_PLAYER_WARS_WINNING(-3),
	m_iAPPROACH_WAR_AT_WAR_WITH_PLAYER_WARS_LOSING(-12),
	m_iAPPROACH_HOSTILE_AT_WAR_WITH_PLAYER(-2),
	m_iAPPROACH_DECEPTIVE_AT_WAR_WITH_PLAYER(2),
	m_iAPPROACH_GUARDED_AT_WAR_WITH_PLAYER(0),
	m_iAPPROACH_FRIENDLY_AT_WAR_WITH_PLAYER(2),
	m_iAPPROACH_WAR_PLANNING_WAR_WITH_ANOTHER_PLAYER(-12),
	m_iAPPROACH_HOSTILE_PLANNING_WAR_WITH_ANOTHER_PLAYER(-2),
	m_iAPPROACH_DECEPTIVE_PLANNING_WAR_WITH_ANOTHER_PLAYER(2),
	m_iAPPROACH_GUARDED_PLANNING_WAR_WITH_ANOTHER_PLAYER(0),
	m_iAPPROACH_FRIENDLY_PLANNING_WAR_WITH_ANOTHER_PLAYER(2),
	m_iAPPROACH_WAR_HOSTILE_WITH_ANOTHER_PLAYER(-2),
	m_iAPPROACH_HOSTILE_HOSTILE_WITH_ANOTHER_PLAYER(-2),
	m_iAPPROACH_DECEPTIVE_HOSTILE_WITH_ANOTHER_PLAYER(2),
	m_iAPPROACH_FRIENDLY_HOSTILE_WITH_ANOTHER_PLAYER(2),
	m_iAPPROACH_WAR_AFRAID_WITH_ANOTHER_PLAYER(-4),
	m_iAPPROACH_HOSTILE_AFRAID_WITH_ANOTHER_PLAYER(-4),
	m_iAPPROACH_DECEPTIVE_AFRAID_WITH_ANOTHER_PLAYER(2),
	m_iAPPROACH_FRIENDLY_AFRAID_WITH_ANOTHER_PLAYER(2),
	m_iAPPROACH_WAR_PROJECTION_DESTRUCTION_PERCENT(45),
	m_iAPPROACH_WAR_PROJECTION_DEFEAT_PERCENT(60),
	m_iAPPROACH_WAR_PROJECTION_STALEMATE_PERCENT(80),
	m_iAPPROACH_WAR_PROJECTION_UNKNOWN_PERCENT(100),
	m_iAPPROACH_WAR_PROJECTION_GOOD_PERCENT(150),
	m_iAPPROACH_WAR_PROJECTION_VERY_GOOD_PERCENT(180),
	m_iAPPROACH_GUARDED_PROJECTION_DESTRUCTION_PERCENT(125),
	m_iAPPROACH_GUARDED_PROJECTION_DEFEAT_PERCENT(115),
	m_iAPPROACH_GUARDED_PROJECTION_STALEMATE_PERCENT(105),
	m_iAPPROACH_GUARDED_PROJECTION_UNKNOWN_PERCENT(100),
	m_iAPPROACH_GUARDED_PROJECTION_GOOD_PERCENT(80),
	m_iAPPROACH_GUARDED_PROJECTION_VERY_GOOD_PERCENT(60),
	m_iTURNS_SINCE_PEACE_WEIGHT_DAMPENER(25),
	m_iAPPROACH_WAR_HAS_MADE_PEACE_BEFORE_PERCENT(65),
	m_iAPPROACH_WAR_RECKLESS_EXPANDER(160),
	m_iAPPROACH_WAR_PROXIMITY_NEIGHBORS(200),
	m_iAPPROACH_WAR_PROXIMITY_NEIGHBORS_EARLY_GAME(300),
	m_iAPPROACH_WAR_PROXIMITY_CLOSE(150),
	m_iAPPROACH_WAR_PROXIMITY_CLOSE_EARLY_GAME(225),
	m_iAPPROACH_WAR_PROXIMITY_FAR(100),
	m_iAPPROACH_WAR_PROXIMITY_DISTANT(75),
	m_iMINOR_APPROACH_IGNORE_DEFAULT(1),
	m_iMINOR_APPROACH_BIAS_FOR_CURRENT(2),
	m_iMINOR_APPROACH_IGNORE_CURRENTLY_WAR(3),
	m_iMINOR_APPROACH_WAR_CONQUEST_GRAND_STRATEGY(10),
	m_iMINOR_APPROACH_PROTECTIVE_CONQUEST_GRAND_STRATEGY(-15),
	m_iMINOR_APPROACH_FRIENDLY_CONQUEST_GRAND_STRATEGY(-5),
	m_iMINOR_APPROACH_WAR_CONQUEST_GRAND_STRATEGY_NEIGHBORS(10),
	m_iMINOR_APPROACH_WAR_DIPLO_GRAND_STRATEGY(-20),
	m_iMINOR_APPROACH_IGNORE_DIPLO_GRAND_STRATEGY(-15),
	m_iMINOR_APPROACH_PROTECTIVE_DIPLO_GRAND_STRATEGY_NEIGHBORS(5),
	m_iMINOR_APPROACH_WAR_CULTURE_GRAND_STRATEGY(-20),
	m_iMINOR_APPROACH_IGNORE_CULTURE_GRAND_STRATEGY(-15),
	m_iMINOR_APPROACH_PROTECTIVE_CULTURE_GRAND_STRATEGY_CST(5),
	m_iMINOR_APPROACH_WAR_CURRENTLY_PROTECTIVE(-10),
	m_iMINOR_APPROACH_PROTECTIVE_CURRENTLY_PROTECTIVE(10),
	m_iMINOR_APPROACH_PROTECTIVE_CURRENTLY_WAR(-15),
	m_iMINOR_APPROACH_FRIENDLY_CURRENTLY_WAR(-6),
	m_iMINOR_APPROACH_FRIENDLY_RESOURCES(1),
	m_iMINOR_APPROACH_PROTECTIVE_RESOURCES(1),
	m_iMINOR_APPROACH_WAR_FRIENDS(-100),
	m_iMINOR_APPROACH_FRIENDLY_FRIENDS(4),
	m_iMINOR_APPROACH_PROTECTIVE_FRIENDS(2),
	m_iMINOR_APPROACH_IGNORE_PROXIMITY_NEIGHBORS(-2),
	m_iMINOR_APPROACH_FRIENDLY_PROXIMITY_NEIGHBORS(-1),
	m_iMINOR_APPROACH_PROTECTIVE_PROXIMITY_NEIGHBORS(1),
	m_iMINOR_APPROACH_CONQUEST_PROXIMITY_NEIGHBORS(1),
	m_iMINOR_APPROACH_IGNORE_PROXIMITY_CLOSE(-1),
	m_iMINOR_APPROACH_PROTECTIVE_PROXIMITY_CLOSE(1),
	m_iMINOR_APPROACH_CONQUEST_PROXIMITY_CLOSE(-2),
	m_iMINOR_APPROACH_FRIENDLY_PROXIMITY_FAR(2),
	m_iMINOR_APPROACH_CONQUEST_PROXIMITY_FAR(-4),
	m_iMINOR_APPROACH_FRIENDLY_PROXIMITY_DISTANT(2),
	m_iMINOR_APPROACH_CONQUEST_PROXIMITY_DISTANT(-10),
	m_iMINOR_APPROACH_FRIENDLY_PERSONALITY_FRIENDLY(0),
	m_iMINOR_APPROACH_PROTECTIVE_PERSONALITY_PROTECTIVE(0),
	m_iMINOR_APPROACH_FRIENDLY_PERSONALITY_NEUTRAL(0),
	m_iMINOR_APPROACH_PROTECTIVE_PERSONALITY_NEUTRAL(0),
	m_iMINOR_APPROACH_FRIENDLY_PERSONALITY_HOSTILE(-1),
	m_iMINOR_APPROACH_PROTECTIVE_PERSONALITY_HOSTILE(-2),
	m_iMINOR_APPROACH_CONQUEST_PERSONALITY_HOSTILE(1),
	m_iMINOR_APPROACH_FRIENDLY_PERSONALITY_IRRATIONAL(0),
	m_iMINOR_APPROACH_PROTECTIVE_PERSONALITY_IRRATIONAL(0),
	m_iMINOR_APPROACH_WAR_PLANNING_WAR_WITH_ANOTHER_PLAYER(-20),
	m_iMINOR_APPROACH_PROTECTIVE_WITH_ANOTHER_PLAYER(-2),
	m_iMINOR_APPROACH_WAR_TARGET_IMPOSSIBLE(10),
	m_iMINOR_APPROACH_WAR_TARGET_BAD(20),
	m_iMINOR_APPROACH_WAR_TARGET_AVERAGE(40),
	m_iMINOR_APPROACH_WAR_TARGET_FAVORABLE(110),
	m_iMINOR_APPROACH_WAR_TARGET_SOFT(130),
	m_iCOOP_WAR_DESIRE_THRESHOLD(40),
	m_iCOOPERATION_DESIRE_THRESHOLD_EAGER(200),
	m_iCOOPERATION_DESIRE_THRESHOLD_STRONG(150),
	m_iCOOPERATION_DESIRE_THRESHOLD_DECENT(100),
	m_iCOOPERATION_DESIRE_THRESHOLD_WEAK(50),
	m_iCOOPERATION_DESIRE_WAR_STATE_CALM(0),
	m_iCOOPERATION_DESIRE_WAR_STATE_NEARLY_WON(-100),
	m_iCOOPERATION_DESIRE_WAR_STATE_OFFENSIVE(-50),
	m_iCOOPERATION_DESIRE_WAR_STATE_STALEMATE(0),
	m_iCOOPERATION_DESIRE_WAR_STATE_DEFENSIVE(25),
	m_iCOOPERATION_DESIRE_WAR_STATE_NEARLY_DEFEATED(60),
	m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_IMMENSE(50),
	m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_POWERFUL(40),
	m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_STRONG(25),
	m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_AVERAGE(10),
	m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_POOR(0),
	m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_WEAK(0),
	m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_PATHETIC(0),
	m_iCOOPERATION_DESIRE_OPINION_ALLY(150),
	m_iCOOPERATION_DESIRE_OPINION_FRIEND(100),
	m_iCOOPERATION_DESIRE_OPINION_NEUTRAL(50),
	m_iCOOPERATION_DESIRE_OPINION_COMPETITOR(25),
	m_iCOOPERATION_DESIRE_OPINION_ENEMY(0),
	m_iCOOPERATION_DESIRE_GAME_THREAT_CRITICAL(0),
	m_iCOOPERATION_DESIRE_GAME_THREAT_SEVERE(10),
	m_iCOOPERATION_DESIRE_GAME_THREAT_MAJOR(25),
	m_iCOOPERATION_DESIRE_GAME_THREAT_MINOR(35),
	m_iCOOPERATION_DESIRE_GAME_THREAT_NONE(50),
	m_iCOOPERATION_DESIRE_THEM_US_SAME_COMPETITOR(50),
	m_iCOOPERATION_DESIRE_THEM_US_COMPETITOR_ENEMY(75),
	m_iCOOPERATION_DESIRE_THEM_US_ENEMY_COMPETITOR(75),
	m_iCOOPERATION_DESIRE_THEM_US_SAME_ENEMY(100),
	m_iEVALUATE_WAR_PLAYER_THRESHOLD(400),
	m_iEVALUATE_WAR_WILLING_TO_DECLARE_THRESHOLD(50),
	m_iEVALUATE_WAR_CONQUEST_GRAND_STRATEGY(50),
	m_iEVALUATE_WAR_NOT_PREPARED(-100),
	m_iEVALUATE_WAR_ALREADY_FIGHTING(-150),
	m_iEVALUATE_WAR_GAME_THREAT_CRITICAL(150),
	m_iEVALUATE_WAR_GAME_THREAT_SEVERE(100),
	m_iEVALUATE_WAR_GAME_THREAT_MAJOR(50),
	m_iEVALUATE_WAR_GAME_THREAT_MINOR(20),
	m_iEVALUATE_WAR_GAME_THREAT_NONE(0),
	m_iEVALUATE_WAR_SOFT_TARGET(100),
	m_iEVALUATE_WAR_FAVORABLE_TARGET(50),
	m_iEVALUATE_WAR_AVERAGE_TARGET(-25),
	m_iEVALUATE_WAR_BAD_TARGET(-100),
	m_iEVALUATE_WAR_IMPOSSIBLE_TARGET(-200),
	m_iREQUEST_PEACE_TURN_THRESHOLD(4),
	GD_INT_INIT(WAR_MAJOR_MINIMUM_TURNS, 5),
	GD_INT_INIT(WAR_MINOR_MINIMUM_TURNS, 0),
	m_iPEACE_WILLINGNESS_OFFER_PROJECTION_DESTRUCTION(100),
	m_iPEACE_WILLINGNESS_OFFER_PROJECTION_DEFEAT(60),
	m_iPEACE_WILLINGNESS_OFFER_PROJECTION_STALEMATE(20),
	m_iPEACE_WILLINGNESS_OFFER_PROJECTION_UNKNOWN(0),
	m_iPEACE_WILLINGNESS_OFFER_PROJECTION_GOOD(-20),
	m_iPEACE_WILLINGNESS_OFFER_PROJECTION_VERY_GOOD(-50),
	m_iPEACE_WILLINGNESS_OFFER_WAR_DAMAGE_NONE(0),
	m_iPEACE_WILLINGNESS_OFFER_WAR_DAMAGE_MINOR(10),
	m_iPEACE_WILLINGNESS_OFFER_WAR_DAMAGE_MAJOR(20),
	m_iPEACE_WILLINGNESS_OFFER_WAR_DAMAGE_SERIOUS(50),
	m_iPEACE_WILLINGNESS_OFFER_WAR_DAMAGE_CRIPPLED(80),
	m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_UN_SURRENDER(180),
	m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_CAPITULATION(150),
	m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_CESSION(120),
	m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_SURRENDER(95),
	m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_SUBMISSION(70),
	m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_BACKDOWN(55),
	m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_SETTLEMENT(40),
	m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_ARMISTICE(20),
	m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_DESTRUCTION(-50),
	m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_DEFEAT(-20),
	m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_STALEMATE(-10),
	m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_UNKNOWN(0),
	m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_GOOD(50),
	m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_VERY_GOOD(100),
	m_iPEACE_WILLINGNESS_ACCEPT_TARGET_IMPOSSIBLE(-50),
	m_iPEACE_WILLINGNESS_ACCEPT_TARGET_BAD(-20),
	m_iPEACE_WILLINGNESS_ACCEPT_TARGET_AVERAGE(0),
	m_iPEACE_WILLINGNESS_ACCEPT_TARGET_FAVORABLE(20),
	m_iPEACE_WILLINGNESS_ACCEPT_TARGET_SOFT(50),
	m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_UN_SURRENDER(150),
	m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_CAPITULATION(115),
	m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_CESSION(80),
	m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_SURRENDER(65),
	m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_SUBMISSION(50),
	m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_BACKDOWN(35),
	m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_SETTLEMENT(20),
	m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_ARMISTICE(10),
	m_iARMISTICE_GPT_DIVISOR(3),
	m_iARMISTICE_MIN_GOLD(100),
	m_iWAR_GOAL_THRESHOLD_CONQUEST(250),
	m_iWAR_GOAL_THRESHOLD_DAMAGE(130),
	m_iWAR_GOAL_THRESHOLD_PEACE(70),
	m_iWAR_GOAL_STATE_CALM(0),
	m_iWAR_GOAL_STATE_NEARLY_WON(300),
	m_iWAR_GOAL_STATE_OFFENSIVE(100),
	m_iWAR_GOAL_STATE_STALEMATE(-30),
	m_iWAR_GOAL_STATE_DEFENSIVE(-100),
	m_iWAR_GOAL_STATE_NEARLY_DEFEATED(-300),
	m_iWAR_GOAL_ANOTHER_PLAYER_STATE_CALM(-50),
	m_iWAR_GOAL_ANOTHER_PLAYER_STATE_NEARLY_WON(0),
	m_iWAR_GOAL_ANOTHER_PLAYER_STATE_OFFENSIVE(-20),
	m_iWAR_GOAL_ANOTHER_PLAYER_STATE_STALEMATE(-60),
	m_iWAR_GOAL_ANOTHER_PLAYER_STATE_DEFENSIVE(-100),
	m_iWAR_GOAL_ANOTHER_PLAYER_STATE_NEARLY_DEFEATED(-150),
	m_iWAR_GOAL_DAMAGE_CRIPPLED(-100),
	m_iWAR_GOAL_DAMAGE_SERIOUS(-50),
	m_iWAR_GOAL_DAMAGE_MAJOR(-25),
	m_iWAR_GOAL_DAMAGE_MINOR(-10),
	m_iWAR_GOAL_DAMAGE_NONE(0),
	m_iWAR_GOAL_GAME_THREAT_CRITICAL(200),
	m_iWAR_GOAL_GAME_THREAT_SEVERE(100),
	m_iWAR_GOAL_GAME_THREAT_MAJOR(50),
	m_iWAR_GOAL_GAME_THREAT_MINOR(20),
	m_iWAR_GOAL_GAME_THREAT_NONE(0),
	m_iWAR_GOAL_TARGET_SOFT(100),
	m_iWAR_GOAL_TARGET_FAVORABLE(50),
	m_iWAR_GOAL_TARGET_AVERAGE(0),
	m_iWAR_GOAL_TARGET_BAD(-50),
	m_iWAR_GOAL_TARGET_IMPOSSIBLE(-100),
	m_iWAR_PROJECTION_THRESHOLD_VERY_GOOD(100),
	m_iWAR_PROJECTION_THRESHOLD_GOOD(25),
	m_iWAR_PROJECTION_THRESHOLD_DESTRUCTION(-100),
	m_iWAR_PROJECTION_THRESHOLD_DEFEAT(-25),
	m_iWAR_PROJECTION_THRESHOLD_STALEMATE(0),
	m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_PATHETIC(100),
	m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_WEAK(60),
	m_iWAR_PROJECTION_RECKLESS_EXPANDER(25),
	m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_POOR(25),
	m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_AVERAGE(0),
	m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_STRONG(-25),
	m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_POWERFUL(-60),
	m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_IMMENSE(-100),
	m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_PATHETIC(50),
	m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_WEAK(30),
	m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_POOR(12),
	m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_AVERAGE(0),
	m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_STRONG(-12),
	m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_POWERFUL(-30),
	m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_IMMENSE(-50),
	m_iWAR_PROJECTION_WAR_DAMAGE_US_NONE(0),
	m_iWAR_PROJECTION_WAR_DAMAGE_US_MINOR(-10),
	m_iWAR_PROJECTION_WAR_DAMAGE_US_MAJOR(-20),
	m_iWAR_PROJECTION_WAR_DAMAGE_US_SERIOUS(-30),
	m_iWAR_PROJECTION_WAR_DAMAGE_US_CRIPPLED(-40),
	m_iWAR_PROJECTION_WAR_DAMAGE_THEM_NONE(0),
	m_iWAR_PROJECTION_WAR_DAMAGE_THEM_MINOR(5),
	m_iWAR_PROJECTION_WAR_DAMAGE_THEM_MAJOR(10),
	m_iWAR_PROJECTION_WAR_DAMAGE_THEM_SERIOUS(15),
	m_iWAR_PROJECTION_WAR_DAMAGE_THEM_CRIPPLED(20),
	m_iWAR_PROJECTION_WAR_DURATION_SCORE_CAP(20),
	m_iWAR_STATE_CALM_THRESHOLD_FOREIGN_FORCES(25),
	m_iWAR_STATE_THRESHOLD_NEARLY_WON(75),
	m_iWAR_STATE_THRESHOLD_OFFENSIVE(57),
	m_iWAR_STATE_THRESHOLD_STALEMATE(42),
	m_iWAR_STATE_THRESHOLD_DEFENSIVE(25),
	m_iWAR_DAMAGE_LEVEL_THRESHOLD_CRIPPLED(67),
	m_iWAR_DAMAGE_LEVEL_THRESHOLD_SERIOUS(50),
	m_iWAR_DAMAGE_LEVEL_THRESHOLD_MAJOR(25),
	m_iWAR_DAMAGE_LEVEL_THRESHOLD_MINOR(10),
	m_iWAR_DAMAGE_LEVEL_CITY_WEIGHT(150),
	m_iWAR_DAMAGE_LEVEL_INVOLVED_CITY_POP_MULTIPLIER(100),
	m_iWAR_DAMAGE_LEVEL_WORLD_WONDER_MULTIPLIER(200),
	m_iWAR_DAMAGE_LEVEL_UNINVOLVED_CITY_POP_MULTIPLIER(120),
	m_iMILITARY_AGGRESSIVE_POSTURE_THRESHOLD_INCREDIBLE(80),
	m_iMILITARY_AGGRESSIVE_POSTURE_THRESHOLD_HIGH(50),
	m_iMILITARY_AGGRESSIVE_POSTURE_THRESHOLD_MEDIUM(30),
	m_iMILITARY_AGGRESSIVE_POSTURE_THRESHOLD_LOW(10),
	m_iEXPANSION_CAPITAL_DISTANCE_AGGRESSIVE_POSTURE_HIGH(3),
	m_iEXPANSION_CAPITAL_DISTANCE_AGGRESSIVE_POSTURE_MEDIUM(5),
	m_iEXPANSION_CAPITAL_DISTANCE_AGGRESSIVE_POSTURE_LOW(9),
	m_iPLOT_BUYING_POSTURE_INCREDIBLE_THRESHOLD(10),
	m_iPLOT_BUYING_POSTURE_HIGH_THRESHOLD(7),
	m_iPLOT_BUYING_POSTURE_MEDIUM_THRESHOLD(4),
	m_iPLOT_BUYING_POSTURE_LOW_THRESHOLD(2),
	m_iMILITARY_STRENGTH_BASE(30),
	m_iMILITARY_STRENGTH_RATIO_MULTIPLIER(100),
	m_iMILITARY_STRENGTH_CITY_MOD(33),
	m_iMILITARY_STRENGTH_IMMENSE_THRESHOLD(250),
	m_iMILITARY_STRENGTH_POWERFUL_THRESHOLD(165),
	m_iMILITARY_STRENGTH_STRONG_THRESHOLD(115),
	m_iMILITARY_STRENGTH_AVERAGE_THRESHOLD(85),
	m_iMILITARY_STRENGTH_POOR_THRESHOLD(60),
	m_iMILITARY_STRENGTH_WEAK_THRESHOLD(40),
	m_iECONOMIC_STRENGTH_RATIO_MULTIPLIER(100),
	m_iECONOMIC_STRENGTH_IMMENSE_THRESHOLD(250),
	m_iECONOMIC_STRENGTH_POWERFUL_THRESHOLD(153),
	m_iECONOMIC_STRENGTH_STRONG_THRESHOLD(120),
	m_iECONOMIC_STRENGTH_AVERAGE_THRESHOLD(83),
	m_iECONOMIC_STRENGTH_POOR_THRESHOLD(65),
	m_iECONOMIC_STRENGTH_WEAK_THRESHOLD(40),
	m_iTARGET_IMPOSSIBLE_THRESHOLD(200),
	m_iTARGET_BAD_THRESHOLD(125),
	m_iTARGET_AVERAGE_THRESHOLD(80),
	m_iTARGET_FAVORABLE_THRESHOLD(50),
	m_iTARGET_INCREASE_WAR_TURNS(50),
	m_iTARGET_MILITARY_STRENGTH_IMMENSE(250),
	m_iTARGET_MILITARY_STRENGTH_POWERFUL(165),
	m_iTARGET_MILITARY_STRENGTH_STRONG(115),
	m_iTARGET_MILITARY_STRENGTH_AVERAGE(85),
	m_iTARGET_MILITARY_STRENGTH_POOR(60),
	m_iTARGET_MILITARY_STRENGTH_WEAK(40),
	m_iTARGET_MILITARY_STRENGTH_PATHETIC(0),
	m_iTARGET_ALREADY_WAR_EACH_PLAYER(30),
	m_iTARGET_NEIGHBORS(-10),
	m_iTARGET_CLOSE(0),
	m_iTARGET_FAR(30),
	m_iTARGET_DISTANT(80),
	m_iTARGET_MINOR_BACKUP_PATHETIC(0),
	m_iTARGET_MINOR_BACKUP_WEAK(0),
	m_iTARGET_MINOR_BACKUP_POOR(5),
	m_iTARGET_MINOR_BACKUP_AVERAGE(15),
	m_iTARGET_MINOR_BACKUP_STRONG(25),
	m_iTARGET_MINOR_BACKUP_POWERFUL(35),
	m_iTARGET_MINOR_BACKUP_IMMENSE(50),
	m_iTARGET_MINOR_BACKUP_DISTANT(100),
	m_iTARGET_MINOR_BACKUP_FAR(115),
	m_iTARGET_MINOR_BACKUP_CLOSE(150),
	m_iTARGET_MINOR_BACKUP_NEIGHBORS(200),
	m_iTARGET_MAJOR_BACKUP_PATHETIC(0),
	m_iTARGET_MAJOR_BACKUP_WEAK(0),
	m_iTARGET_MAJOR_BACKUP_POOR(5),
	m_iTARGET_MAJOR_BACKUP_AVERAGE(15),
	m_iTARGET_MAJOR_BACKUP_STRONG(25),
	m_iTARGET_MAJOR_BACKUP_POWERFUL(35),
	m_iTARGET_MAJOR_BACKUP_IMMENSE(50),
	m_iTARGET_MAJOR_BACKUP_DISTANT(100),
	m_iTARGET_MAJOR_BACKUP_FAR(115),
	m_iTARGET_MAJOR_BACKUP_CLOSE(150),
	m_iTARGET_MAJOR_BACKUP_NEIGHBORS(200),
	m_iGAME_THREAT_CRITICAL_THRESHOLD(150),
	m_iGAME_THREAT_SEVERE_THRESHOLD(100),
	m_iGAME_THREAT_MAJOR_THRESHOLD(50),
	m_iGAME_THREAT_MINOR_THRESHOLD(10),
	m_iGAME_THREAT_AT_WAR_STALEMATE(10),
	m_iGAME_THREAT_AT_WAR_DEFENSIVE(40),
	m_iGAME_THREAT_AT_WAR_NEARLY_DEFEATED(100),
	m_iGAME_THREAT_AT_WAR_MILITARY_STRENGTH_IMMENSE(80),
	m_iGAME_THREAT_AT_WAR_MILITARY_STRENGTH_POWERFUL(50),
	m_iGAME_THREAT_AT_WAR_MILITARY_STRENGTH_STRONG(30),
	m_iGAME_THREAT_AT_WAR_MILITARY_STRENGTH_AVERAGE(10),
	m_iGAME_THREAT_GUESS_AT_WAR(50),
	m_iGAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_IMMENSE(100),
	m_iGAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_POWERFUL(60),
	m_iGAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_STRONG(40),
	m_iGAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_AVERAGE(20),
	m_iMILITARY_THREAT_CRITICAL_THRESHOLD(300),
	m_iMILITARY_THREAT_SEVERE_THRESHOLD(220),
	m_iMILITARY_THREAT_MAJOR_THRESHOLD(170),
	m_iMILITARY_THREAT_MINOR_THRESHOLD(100),
	m_iMILITARY_THREAT_STRENGTH_IMMENSE(300),
	m_iMILITARY_THREAT_STRENGTH_POWERFUL(200),
	m_iMILITARY_THREAT_STRENGTH_STRONG(135),
	m_iMILITARY_THREAT_STRENGTH_AVERAGE(100),
	m_iMILITARY_THREAT_STRENGTH_POOR(65),
	m_iMILITARY_THREAT_STRENGTH_WEAK(20),
	m_iMILITARY_THREAT_STRENGTH_PATHETIC(5),
	m_iMILITARY_THREAT_WAR_STATE_CALM(0),
	m_iMILITARY_THREAT_WAR_STATE_NEARLY_WON(-100),
	m_iMILITARY_THREAT_WAR_STATE_OFFENSIVE(-40),
	m_iMILITARY_THREAT_WAR_STATE_STALEMATE(30),
	m_iMILITARY_THREAT_WAR_STATE_DEFENSIVE(80),
	m_iMILITARY_THREAT_WAR_STATE_NEARLY_DEFEATED(150),
	m_iMILITARY_THREAT_NEIGHBORS(100),
	m_iMILITARY_THREAT_CLOSE(40),
	m_iMILITARY_THREAT_FAR(-40),
	m_iMILITARY_THREAT_DISTANT(-100),
	m_iMILITARY_THREAT_PER_MINOR_ATTACKED(20),
	m_iMILITARY_THREAT_PER_MINOR_CONQUERED(10),
	m_iMILITARY_THREAT_PER_MAJOR_ATTACKED(40),
	m_iMILITARY_THREAT_PER_MAJOR_CONQUERED(20),
	m_iMILITARY_THREAT_ALREADY_WAR_EACH_PLAYER_MULTIPLIER(-30),
	m_iWARMONGER_THREAT_CRITICAL_THRESHOLD(200),
	m_iWARMONGER_THREAT_SEVERE_THRESHOLD(100),
	m_iWARMONGER_THREAT_MAJOR_THRESHOLD(50),
	m_iWARMONGER_THREAT_MINOR_THRESHOLD(20),
	m_iWARMONGER_THREAT_MINOR_ATTACKED_WEIGHT(50),
	m_iWARMONGER_THREAT_MINOR_CONQUERED_WEIGHT(100),
	m_iWARMONGER_THREAT_MAJOR_ATTACKED_WEIGHT(50),
	m_iWARMONGER_THREAT_MAJOR_CONQUERED_WEIGHT(100),
	GD_INT_INIT(WARMONGER_THREAT_CAPITAL_CITY_PERCENT, 100),
	GD_INT_INIT(WARMONGER_THREAT_KNOWS_ATTACKER_PERCENT, 100),
	GD_INT_INIT(WARMONGER_THREAT_COOP_WAR_PERCENT, 100),
	GD_INT_INIT(WARMONGER_THREAT_MODIFIER_NEGATIVE_MEDIUM, 0),
	GD_INT_INIT(WARMONGER_THREAT_MODIFIER_MEDIUM, 0),
	GD_INT_INIT(WARMONGER_THREAT_MODIFIER_LARGE, 0),
	GD_INT_INIT(WARMONGER_THREAT_MODIFIER_SMALL, 0),
	GD_INT_INIT(WARMONGER_THREAT_MODIFIER_NEGATIVE_SMALL, 0),
	GD_INT_INIT(WARMONGER_THREAT_APPROACH_DECAY_LARGE, 100),
	GD_INT_INIT(WARMONGER_THREAT_APPROACH_DECAY_SMALL, 100),
	GD_INT_INIT(WARMONGER_THREAT_APPROACH_DECAY_MEDIUM, 100),
	m_iWARMONGER_THREAT_PER_TURN_DECAY(5),
	m_iWARMONGER_THREAT_PERSONALITY_MOD(10),
	m_iWARMONGER_THREAT_CRITICAL_PERCENT_THRESHOLD(40),
	m_iWARMONGER_THREAT_SEVERE_PERCENT_THRESHOLD(25),
	m_iWARMONGER_ON_CITY_STATE_MULTIPLIER(50),
	m_iLAND_DISPUTE_FIERCE_THRESHOLD(400),
	m_iLAND_DISPUTE_STRONG_THRESHOLD(230),
	m_iLAND_DISPUTE_WEAK_THRESHOLD(100),
	m_iVICTORY_DISPUTE_FIERCE_THRESHOLD(80),
	m_iVICTORY_DISPUTE_STRONG_THRESHOLD(50),
	m_iVICTORY_DISPUTE_WEAK_THRESHOLD(30),
	m_iVICTORY_BLOCK_FIERCE_THRESHOLD(40),
	m_iVICTORY_BLOCK_STRONG_THRESHOLD(30),
	m_iVICTORY_BLOCK_WEAK_THRESHOLD(20),
	m_iTECH_BLOCK_FIERCE_THRESHOLD(30),
	m_iTECH_BLOCK_STRONG_THRESHOLD(20),
	m_iTECH_BLOCK_WEAK_THRESHOLD(10),
	m_iPOLICY_BLOCK_FIERCE_THRESHOLD(24),
	m_iPOLICY_BLOCK_STRONG_THRESHOLD(16),
	m_iPOLICY_BLOCK_WEAK_THRESHOLD(8),
	m_iWONDER_DISPUTE_FIERCE_THRESHOLD(10),
	m_iWONDER_DISPUTE_STRONG_THRESHOLD(7),
	m_iWONDER_DISPUTE_WEAK_THRESHOLD(5),
	m_iMINOR_CIV_DISPUTE_FIERCE_THRESHOLD(700),
	m_iMINOR_CIV_DISPUTE_STRONG_THRESHOLD(400),
	m_iMINOR_CIV_DISPUTE_WEAK_THRESHOLD(200),
	m_iMINOR_CIV_DISPUTE_ALLIES_WEIGHT(10),
	m_iMINOR_CIV_DISPUTE_FRIENDS_WEIGHT(5),
	m_iLAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_NONE(0),
	m_iLAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_LOW(10),
	m_iLAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_MEDIUM(32),
	m_iLAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_HIGH(50),
	m_iLAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_INCREDIBLE(60),
	m_iLAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_NONE(0),
	m_iLAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_LOW(5),
	m_iLAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_MEDIUM(12),
	m_iLAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_HIGH(20),
	m_iLAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_INCREDIBLE(30),
	m_iLAND_DISPUTE_DISTANT(0),
	m_iLAND_DISPUTE_FAR(10),
	m_iLAND_DISPUTE_CLOSE(18),
	m_iLAND_DISPUTE_NEIGHBORS(30),
	m_iLAND_DISPUTE_CRAMPED_MULTIPLIER(0),
	m_iLAND_DISPUTE_NO_EXPANSION_STRATEGY(0),
	m_iVICTORY_DISPUTE_GRAND_STRATEGY_MATCH_POSITIVE(14),
	m_iVICTORY_DISPUTE_GRAND_STRATEGY_MATCH_LIKELY(10),
	m_iVICTORY_DISPUTE_GRAND_STRATEGY_MATCH_UNSURE(6),
	m_iVICTORY_BLOCK_GRAND_STRATEGY_DIFFERENCE_POSITIVE(20),
	m_iVICTORY_BLOCK_GRAND_STRATEGY_DIFFERENCE_LIKELY(15),
	m_iVICTORY_BLOCK_GRAND_STRATEGY_DIFFERENCE_UNSURE(5),
	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_10(200),
	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_9(180),
	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_8(160),
	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_7(130),
	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_6(110),
	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_5(90),
	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_4(80),
	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_3(55),
	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_2(30),
	m_iVICTORY_DISPUTE_OTHER_PLAYER_FIERCE_THRESHOLD(70),
	m_iVICTORY_DISPUTE_OTHER_PLAYER_STRONG_THRESHOLD(50),
	m_iVICTORY_DISPUTE_OTHER_PLAYER_WEAK_THRESHOLD(30),
	m_iVICTORY_DISPUTE_OTHER_PLAYER_GRAND_STRATEGY_MATCH_POSITIVE(7),
	m_iVICTORY_DISPUTE_OTHER_PLAYER_GRAND_STRATEGY_MATCH_LIKELY(5),
	m_iVICTORY_DISPUTE_OTHER_PLAYER_GRAND_STRATEGY_MATCH_UNSURE(3),
	m_iIC_MEMORY_TURN_EXPIRATION(50),
	m_iSTOP_SPYING_MEMORY_TURN_EXPIRATION(50),
	m_iCOOP_WAR_SOON_COUNTER(10),
	m_iCOOP_WAR_LOCKED_TURNS(20),
	m_iCOOP_WAR_LOCKED_TURNS_WAR_WEIGHT(1000),
	m_iDEMAND_TURN_LIMIT_MIN(20),
	m_iDEMAND_TURN_LIMIT_RAND(10),
	m_iDONT_SETTLE_RAND(100),
	m_iDONT_SETTLE_FLAVOR_BASE(8),
	m_iDONT_SETTLE_FLAVOR_MULTIPLIER(5),
	m_iDONT_SETTLE_FRIENDLY(30),
	m_iDONT_SETTLE_STRENGTH_PATHETIC(-30),
	m_iDONT_SETTLE_STRENGTH_WEAK(-20),
	m_iDONT_SETTLE_STRENGTH_POOR(-10),
	m_iDONT_SETTLE_STRENGTH_AVERAGE(0),
	m_iDONT_SETTLE_STRENGTH_STRONG(25),
	m_iDONT_SETTLE_STRENGTH_POWERFUL(40),
	m_iDONT_SETTLE_STRENGTH_IMMENSE(60),
	m_iDONT_SETTLE_MOD_MILITARY_POSTURE_NONE(100),
	m_iDONT_SETTLE_MOD_MILITARY_POSTURE_LOW(100),
	m_iDONT_SETTLE_MOD_MILITARY_POSTURE_MEDIUM(150),
	m_iDONT_SETTLE_MOD_MILITARY_POSTURE_HIGH(200),
	m_iDONT_SETTLE_MOD_MILITARY_POSTURE_INCREDIBLE(300),
	m_iDOF_TURN_BUFFER(20),
	m_iDOF_TURN_BUFFER_REDUCTION_PER_ERA(-5),
	m_iJUST_MET_TURN_BUFFER(10),
	m_iDOF_THRESHOLD(15),
	m_iDENUNCIATION_EXPIRATION_TIME(30),
	m_iDOF_EXPIRATION_TIME(50),
	m_iEACH_GOLD_VALUE_PERCENT(100),
	m_iEACH_GOLD_PER_TURN_VALUE_PERCENT(75),

	m_iMOVE_TROOPS_MEMORY_TURN_EXPIRATION(20),
	m_iMILITARY_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN(40),
	m_iMILITARY_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN(80),
	m_iEXPANSION_BICKER_TIMEOUT(10),
	m_iEXPANSION_PROMISE_TURNS_EFFECTIVE(50),
	m_iEXPANSION_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN(30),
	m_iEXPANSION_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN(50),
	m_iBORDER_PROMISE_TURNS_EFFECTIVE(50),
	m_iBORDER_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN(30),
	m_iBORDER_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN(50),
	m_iBULLY_CS_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN(30),
	m_iBULLY_CS_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN(50),
	m_iATTACK_CS_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN(50),
	m_iATTACK_CS_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN(80),
	m_iSPY_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN(30),
	m_iSPY_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN(50),
	m_iCONVERT_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN(40),
	m_iCONVERT_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN(60),
	m_iDIGGING_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN(40),
	m_iDIGGING_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN(60),
	m_iCOOP_WAR_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN(60),

	m_iDOF_BROKEN_TURNS_UNTIL_FORGIVEN(50),
	m_iDOF_BROKEN_TURNS_UNTIL_FORGIVEN_FRIENDS(10),
	m_iFRIEND_DENOUNCED_US_TURNS_UNTIL_FORGIVEN(75),
	m_iFRIEND_DECLARED_WAR_ON_US_TURNS_UNTIL_FORGIVEN(100),
	m_iMASTER_DECLARED_WAR_ON_US_TURNS_UNTIL_FORGIVEN(100),
	m_iDOF_BROKEN_BACKSTAB_TIMER(10),

	m_iPLUNDERED_TRADE_ROUTE_TURNS_UNTIL_FORGIVEN(25),
	m_iRETURNED_CIVILIAN_TURNS_UNTIL_FORGOTTEN(50),
	m_iBUILT_LANDMARK_TURNS_UNTIL_FORGOTTEN(50),
	m_iLIBERATED_CITY_TURNS_UNTIL_FORGOTTEN(75),
	m_iFORGAVE_FOR_SPYING_TURNS_UNTIL_FORGOTTEN(30),
	m_iSHARED_INTRIGUE_TURNS_UNTIL_FORGOTTEN(50),
	m_iROBBED_US_TURNS_UNTIL_FORGIVEN(50),
	m_iPLOTTED_AGAINST_US_TURNS_UNTIL_FORGIVEN(19),
	m_iPERFORMED_COUP_TURNS_UNTIL_FORGIVEN(50),
	m_iEXCAVATED_ARTIFACT_TURNS_UNTIL_FORGIVEN(50),
	m_iMADE_DEMAND_TURNS_UNTIL_FORGIVEN(50),
	m_iRELIGIOUS_CONVERSION_TURNS_UNTIL_FORGIVEN(50),

	m_iEXPANSION_PROMISE_BROKEN_PER_TURN_DECAY(3),
	m_iBROKEN_EXPANSION_PROMISE_PER_OPINION_WEIGHT(10),
	m_iOPINION_WEIGHT_EXPANSION_PROMISE_BROKE_MAX(30),
	m_iEXPANSION_PROMISE_IGNORED_PER_TURN_DECAY(3),
	m_iIGNORED_EXPANSION_PROMISE_PER_OPINION_WEIGHT(10),
	m_iOPINION_WEIGHT_EXPANSION_PROMISE_IGNORED_MAX(15),

	m_iBORDER_PROMISE_BROKEN_PER_TURN_DECAY(3),
	m_iBROKEN_BORDER_PROMISE_PER_OPINION_WEIGHT(10),
	m_iOPINION_WEIGHT_BORDER_PROMISE_BROKE_MAX(30),
	m_iBORDER_PROMISE_IGNORED_PER_TURN_DECAY(3),
	m_iIGNORED_BORDER_PROMISE_PER_OPINION_WEIGHT(10),
	m_iOPINION_WEIGHT_BORDER_PROMISE_IGNORED_MAX(15),
	m_iDECLARED_WAR_ON_FRIEND_PER_TURN_DECAY(100),
	m_iDECLARED_WAR_ON_FRIEND_PER_OPINION_WEIGHT(1),

	m_iDEAL_VALUE_PER_TURN_DECAY(3),
	m_iDEAL_VALUE_PER_OPINION_WEIGHT(10),
	m_iCOMMON_FOE_VALUE_PER_TURN_DECAY(25),
	m_iCOMMON_FOE_VALUE_PER_OPINION_WEIGHT(50),
	m_iASSIST_VALUE_PER_TURN_DECAY(3),
	m_iASSIST_VALUE_PER_OPINION_WEIGHT(5),
	m_iWANT_RESEARCH_AGREEMENT_RAND(8),
	m_iDEMAND_RAND(100),
	m_iCAN_WORK_WATER_FROM_GAME_START(1),
	m_iNAVAL_PLOT_BLOCKADE_RANGE(2),
	m_iEVENT_MESSAGE_TIME(10),
	m_iSTART_YEAR(-4000),
	m_iWEEKS_PER_MONTHS(4),
	m_iHIDDEN_START_TURN_OFFSET(0),
	m_iRECON_VISIBILITY_RANGE(6),
	m_iPLOT_VISIBILITY_RANGE(1),
	m_iUNIT_VISIBILITY_RANGE(1),
	m_iAIR_UNIT_REBASE_RANGE_MULTIPLIER(200),
	m_iMOUNTAIN_SEE_FROM_CHANGE(2),
	m_iMOUNTAIN_SEE_THROUGH_CHANGE(2),
	m_iHILLS_SEE_FROM_CHANGE(1),
	m_iHILLS_SEE_THROUGH_CHANGE(1),
	m_iSEAWATER_SEE_FROM_CHANGE(1),
	m_iSEAWATER_SEE_THROUGH_CHANGE(1),
	m_iMAX_YIELD_STACK(5),
	m_iMOVE_DENOMINATOR(60),
	m_iSTARTING_DISTANCE_PERCENT(12),
	m_iMIN_CIV_STARTING_DISTANCE(10),
	m_iMIN_CITY_RANGE(2),
	GD_INT_INIT(CITY_STARTING_RINGS, 1),
	m_iOWNERSHIP_SCORE_DURATION_THRESHOLD(20),
	m_iNUM_POLICY_BRANCHES_ALLOWED(2),
	m_iVICTORY_POINTS_NEEDED_TO_WIN(20),
	m_iNUM_VICTORY_POINT_AWARDS(5),
	m_iNUM_OR_TECH_PREREQS(3),
	m_iNUM_AND_TECH_PREREQS(4),
	m_iNUM_UNIT_AND_TECH_PREREQS(3),
	m_iNUM_BUILDING_AND_TECH_PREREQS(3),
	m_iNUM_BUILDING_RESOURCE_PREREQS(5),
	m_iBASE_RESEARCH_RATE(1),
	m_iMAX_WORLD_WONDERS_PER_CITY(-1),
	m_iMAX_TEAM_WONDERS_PER_CITY(-1),
	m_iMAX_NATIONAL_WONDERS_PER_CITY(-1),
	m_iMAX_NATIONAL_WONDERS_PER_CITY_FOR_OCC(-1),
	m_iMAX_BUILDINGS_PER_CITY(-1),
	m_iINITIAL_CITY_POPULATION(1),
	m_iBASE_CITY_AIR_STACKING(6),
	m_iCITY_CAPTURE_POPULATION_PERCENT(50),
	m_iBASE_CITY_GROWTH_THRESHOLD(15),
	m_iFOOD_CONSUMPTION_PER_POPULATION(2),
	m_iHAPPINESS_PER_CITY_WITH_STATE_RELIGION(0),
	m_iHAPPINESS_PER_NATURAL_WONDER(1),
	m_iHAPPINESS_PER_EXTRA_LUXURY(0),
	m_iUNHAPPINESS_PER_POPULATION(1),
	m_fUNHAPPINESS_PER_POPULATION_FLOAT(0.f),
	m_fUNHAPPINESS_PER_OCCUPIED_POPULATION(1.25f),
	m_iUNHAPPINESS_PER_CITY(2),
	m_iUNHAPPINESS_PER_CAPTURED_CITY(3),
	m_iUNHAPPY_GROWTH_PENALTY(-75),
	m_iVERY_UNHAPPY_GROWTH_PENALTY(-100),
	m_iUNHAPPY_PRODUCTION_PENALTY(-25),
	m_iVERY_UNHAPPY_PRODUCTION_PENALTY(-50),
	m_iBALANCE_WAR_WEARINESS_POPULATION_CAP(25),
	m_iVERY_UNHAPPY_CANT_TRAIN_SETTLERS(0),
	m_iUNHAPPY_THRESHOLD(0),
	m_iVERY_UNHAPPY_THRESHOLD(-10),
	m_iSUPER_UNHAPPY_THRESHOLD(-20),
	m_iUPRISING_COUNTER_MIN(5),
	m_iUPRISING_COUNTER_POSSIBLE(5),
	m_iUPRISING_NUM_BASE(100),
	m_iUPRISING_NUM_CITY_COUNT(20),
	m_iREVOLT_COUNTER_MIN(5),
	m_iVERY_UNHAPPY_COMBAT_PENALTY_PER_UNHAPPY(-2),
	m_iVERY_UNHAPPY_MAX_COMBAT_PENALTY(-40),
	m_iSTRATEGIC_RESOURCE_EXHAUSTED_PENALTY(-50),
	m_iVERY_UNHAPPY_PRODUCTION_PENALTY_PER_UNHAPPY(-2),
	m_iVERY_UNHAPPY_MAX_PRODUCTION_PENALTY(-40),
	m_iVERY_UNHAPPY_GOLD_PENALTY_PER_UNHAPPY(-2),
	m_iVERY_UNHAPPY_MAX_GOLD_PENALTY(-40),
	m_iWLTKD_GROWTH_MULTIPLIER(25),
	m_iINDUSTRIAL_ROUTE_PRODUCTION_MOD(50),
	m_iRESOURCE_DEMAND_COUNTDOWN_BASE(15),
	m_iRESOURCE_DEMAND_COUNTDOWN_CAPITAL_ADD(25),
	m_iRESOURCE_DEMAND_COUNTDOWN_RAND(10),
	m_iNEW_HURRY_MODIFIER(50),
	m_iGREAT_GENERAL_RANGE(2),
	m_iGREAT_GENERAL_STRENGTH_MOD(25),
	m_iBONUS_PER_ADJACENT_FRIEND(15),
	m_iPOLICY_ATTACK_BONUS_MOD(20),
	m_iCONSCRIPT_MIN_CITY_POPULATION(5),
	m_iCONSCRIPT_POPULATION_PER_COST(60),
	m_iMIN_TIMER_UNIT_DOUBLE_MOVES(32),
	m_iCOMBAT_DAMAGE(20),
	m_iNONCOMBAT_UNIT_RANGED_DAMAGE(4),
	m_iNAVAL_COMBAT_DEFENDER_STRENGTH_MULTIPLIER(100),
	m_iLAKE_PLOT_RAND(160),
	m_iPLOTS_PER_RIVER_EDGE(12),
	m_iRIVER_SOURCE_MIN_RIVER_RANGE(4),
	m_iRIVER_SOURCE_MIN_SEAWATER_RANGE(2),
	m_iLAKE_MAX_AREA_SIZE(9),
	m_iINITIAL_GOLD_PER_UNIT_TIMES_100(50),
	m_iINITIAL_FREE_OUTSIDE_UNITS(3),
	m_iINITIAL_OUTSIDE_UNIT_GOLD_PERCENT(0),
	m_iUNIT_MAINTENANCE_GAME_MULTIPLIER(5),
	m_iUNIT_MAINTENANCE_GAME_EXPONENT_DIVISOR(6),
	m_iFREE_UNIT_HAPPINESS(0),
	m_iTRADE_ROUTE_BASE_GOLD(1),
#if defined(MOD_TRADE_ROUTE_SCALING)
	GD_INT_INIT(TRADE_ROUTE_BASE_TARGET_TURNS, 30),
	GD_INT_INIT(TRADE_ROUTE_BASE_LAND_DISTANCE, 20),
	GD_INT_INIT(TRADE_ROUTE_BASE_LAND_MODIFIER, 0),
	GD_INT_INIT(TRADE_ROUTE_BASE_SEA_DISTANCE, 20),
	GD_INT_INIT(TRADE_ROUTE_BASE_SEA_MODIFIER, 100),
	GD_INT_INIT(TRADE_ROUTE_BASE_FOOD_VALUE, 300),
	GD_INT_INIT(TRADE_ROUTE_BASE_PRODUCTION_VALUE, 300),
	GD_INT_INIT(TRADE_ROUTE_SCIENCE_DIVISOR_TIMES100, 200),
	GD_INT_INIT(TRADE_ROUTE_CULTURE_DIVISOR_TIMES100, 200),
	GD_INT_INIT(TRADE_ROUTE_DIFFERENT_RESOURCE_VALUE, 50),
	GD_INT_INIT(TRADE_ROUTE_RIVER_CITY_MODIFIER, 15),
	GD_INT_INIT(TRADE_ROUTE_BASE_PLUNDER_GOLD, 100),
	GD_INT_INIT(TRADE_ROUTE_PLUNDER_TURNS_COUNTER, 30),
	GD_INT_INIT(TRADE_ROUTE_CS_ALLY_SCIENCE_DELTA, 3),
	GD_INT_INIT(TRADE_ROUTE_CS_FRIEND_SCIENCE_DELTA, 2),
	GD_INT_INIT(TRADE_ROUTE_CS_ALLY_CULTURE_DELTA, 2),
	GD_INT_INIT(TRADE_ROUTE_CS_FRIEND_CULTURE_DELTA, 1),
	GD_INT_INIT(TRADE_ROUTE_CS_ALLY_GOLD, 3),
	GD_INT_INIT(TRADE_ROUTE_CS_FRIEND_GOLD, 2),
#endif
#if defined(MOD_CIV6_ROADS)
	// Not used!
	GD_INT_INIT(TRADE_ROUTE_CREATE_RAILROADS_ERA, 5),
	GD_INT_INIT(TRADE_ROUTE_CREATE_RAILROADS_TECH_ID, 0),
#endif
#if defined(MOD_CITY_STATE_SCALE)
	GD_INT_INIT(CITY_STATE_SCALE_PER_CITY_MOD, 0),
#endif
	m_iTRADE_ROUTE_CAPITAL_POP_GOLD_MULTIPLIER(0),
	m_iTRADE_ROUTE_CITY_POP_GOLD_MULTIPLIER(125),
	m_iDEFICIT_UNIT_DISBANDING_THRESHOLD(-5),
	m_iGOLDEN_AGE_BASE_THRESHOLD_HAPPINESS(500),
	m_fGOLDEN_AGE_THRESHOLD_CITY_MULTIPLIER(0.02f),
	m_iGOLDEN_AGE_EACH_GA_ADDITIONAL_HAPPINESS(500),
	m_iGOLDEN_AGE_VISIBLE_THRESHOLD_DIVISOR(5),
	m_iBASE_GOLDEN_AGE_UNITS(1),
	m_iGOLDEN_AGE_UNITS_MULTIPLIER(1),
	m_iGOLDEN_AGE_LENGTH(10),
	m_iGOLDEN_AGE_GREAT_PEOPLE_MODIFIER(100), // undocumented?
	m_iMIN_UNIT_GOLDEN_AGE_TURNS(3),
	m_iGOLDEN_AGE_CULTURE_MODIFIER(50),
	m_iHILLS_EXTRA_MOVEMENT(1),
	m_iRIVER_EXTRA_MOVEMENT(10),
	m_iFEATURE_GROWTH_MODIFIER(25),
	m_iROUTE_FEATURE_GROWTH_MODIFIER(-50),
	m_iEXTRA_YIELD(1),
	m_iFORTIFY_MODIFIER_PER_TURN(25),
	m_iMAX_FORTIFY_TURNS(2),
	m_iNUKE_FALLOUT_PROB(50),
	m_iNUKE_UNIT_DAMAGE_BASE(3),
	m_iNUKE_UNIT_DAMAGE_RAND_1(4),
	m_iNUKE_UNIT_DAMAGE_RAND_2(4),
	m_iNUKE_NON_COMBAT_DEATH_THRESHOLD(6),
	m_iNUKE_LEVEL1_POPULATION_DEATH_BASE(30),
	m_iNUKE_LEVEL1_POPULATION_DEATH_RAND_1(20),
	m_iNUKE_LEVEL1_POPULATION_DEATH_RAND_2(20),
	m_iNUKE_LEVEL2_POPULATION_DEATH_BASE(60),
	m_iNUKE_LEVEL2_POPULATION_DEATH_RAND_1(10),
	m_iNUKE_LEVEL2_POPULATION_DEATH_RAND_2(10),
	m_iNUKE_LEVEL2_ELIM_POPULATION_THRESHOLD(5),
	m_iNUKE_CITY_HIT_POINT_DAMAGE(50),
	m_iNUKE_BLAST_RADIUS(2),
	m_iTECH_COST_EXTRA_TEAM_MEMBER_MODIFIER(100),
	m_iTECH_COST_TOTAL_KNOWN_TEAM_MODIFIER(30),
	m_iTECH_COST_KNOWN_PREREQ_MODIFIER(20),
	m_iPEACE_TREATY_LENGTH(10),
	m_iCOOP_WAR_LOCKED_LENGTH(15),
	m_iBASE_FEATURE_PRODUCTION_PERCENT(67),
	m_iFEATURE_PRODUCTION_PERCENT_MULTIPLIER(0),
	m_iDIFFERENT_TEAM_FEATURE_PRODUCTION_PERCENT(67),
	m_iDEFAULT_WAR_VALUE_FOR_UNIT(100),
	m_iPILLAGED_TILE_BASE_WAR_VALUE(40),
	m_iSTOLEN_TILE_BASE_WAR_VALUE(80),
	m_iUNIT_PRODUCTION_PERCENT(100),
	m_iMAX_UNIT_SUPPLY_PRODMOD(70),
	m_iBUILDING_PRODUCTION_PERCENT(100),
	m_iPROJECT_PRODUCTION_PERCENT(100),
	m_iMAXED_UNIT_GOLD_PERCENT(100),
	m_iMAXED_BUILDING_GOLD_PERCENT(100),
	m_iMAXED_PROJECT_GOLD_PERCENT(300),
	m_iMAX_CITY_DEFENSE_DAMAGE(100),
	m_iCIRCUMNAVIGATE_FREE_MOVES(0),
	m_iBASE_CAPTURE_GOLD(20),
	m_iCAPTURE_GOLD_PER_POPULATION(10),
	m_iCAPTURE_GOLD_RAND1(20),
	m_iCAPTURE_GOLD_RAND2(20),
	m_iCAPTURE_GOLD_MAX_TURNS(50),
	m_iBARBARIAN_CITY_ATTACK_MODIFIER(-25),
	m_iBUILDING_PRODUCTION_DECAY_TIME(50),
	m_iBUILDING_PRODUCTION_DECAY_PERCENT(99),
	m_iUNIT_PRODUCTION_DECAY_TIME(10),
	m_iUNIT_PRODUCTION_DECAY_PERCENT(98),
	m_iBASE_UNIT_UPGRADE_COST(10),
	m_iUNIT_UPGRADE_COST_PER_PRODUCTION(2),
	m_iUNIT_UPGRADE_COST_VISIBLE_DIVISOR(5),
	m_iUNIT_UPGRADE_COST_DISCOUNT_MAX(-75),
	m_iWAR_SUCCESS_UNIT_CAPTURING(1),
	m_iWAR_SUCCESS_CITY_CAPTURING(10),
	m_iDIPLO_VOTE_SECRETARY_GENERAL_INTERVAL(4),
	m_iTEAM_VOTE_MIN_CANDIDATES(2),
	m_iRESEARCH_AGREEMENT_TIMER(20),
	m_iRESEARCH_AGREEMENT_BOOST_DIVISOR(3),
	m_iSCORE_POPULATION_FACTOR(5000),
	m_iSCORE_LAND_FACTOR(2000),
	m_iSCORE_WONDER_FACTOR(1000),
	m_iSCORE_TECH_FACTOR(2000),
	m_iSCORE_FREE_PERCENT(0),
	m_iSCORE_VICTORY_PERCENT(0),
	m_iSCORE_HANDICAP_PERCENT_OFFSET(-60),
	m_iSCORE_HANDICAP_PERCENT_PER(20),
	m_iMINIMAP_RENDER_SIZE(512),
	m_iMAX_INTERCEPTION_PROBABILITY(100),
	m_iMAX_EVASION_PROBABILITY(90),
	m_iPLAYER_ALWAYS_RAZES_CITIES(0),
	m_iMIN_WATER_SIZE_FOR_OCEAN(10),
	m_iCITY_SCREEN_CLICK_WILL_EXIT(0),
	m_iWATER_POTENTIAL_CITY_WORK_FOR_AREA(0),
	m_iLAND_UNITS_CAN_ATTACK_WATER_CITIES(0),
	m_iCITY_MAX_NUM_BUILDINGS(1),
	m_iCITY_MIN_SIZE_FOR_SETTLERS(2),
	m_iADVANCED_START_ALLOW_UNITS_OUTSIDE_CITIES(0),
	m_iADVANCED_START_MAX_UNITS_PER_CITY(2),
	m_iADVANCED_START_CITY_COST(67),
	m_iADVANCED_START_CITY_COST_INCREASE(0),
	m_iADVANCED_START_POPULATION_COST(150),
	m_iADVANCED_START_POPULATION_COST_INCREASE(0),
	m_iADVANCED_START_VISIBILITY_COST(2),
	m_iADVANCED_START_VISIBILITY_COST_INCREASE(3),
	m_iADVANCED_START_CITY_PLACEMENT_MAX_RANGE(6),
	m_iNEW_CITY_BUILDING_VALUE_MODIFIER(-60),
	m_iPATH_DAMAGE_WEIGHT(0),
	m_iPUPPET_SCIENCE_MODIFIER(-25),
	m_iPUPPET_CULTURE_MODIFIER(-25),
	m_iPUPPET_GOLD_MODIFIER(0),
	m_iPUPPET_FAITH_MODIFIER(0),
	m_iPUPPET_GROWTH_MODIFIER(0),
	m_iPUPPET_PRODUCTION_MODIFIER(0),
	m_iBLOCKADE_GOLD_PENALTY(0),
#if defined(MOD_API_UNIFIED_YIELDS_TOURISM)
	m_iPUPPET_TOURISM_MODIFIER(-25),
#endif
#if defined(MOD_API_UNIFIED_YIELDS_GOLDEN_AGE)
	m_iPUPPET_GOLDEN_AGE_MODIFIER(-50),
#endif
	m_iBASE_POLICY_COST(25),
	m_iPOLICY_COST_INCREASE_TO_BE_EXPONENTED(6),
	m_iPOLICY_COST_VISIBLE_DIVISOR(5),
	m_iSWITCH_POLICY_BRANCHES_ANARCHY_TURNS(1),
	m_iSWITCH_POLICY_BRANCHES_TENETS_LOST(2),
	m_iPOLICY_COST_DISCOUNT_MAX(-75),
	m_iGOLD_PURCHASE_GOLD_PER_PRODUCTION(4),
	m_iGOLD_PURCHASE_VISIBLE_DIVISOR(10),
	m_iPROJECT_PURCHASING_DISABLED(1),
	m_iINFLUENCE_MOUNTAIN_COST(3),
	m_iINFLUENCE_HILL_COST(2),
	m_iINFLUENCE_RIVER_COST(1),
	m_iUSE_FIRST_RING_INFLUENCE_TERRAIN_COST(0),
	m_iNUM_RESOURCE_QUANTITY_TYPES(4),
	m_iSPECIALISTS_DIVERT_POPULATION_ENABLED(0),
	m_iSCIENCE_PER_POPULATION(1),
	m_iRESEARCH_AGREEMENT_MOD(0),
	m_iBARBARIAN_CAMP_FIRST_TURN_PERCENT_OF_TARGET_TO_ADD(33),
	m_iBARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING(2),
	m_iBARBARIAN_CAMP_MINIMUM_DISTANCE_CAPITAL(4),
	m_iBARBARIAN_CAMP_MINIMUM_DISTANCE_ANOTHER_CAMP(7),
	m_iBARBARIAN_CAMP_COASTAL_SPAWN_ROLL(6),
	m_iBARBARIAN_EXTRA_RAGING_UNIT_SPAWN_CHANCE(10),
	m_iBARBARIAN_NAVAL_UNIT_START_TURN_SPAWN(30),
	m_iMAX_BARBARIANS_FROM_CAMP_NEARBY(2),
	m_iMAX_BARBARIANS_FROM_CAMP_NEARBY_RANGE(4),
	m_iGOLD_FROM_BARBARIAN_CONVERSION(25),
	m_iBARBARIAN_CITY_GOLD_RANSOM(200),
	m_iBARBARIAN_UNIT_GOLD_RANSOM(100),
	m_iEMBARKED_UNIT_MOVEMENT(2),
	m_iEMBARKED_VISIBILITY_RANGE(0),
	m_iDEFAULT_MAX_NUM_BUILDERS(-1),
	m_iBARBARIAN_TECH_PERCENT(75),
	m_iCITY_RESOURCE_WLTKD_TURNS(20),
	m_iMAX_SPECIALISTS_FROM_BUILDING(4),
	m_iGREAT_PERSON_THRESHOLD_BASE(100),
	m_iGREAT_PERSON_THRESHOLD_INCREASE(100),
	m_iCULTURE_BOMB_COOLDOWN(10),
	m_iCULTURE_BOMB_MINOR_FRIENDSHIP_CHANGE(-50),
	m_iLANDMARK_MINOR_FRIENDSHIP_CHANGE(50),
	m_iUNIT_AUTO_EXPLORE_DISABLED(0),
	m_iUNIT_WORKER_AUTOMATION_DISABLED(0),
	m_iUNIT_DELETE_DISABLED(0),
	m_iMIN_START_AREA_TILES(4),
	m_iMIN_DISTANCE_OTHER_AREA_PERCENT(75),
	m_iMINOR_CIV_FOOD_REQUIREMENT(2),
	m_iMAJOR_CIV_FOOD_REQUIREMENT(3),
	m_iMIN_START_FOUND_VALUE_AS_PERCENT_OF_BEST(50),
	m_iSTART_AREA_FOOD_MULTIPLIER(6),
	m_iSTART_AREA_HAPPINESS_MULTIPLIER(12),
	m_iSTART_AREA_PRODUCTION_MULTIPLIER(8),
	m_iSTART_AREA_GOLD_MULTIPLIER(2),
	m_iSTART_AREA_SCIENCE_MULTIPLIER(1),
	m_iSTART_AREA_FAITH_MULTIPLIER(1),
	m_iSTART_AREA_RESOURCE_MULTIPLIER(1),
	m_iSTART_AREA_STRATEGIC_MULTIPLIER(1),
	m_iSTART_AREA_BUILD_ON_COAST_PERCENT(20),
	m_iSETTLER_FOOD_MULTIPLIER(15),
	m_iSETTLER_HAPPINESS_MULTIPLIER(6),
	m_iSETTLER_PRODUCTION_MULTIPLIER(3),
	m_iSETTLER_GOLD_MULTIPLIER(2),
	m_iSETTLER_SCIENCE_MULTIPLIER(1),
	m_iSETTLER_FAITH_MULTIPLIER(1),
	m_iSETTLER_RESOURCE_MULTIPLIER(1),
	m_iSETTLER_STRATEGIC_MULTIPLIER(1),
	m_iSETTLER_BUILD_ON_COAST_PERCENT(10),
	m_iCITY_RING_1_MULTIPLIER(12),
	m_iCITY_RING_2_MULTIPLIER(8),
	m_iCITY_RING_3_MULTIPLIER(6),
	m_iCITY_RING_4_MULTIPLIER(1),
	m_iCITY_RING_5_MULTIPLIER(1),
	m_iSETTLER_EVALUATION_DISTANCE(40),
	m_iSETTLER_DISTANCE_DROPOFF_MODIFIER(85),
	m_iBUILD_ON_RESOURCE_PERCENT(-50),
	m_iBUILD_ON_RIVER_PERCENT(15),
	m_iCHOKEPOINT_STRATEGIC_VALUE(5),
	m_iHILL_STRATEGIC_VALUE(3),
	m_iALREADY_OWNED_STRATEGIC_VALUE(-1000),
	m_iMINOR_CIV_CONTACT_GOLD_FIRST(30),
	m_iMINOR_CIV_CONTACT_GOLD_OTHER(15),
	GD_INT_INIT(COMBAT_AI_OFFENSE_DAMAGEWEIGHT, 100),
	GD_INT_INIT(COMBAT_AI_OFFENSE_DANGERWEIGHT, 50),
	GD_INT_INIT(COMBAT_AI_OFFENSE_SCORE_BIAS,	20),
	GD_INT_INIT(COMBAT_AI_DEFENSE_DANGERWEIGHT,	20),
	GD_INT_INIT(COMBAT_AI_DEFENSE_SCORE_BIAS,	200),

	GD_INT_INIT(DIPLOAI_DISABLE_VICTORY_COMPETITION, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_ENDGAME_AGGRESSION, 0),
	GD_INT_INIT(DIPLOAI_ENABLE_NUCLEAR_GANDHI, 1),
	GD_INT_INIT(DIPLOAI_DISABLE_WAR_BRIBES, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_CITY_TRADING, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_INSULT_MESSAGES, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_COMPLIMENT_MESSAGES, 0),
	GD_INT_INIT(DIPLOAI_SHOW_ALL_OPINION_MODIFIERS, 0),
	GD_INT_INIT(DIPLOAI_SHOW_ALL_OPINION_VALUES, 0),
	GD_INT_INIT(DIPLOAI_SHOW_BASE_HUMAN_OPINION, 0),
	GD_INT_INIT(DIPLOAI_NO_FLAVOR_RANDOMIZATION, 0),
	GD_INT_INIT(DIPLOAI_ENABLE_LUMP_GOLD_TRADES, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_FRIENDSHIP_REQUESTS, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_GIFT_OFFERS, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_COOP_WAR_REQUESTS, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_HELP_REQUESTS, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_TRADE_OFFERS, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_PEACE_OFFERS, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_ALL_STATEMENTS, 0),
	GD_INT_INIT(DIPLOAI_PASSIVE_MODE, 0),
	GD_INT_INIT(DIPLOAI_AGGRESSIVE_MODE, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_DOMINATION_ONLY_AGGRESSION, 0),
	GD_INT_INIT(DIPLOAI_ENABLE_DEBUG_MODE, 0),
	
#if defined(MOD_GLOBAL_CS_GIFTS)
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_BONUS_FRIENDSHIP, 12),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_BONUS_CULTURE, 8),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_BONUS_FAITH, 8),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_BONUS_GOLD, 30),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_BONUS_FOOD, 8),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_BONUS_UNIT, 30),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_XP_PER_ERA, 5),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_XP_RANDOM, 10),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_PLAYER_MULTIPLIER, 2),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_PLAYER_DIVISOR, 1),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_SUBSEQUENT_TEAM_MULTIPLIER, 1),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_SUBSEQUENT_TEAM_DIVISOR, 2),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_FRIENDLY_BONUS_MULTIPLIER, 3),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_FRIENDLY_BONUS_DIVISOR, 2),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_FRIENDLY_UNIT_MULTIPLIER, 2),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_FRIENDLY_UNIT_DIVISOR, 1),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_HOSTILE_BONUS_MULTIPLIER, 1),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_HOSTILE_BONUS_DIVISOR, 2),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_HOSTILE_UNIT_MULTIPLIER, 0),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_HOSTILE_UNIT_DIVISOR, 1),
#endif
	m_iMINOR_CIV_GROWTH_PERCENT(150),
	m_iMINOR_CIV_PRODUCTION_PERCENT(150),
	m_iMINOR_CIV_GOLD_PERCENT(200),
	m_iMINOR_CIV_TECH_PERCENT(40),
	m_iMINOR_POLICY_RESOURCE_MULTIPLIER(200),
	m_iMINOR_POLICY_RESOURCE_HAPPINESS_MULTIPLIER(150),
	m_iMINOR_GOLD_GIFT_LARGE(1000),
	m_iMINOR_GOLD_GIFT_MEDIUM(500),
	m_iMINOR_GOLD_GIFT_SMALL(250),
	m_iMINOR_CIV_TILE_IMPROVEMENT_GIFT_COST(200),
	m_iMINOR_CIV_BUYOUT_COST(500),
	m_iMINOR_CIV_BUYOUT_TURNS(5),
	m_iMINOR_FRIENDSHIP_FROM_TRADE_MISSION(30),
	m_iMINOR_FRIENDSHIP_ANCHOR_DEFAULT(0),
	m_iMINOR_FRIENDSHIP_ANCHOR_MOD_PROTECTED(10),
	m_iMINOR_FRIENDSHIP_ANCHOR_MOD_WARY_OF(-20),
	m_iMINOR_UNIT_GIFT_TRAVEL_TURNS(3),
	m_iPLOT_UNIT_LIMIT(1),
#if defined(MOD_GLOBAL_STACKING_RULES)
	GD_INT_INIT(CITY_UNIT_LIMIT, 1),
#endif
	m_iZONE_OF_CONTROL_ENABLED(1),
	m_iFIRE_SUPPORT_DISABLED(1),
	m_iMAX_HIT_POINTS(100),
	m_iMAX_CITY_HIT_POINTS(200),
	m_iCITY_HIT_POINTS_HEALED_PER_TURN(1),
	m_iFLAT_LAND_EXTRA_DEFENSE(-33),
	m_iHILLS_EXTRA_DEFENSE(25),
	m_iRIVER_ATTACK_MODIFIER(-20),
	m_iAMPHIB_ATTACK_MODIFIER(-50),
	m_iENEMY_HEAL_RATE(10),
	m_iNEUTRAL_HEAL_RATE(10),
	m_iFRIENDLY_HEAL_RATE(15),
	m_iINSTA_HEAL_RATE(50),
	m_iCITY_HEAL_RATE(15),
	m_iATTACK_SAME_STRENGTH_MIN_DAMAGE(400),
	m_iRANGE_ATTACK_RANGED_DEFENDER_MOD(125),
	m_iATTACK_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE(400),
	m_iRANGE_ATTACK_SAME_STRENGTH_MIN_DAMAGE(250),
	m_iRANGE_ATTACK_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE(300),
	m_iAIR_STRIKE_SAME_STRENGTH_MIN_DEFENSE_DAMAGE(200),
	m_iAIR_STRIKE_SAME_STRENGTH_POSSIBLE_EXTRA_DEFENSE_DAMAGE(200),
	m_iINTERCEPTION_SAME_STRENGTH_MIN_DAMAGE(400),
	m_iINTERCEPTION_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE(300),
	m_iAIR_SWEEP_INTERCEPTION_DAMAGE_MOD(0),
	m_iWOUNDED_DAMAGE_MULTIPLIER(50),
	m_iTRAIT_WOUNDED_DAMAGE_MOD(-50),
	m_iCITY_STRENGTH_DEFAULT(400),
	m_iCITY_STRENGTH_POPULATION_CHANGE(25),
	m_iCITY_STRENGTH_UNIT_DIVISOR(300),
	m_iCITY_STRENGTH_HILL_CHANGE(3),
	m_iCITY_ATTACKING_DAMAGE_MOD(50),
	m_iATTACKING_CITY_MELEE_DAMAGE_MOD(100),
#if defined(MOD_EVENTS_CITY_BOMBARD)
	GD_INT_INIT(MAX_CITY_ATTACK_RANGE, 2),
#endif
	m_iCITY_ATTACK_RANGE(2),
	m_iCAN_CITY_USE_INDIRECT_FIRE(1),
	m_iCITY_RANGED_ATTACK_STRENGTH_MULTIPLIER(40),
	m_iMIN_CITY_STRIKE_DAMAGE(1),
	m_iCITY_CAPTURE_DAMAGE_PERCENT(50),
	m_iEXPERIENCE_PER_LEVEL(10),
	m_iEXPERIENCE_ATTACKING_UNIT_MELEE(5),
	m_iEXPERIENCE_DEFENDING_UNIT_MELEE(4),
	m_iEXPERIENCE_ATTACKING_UNIT_AIR(4),
	m_iEXPERIENCE_DEFENDING_UNIT_AIR(2),
	m_iEXPERIENCE_ATTACKING_UNIT_RANGED(2),
	m_iEXPERIENCE_DEFENDING_UNIT_RANGED(2),
	m_iEXPERIENCE_ATTACKING_AIR_SWEEP(5),
	m_iEXPERIENCE_DEFENDING_AIR_SWEEP_AIR(5),
	m_iEXPERIENCE_DEFENDING_AIR_SWEEP_GROUND(2),
	m_iEXPERIENCE_ATTACKING_CITY_MELEE(5),
	m_iEXPERIENCE_ATTACKING_CITY_RANGED(3),
	m_iEXPERIENCE_ATTACKING_CITY_AIR(4),
	m_iBARBARIAN_MAX_XP_VALUE(30),
	m_iMINOR_MAX_XP_VALUE(-1),
	m_iCOMBAT_EXPERIENCE_IN_BORDERS_PERCENT(100),
	m_iGREAT_GENERALS_THRESHOLD_INCREASE(50),
	m_iGREAT_GENERALS_THRESHOLD_INCREASE_TEAM(50),
	m_iGREAT_GENERALS_THRESHOLD(200),
	m_iUNIT_DEATH_XP_GREAT_GENERAL_LOSS(50),
	m_iMIN_EXPERIENCE_PER_COMBAT(1),
	m_iMAX_EXPERIENCE_PER_COMBAT(10),
	m_iCRAMPED_RANGE_FROM_CITY(5),
	m_iCRAMPED_USABLE_PLOT_PERCENT(25),
	m_iPROXIMITY_NEIGHBORS_CLOSEST_CITY_REQUIREMENT(7),
	m_iPROXIMITY_CLOSE_CLOSEST_CITY_POSSIBILITY(11),
	m_iPROXIMITY_FAR_DISTANCE_MAX(50),
	m_iPLOT_BASE_COST(50),
	m_iPLOT_ADDITIONAL_COST_PER_PLOT(5),
	m_iPLOT_COST_APPEARANCE_DIVISOR(5),
	m_iCULTURE_COST_FIRST_PLOT(20),
	m_iCULTURE_COST_LATER_PLOT_MULTIPLIER(10),
	m_iCULTURE_COST_VISIBLE_DIVISOR(5),
	m_iCULTURE_PLOT_COST_MOD_MINIMUM(-85),
	m_iMINOR_CIV_PLOT_CULTURE_COST_MULTIPLIER(150),
	m_iMAXIMUM_WORK_PLOT_DISTANCE(3),
	m_iMAXIMUM_BUY_PLOT_DISTANCE(3),
	m_iMAXIMUM_ACQUIRE_PLOT_DISTANCE(5),
	m_iPLOT_INFLUENCE_BASE_MULTIPLIER(100),
	m_iPLOT_INFLUENCE_DISTANCE_MULTIPLIER(100),
	m_iPLOT_INFLUENCE_DISTANCE_DIVISOR(3),
	m_iPLOT_INFLUENCE_RING_COST(100),
	m_iPLOT_INFLUENCE_WATER_COST(25),
	m_iPLOT_INFLUENCE_IMPROVEMENT_COST(-5),
	m_iPLOT_INFLUENCE_ROUTE_COST(0),
	m_iPLOT_INFLUENCE_RESOURCE_COST(-105),
	m_iPLOT_INFLUENCE_NW_COST(-105),
#if defined(MOD_UI_CITY_EXPANSION)
	// Not used!
	GD_INT_INIT(PLOT_INFLUENCE_COST_VISIBLE_DIVISOR, 5),
#endif
	m_iPLOT_BUY_RESOURCE_COST(-100),
	m_iPLOT_BUY_YIELD_COST(10),
	m_iPLOT_INFLUENCE_YIELD_POINT_COST(-1),
	m_iPLOT_INFLUENCE_NO_ADJACENT_OWNED_COST(1000),
	m_iUNITED_NATIONS_COUNTDOWN_TURNS(10),
	m_iOWN_UNITED_NATIONS_VOTE_BONUS(1),
	m_iDIPLO_VICTORY_ALGORITHM_THRESHOLD(28),
	m_iDIPLO_VICTORY_BEYOND_ALGORITHM_MULTIPLIER(35),
	m_iDIPLO_VICTORY_DEFAULT_VOTE_PERCENT(67),
	m_iSCORE_CITY_MULTIPLIER(10),
	m_iSCORE_POPULATION_MULTIPLIER(3),
	m_iSCORE_LAND_MULTIPLIER(1),
	m_iSCORE_WONDER_MULTIPLIER(40),
	m_iSCORE_TECH_MULTIPLIER(4),
	m_iSCORE_FUTURE_TECH_MULTIPLIER(10),
	m_iSCORE_POLICY_MULTIPLIER(4),
	m_iSCORE_GREAT_WORK_MULTIPLIER(4),
	m_iSCORE_BELIEF_MULTIPLIER(20),
	m_iSCORE_RELIGION_CITIES_MULTIPLIER(1),
	m_iVICTORY_POINTS_PER_ERA(1),
	m_iMIN_GAME_TURNS_ELAPSED_TO_TEST_VICTORY(10),
	m_iZERO_SUM_COMPETITION_WONDERS_VICTORY_POINTS(5),
	m_iZERO_SUM_COMPETITION_POLICIES_VICTORY_POINTS(5),
	m_iZERO_SUM_COMPETITION_GREAT_PEOPLE_VICTORY_POINTS(5),
	m_iMAX_CITY_DIST_HIGHWATER_MARK(3),
	m_iHEAVY_RESOURCE_THRESHOLD(3),
	m_iPROGRESS_POPUP_TURN_FREQUENCY(25),
	m_iSETTLER_PRODUCTION_SPEED(0),
	m_iBUY_PLOTS_DISABLED(0),
	m_iCITY_STRENGTH_TECH_MULTIPLIER(2),
	m_iWARLORD_EXTRA_EXPERIENCE_PER_UNIT_PERCENT(0),
	m_iBUILDING_SALE_DIVISOR(10),
	m_iDISBAND_UNIT_REFUND_PERCENT(10),
	m_iMINOR_CIV_ROUTE_QUEST_WEIGHT(0),
	m_iWITHDRAW_MOD_ENEMY_MOVES(0),
	m_iWITHDRAW_MOD_BLOCKED_TILE(0),
	m_iAI_OPERATIONAL_MAX_RECRUIT_TURNS_DEFAULT(5),
	m_iAI_OPERATIONAL_MAX_RECRUIT_TURNS_ENEMY_TERRITORY(10),
	m_iINTERNATIONAL_TRADE_BASE(100),
	m_iINTERNATIONAL_TRADE_EXCLUSIVE_CONNECTION(200),
	m_iINTERNATIONAL_TRADE_CITY_GPT_DIVISOR(20),
#if defined(MOD_DIPLOMACY_CITYSTATES_HURRY) || defined(MOD_BALANCE_CORE)
	m_iAI_GOLD_TREASURY_BUFFER(500),
#endif
#if defined(MOD_DIPLOMACY_CITYSTATES_QUESTS) || defined(MOD_BALANCE_CORE)
	m_iBALANCE_MINOR_ANCHOR_ATTACK(-10),
	m_iBALANCE_CS_WAR_COOLDOWN_RATE(30),
#endif
#if defined(MOD_BALANCE_CORE)
	m_iMOD_BALANCE_FOLLOWER_GROWTH_BONUS(0),
	m_iFRIENDS_GOLD_FLAT_BONUS_AMOUNT_INDUSTRIAL(0),
	m_iFRIENDS_GOLD_FLAT_BONUS_AMOUNT_RENAISSANCE(0),
	m_iFRIENDS_GOLD_FLAT_BONUS_AMOUNT_MEDIEVAL(0),
	m_iFRIENDS_GOLD_FLAT_BONUS_AMOUNT_CLASSICAL(0),
	m_iFRIENDS_GOLD_FLAT_BONUS_AMOUNT_ANCIENT(0),
	m_iALLIES_GOLD_FLAT_BONUS_AMOUNT_INDUSTRIAL(0),
	m_iALLIES_GOLD_FLAT_BONUS_AMOUNT_RENAISSANCE(0),
	m_iALLIES_GOLD_FLAT_BONUS_AMOUNT_MEDIEVAL(0),
	m_iALLIES_GOLD_FLAT_BONUS_AMOUNT_CLASSICAL(0),
	m_iALLIES_GOLD_FLAT_BONUS_AMOUNT_ANCIENT(0),
	m_iFRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_INDUSTRIAL(0),
	m_iFRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_RENAISSANCE(0),
	m_iFRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_MEDIEVAL(0),
	m_iFRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_CLASSICAL(0),
	m_iFRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_ANCIENT(0),
	m_iALLIES_SCIENCE_FLAT_BONUS_AMOUNT_INDUSTRIAL(0),
	m_iALLIES_SCIENCE_FLAT_BONUS_AMOUNT_RENAISSANCE(0),
	m_iALLIES_SCIENCE_FLAT_BONUS_AMOUNT_MEDIEVAL(0),
	m_iALLIES_SCIENCE_FLAT_BONUS_AMOUNT_CLASSICAL(0),
	m_iALLIES_SCIENCE_FLAT_BONUS_AMOUNT_ANCIENT(0),
	m_iBALANCE_CORE_MUSICIAN_BLAST_HAPPINESS(0),
	m_iBALANCE_MAX_CS_ALLY_STRENGTH(20),
	m_iBALANCE_CS_PLEDGE_TO_PROTECT_DEFENSE_BONUS(5),
	m_iBALANCE_CS_PLEDGE_TO_PROTECT_DEFENSE_BONUS_MAX(25),
	m_iBALANCE_CS_ALLIANCE_DEFENSE_BONUS(25),
	m_iUNIT_AUTO_EXTRA_AUTOMATIONS_DISABLED(0),
	m_iBALANCE_MARRIAGE_GP_RATE(5),
	m_iBALANCE_SPY_RESPAWN_TIMER(10),
	m_iBALANCE_SPY_SABOTAGE_RATE(25),
	m_iBALANCE_SPY_TO_MINOR_RATIO(15),
	m_iBALANCE_HAPPINESS_PENALTY_MAXIMUM(-1),
	m_iBALANCE_HAPPINESS_PRODUCTION_MODIFIER(-1),
	m_iBALANCE_HAPPINESS_FOOD_MODIFIER(-1),
	m_iBALANCE_UNHAPPINESS_FOOD_MODIFIER(0),
	m_iBALANCE_EMPIRE_BORDERLAND_STRATEGIC_VALUE(50),
	m_iBALANCE_COAST_STRATEGIC_VALUE(2),
	m_iBALANCE_FRESH_WATER_STRATEGIC_VALUE(2),
	m_iBALANCE_CHOKEPOINT_STRATEGIC_VALUE(25),
	m_iBALANCE_BAD_TILES_STRATEGIC_VALUE(-25),
	m_iBALANCE_BARBARIAN_HEAL_RATE(10),
	m_iBALANCE_BASIC_ATTACK_ARMY_SIZE(6),
	m_iBALANCE_ARMY_NAVY_START_SIZE(3),
	m_iBALANCE_UNHAPPINESS_PER_SPECIALIST(1),
	m_iBALANCE_HAPPINESS_LUXURY_POP_SCALER(100),
	m_iBALANCE_HAPPINESS_LUXURY_COUNT_SCALER(950),
	m_fBALANCE_UNHAPPINESS_PER_MINORITY_POP(0.5f),
	m_fBALANCE_UNHAPPINESS_FROM_STARVING_PER_POP(0.5f),
	m_fBALANCE_UNHAPPINESS_PER_PILLAGED(0.5f),
	m_fBALANCE_UNHAPPINESS_FROM_UNCONNECTED_PER_POP(0.5f),
	m_iBALANCE_HAPPINESS_POP_MULTIPLIER(5),
	m_iBALANCE_HAPPINESS_EMPIRE_MULTIPLIER(0),
	m_iBALANCE_UNHAPPY_CITY_BASE_VALUE_BOREDOM(100),
	m_iBALANCE_UNHAPPY_CITY_BASE_VALUE_ILLITERACY(100),
	m_iBALANCE_UNHAPPY_CITY_BASE_VALUE_DISORDER(100),
	m_iBALANCE_UNHAPPY_CITY_BASE_VALUE_POVERTY(100),
	m_iBALANCE_WONDER_BEATEN_CONSOLATION_PRIZE(1),
	m_iBALANCE_CULTURE_PERCENTAGE_VALUE(40),
	m_iBALANCE_GA_PERCENTAGE_VALUE(20),
	m_iBALANCE_SCIENCE_PERCENTAGE_VALUE(5),
	m_iBALANCE_FAITH_PERCENTAGE_VALUE(10),
	m_iBALANCE_HAPPINESS_PUPPET_THRESHOLD_MOD(1),
	m_iBALANCE_SCIENCE_INFLUENCE_LEVEL_EXOTIC(1),
	m_iBALANCE_SCIENCE_INFLUENCE_LEVEL_FAMILIAR(1),
	m_iBALANCE_SCIENCE_INFLUENCE_LEVEL_POPULAR(1),
	m_iBALANCE_SCIENCE_INFLUENCE_LEVEL_INFLUENTIAL(1),
	m_iBALANCE_SCIENCE_INFLUENCE_LEVEL_DOMINANT(1),
	m_iBALANCE_CONQUEST_REDUCTION_BOOST(1),
	m_iBALANCE_SPY_BOOST_INFLUENCE_EXOTIC(4),
	m_iBALANCE_SPY_BOOST_INFLUENCE_FAMILIAR(3),
	m_iBALANCE_SPY_BOOST_INFLUENCE_POPULAR(2),
	m_iBALANCE_SPY_BOOST_INFLUENCE_INFLUENTIAL(1),
	m_iBALANCE_SPY_BOOST_INFLUENCE_DOMINANT(1),
	m_iBALANCE_GOLD_INFLUENCE_LEVEL_FAMILIAR(1),
	m_iBALANCE_GOLD_INFLUENCE_LEVEL_POPULAR(1),
	m_iBALANCE_GOLD_INFLUENCE_LEVEL_INFLUENTIAL(1),
	m_iBALANCE_GOLD_INFLUENCE_LEVEL_DOMINANT(1),
	m_iBALANCE_GOLD_INFLUENCE_LEVEL_EXOTIC(1),
	m_iBALANCE_GROWTH_INFLUENCE_LEVEL_FAMILIAR(1),
	m_iBALANCE_GROWTH_INFLUENCE_LEVEL_POPULAR(1),
	m_iBALANCE_GROWTH_INFLUENCE_LEVEL_INFLUENTIAL(1),
	m_iBALANCE_GROWTH_INFLUENCE_LEVEL_DOMINANT(1),
	m_iBALANCE_GROWTH_INFLUENCE_LEVEL_EXOTIC(1),
	m_iBALANCE_HAPPINESS_CAPITAL_MODIFIER(20),
	m_fBALANCE_HAPPINESS_TECH_BASE_MODIFIER(1.5f),
	m_iBALANCE_INFLUENCE_BOOST_PROTECTION_MINOR(15),
	m_iBALANCE_MOD_POLICY_BRANCHES_NEEDED_IDEOLOGY(3),
	m_iBALANCE_MOD_POLICIES_NEEDED_IDEOLOGY(18),
	m_iBUILDER_TASKING_BASELINE_ADDS_FOOD(100),
	m_iBUILDER_TASKING_BASELINE_ADDS_GOLD(100), 
	m_iBUILDER_TASKING_BASELINE_ADDS_FAITH(100),
	m_iBUILDER_TASKING_BASELINE_ADDS_PRODUCTION(100),
	m_iBUILDER_TASKING_BASELINE_ADDS_SCIENCE(100),
	m_iBUILDER_TASKING_BASELINE_ADDS_CULTURE(100),
	m_iBALANCE_MINOR_PROTECTION_MINIMUM_DURATION(50),
	m_iBALANCE_SCOUT_XP_RANDOM_VALUE(15),
	m_iBALANCE_SCOUT_XP_BASE(1),
	m_iBALANCE_CORE_WORLD_WONDER_SAME_ERA_COST_MODIFIER(10),
	m_iBALANCE_CORE_WORLD_WONDER_PREVIOUS_ERA_COST_MODIFIER(5),
	m_iBALANCE_CORE_WORLD_WONDER_EARLIER_ERA_COST_MODIFIER(2),
	m_iOPINION_WEIGHT_RA(-10),
	m_iOPINION_WEIGHT_RA_SCIENTIFIC_MOD(-10),
	m_iOPINION_WEIGHT_DP(-15),
	m_iOPINION_WEIGHT_DP_MOST_VALUED_ALLY(-15),
	m_iOPINION_WEIGHT_DP_WITH_FRIEND(-10),
	m_iOPINION_WEIGHT_DP_WITH_FRIEND_SUBSEQUENT(-5),
	m_iOPINION_WEIGHT_DP_WITH_MOST_VALUED_ALLY(-10),
	m_iOPINION_WEIGHT_DP_WITH_MOST_VALUED_FRIEND(-5),
	m_iOPINION_WEIGHT_DP_WITH_ENEMY(20),
	m_iOPINION_WEIGHT_DP_WITH_ENEMY_SUBSEQUENT(10),
	m_iOPINION_WEIGHT_DP_WITH_BIGGEST_COMPETITOR(20),
	m_iOPINION_WEIGHT_DP_WITH_BIGGEST_LEAGUE_RIVAL(20),
	m_iOPINION_WEIGHT_EMBASSY_MUTUAL(-3),
	m_iOPINION_WEIGHT_EMBASSY_THEM(-1),
	m_iOPINION_WEIGHT_OPEN_BORDERS_MUTUAL(-12),
	m_iOPINION_WEIGHT_OPEN_BORDERS_US(-8),
	m_iOPINION_WEIGHT_OPEN_BORDERS_THEM(-4),
	m_iOPINION_WEIGHT_PLUNDERED_TRADE_ROUTE(5),
	m_iOPINION_WEIGHT_PLOTTED_AGAINST_US(20),
	m_iOPINION_WEIGHT_PLOTTED_AGAINST_US_SUBSEQUENT(10),
	m_iOPINION_WEIGHT_PERFORMED_COUP(15),
	m_iOPINION_WEIGHT_EXCAVATED_ARTIFACT(30),
	m_iGWAM_THRESHOLD_DECREASE(-25),
	m_iBALANCE_BUILDING_INVESTMENT_BASELINE(-50),
	m_iBALANCE_UNIT_INVESTMENT_BASELINE(-50),
	m_iOPEN_BORDERS_MODIFIER_TRADE_GOLD(20),
	m_fMOD_BALANCE_CORE_MINIMUM_RANKING_PTP(0.0f),
	m_iMOD_BALANCE_CORE_PRODUCTION_DESERT_IMPROVEMENT(0),
	m_fMOD_BALANCE_CORE_CORP_OFFICE_FRANCHISE_CONVERSION(0.0f),
	m_fMOD_BALANCE_CORE_CORP_OFFICE_TR_CONVERSION(0.0),
#endif

// -- floats --

	m_fDIPLO_VICTORY_CIV_DELEGATES_COEFFICIENT(1.443f),
	m_fDIPLO_VICTORY_CIV_DELEGATES_CONSTANT(7.000f),
	m_fDIPLO_VICTORY_CS_DELEGATES_COEFFICIENT(16.023f),
	m_fDIPLO_VICTORY_CS_DELEGATES_CONSTANT(-13.738f),
	m_fAI_PRODUCTION_WEIGHT_MOD_PER_TURN_LEFT(0.015f),
	m_fAI_PRODUCTION_WEIGHT_BASE_MOD(0.15f),
	m_fAI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT(0.015f),
	m_fAI_RESEARCH_WEIGHT_BASE_MOD(0.15f),
	m_fHURRY_GOLD_PRODUCTION_EXPONENT(0.95f),
	m_fCITY_ZOOM_LEVEL_1(500.0f),
	m_fCITY_ZOOM_LEVEL_2(700.0f),
	m_fCITY_ZOOM_LEVEL_3(800.0f),
	m_fCITY_ZOOM_OFFSET(20.0f),
	m_fCULTURE_COST_LATER_PLOT_EXPONENT(1.1f),
	m_fPOST_COMBAT_TEXT_DELAY(1.0f),
	m_fAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER(0.2f),
	m_fAI_DANGER_MAJOR_APPROACH_WAR(1.0f),
	m_fAI_DANGER_MAJOR_APPROACH_HOSTILE(0.2f),
	m_fAI_DANGER_MAJOR_APPROACH_DECEPTIVE(0.1f),
	m_fAI_DANGER_MAJOR_APPROACH_GUARDED(0.5f),
	m_fAI_DANGER_MAJOR_APPROACH_AFRAID(0.9f),
	m_fAI_DANGER_MAJOR_APPROACH_FRIENDLY(0.0f),
	m_fAI_DANGER_MAJOR_APPROACH_NEUTRAL(0.1f),
	m_fAI_DANGER_MINOR_APPROACH_NEUTRAL(0.1f),
	m_fAI_DANGER_MINOR_APPROACH_FRIENDLY(0.0f),
	m_fAI_DANGER_MINOR_APPROACH_BULLY(0.9f),
	m_fAI_DANGER_MINOR_APPROACH_CONQUEST(1.0f),
	m_fFLAVOR_STANDARD_LOG10_TILES_PER_PLAYER(2.1f),
	m_fDIPLO_VICTORY_TEAM_MULTIPLIER(1.1f),
	m_fAI_TACTICAL_FLAVOR_DAMPENING_FOR_MOVE_PRIORITIZATION(0.3f),
	m_fAI_STRATEGY_DEFEND_MY_LANDS_UNITS_PER_CITY(1.0f),
	m_fAI_STRATEGY_NAVAL_UNITS_PER_CITY(0.67f),
	m_fGOLD_GIFT_FRIENDSHIP_EXPONENT(1.01f),
	m_fGOLD_GIFT_FRIENDSHIP_DIVISOR(6.3f),
	m_fHURRY_GOLD_TECH_EXPONENT(1.10f),
	m_fHURRY_GOLD_CULTURE_EXPONENT(1.10f),
	m_fCITY_GROWTH_MULTIPLIER(6.0f),
	m_fCITY_GROWTH_EXPONENT(1.8f),
	m_fPOLICY_COST_EXPONENT(1.70f),
	m_fPOLICY_COST_EXTRA_VALUE(.25f),
	m_fUNIT_UPGRADE_COST_MULTIPLIER_PER_ERA(0.0f),
	m_fUNIT_UPGRADE_COST_EXPONENT(1.0f),
	m_fCITY_STRENGTH_TECH_BASE(5.0f),
	m_fCITY_STRENGTH_TECH_EXPONENT(1.8f),
	m_fESPIONAGE_COUP_NOBODY_BONUS(1.0f),
	m_fESPIONAGE_COUP_MULTIPLY_CONSTANT(1.0f),
	m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_ZERO(1.0f),
	m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_ONE(1.0f),
	m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_TWO(1.0f),
	m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_THREE(1.0f),
	m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_FOUR(1.0f),
	m_iPILLAGE_HEAL_AMOUNT(25),
	m_iCITY_CONNECTIONS_CONNECT_TO_CAPITAL(1),
	m_fUNRESEARCHED_TECH_FROM_KILLS_SLOPE(9.68f),
	m_fUNRESEARCHED_TECH_FROM_KILLS_INTERCEPT(-114.07f),
	m_iBASE_CULTURE_PER_GREAT_WORK(2),
	m_iBASE_TOURISM_PER_GREAT_WORK(2),
	m_iTOURISM_MODIFIER_SHARED_RELIGION(25),
	m_iTOURISM_MODIFIER_TRADE_ROUTE(25),
	m_iTOURISM_MODIFIER_OPEN_BORDERS(25),
	m_iTOURISM_MODIFIER_DIFFERENT_IDEOLOGIES(-50),
	m_iTOURISM_MODIFIER_DIPLOMAT(25),
	m_iMINIUMUM_TOURISM_BLAST_STRENGTH(100),
	m_iCULTURE_LEVEL_EXOTIC(5),
	m_iCULTURE_LEVEL_FAMILIAR(10),
	m_iCULTURE_LEVEL_POPULAR(15),
	m_iCULTURE_LEVEL_INFLUENTIAL(20),
	m_iCULTURE_LEVEL_DOMINANT(50),
	m_iMIN_DIG_SITES_PER_MAJOR_CIV(5),
	m_iMAX_DIG_SITES_PER_MAJOR_CIV(8),
	m_iPERCENT_SITES_HIDDEN(30),
	m_iPERCENT_HIDDEN_SITES_WRITING(30),
	m_iSAPPED_CITY_ATTACK_MODIFIER(50),
	m_iSAPPER_BONUS_RANGE(2),
	m_iEXOTIC_GOODS_GOLD_MIN(50),
	m_iEXOTIC_GOODS_GOLD_MAX(250),
	m_iEXOTIC_GOODS_XP_MIN(5),
	m_iEXOTIC_GOODS_XP_MAX(25),
	m_iTEMPORARY_CULTURE_BOOST_MOD(100),
	m_iTEMPORARY_TOURISM_BOOST_MOD(100),
	m_iPROMOTION_GOODY_HUT_PICKER(-1),

	m_iIDEOLOGY_PERCENT_CLEAR_VICTORY_PREF(25),
	m_iIDEOLOGY_SCORE_GRAND_STRATS(1),
	m_iIDEOLOGY_SCORE_HAPPINESS(1),
	m_iIDEOLOGY_SCORE_PER_FREE_TENET(4),
	m_iIDEOLOGY_SCORE_HOSTILE(4),
	m_iIDEOLOGY_SCORE_GUARDED(2),
	m_iIDEOLOGY_SCORE_AFRAID(3),
	m_iIDEOLOGY_SCORE_FRIENDLY(6),
	m_iPOLICY_BRANCH_FREEDOM(-1),
	m_iPOLICY_BRANCH_AUTOCRACY(-1),
	m_iPOLICY_BRANCH_ORDER(-1),
#if defined(MOD_ISKA_HERITAGE)
	m_iPOLICY_BRANCH_HERITAGE(-1),
#endif

	m_iLEAGUE_SESSION_INTERVAL_BASE_TURNS(30),
	m_iLEAGUE_SESSION_SOON_WARNING_TURNS(5),
	m_iLEAGUE_MEMBER_PROPOSALS_BASE(1),
	m_iLEAGUE_MEMBER_VOTES_BASE(1),
	m_iLEAGUE_MEMBER_VOTES_FOR_HOST(1),
	m_iLEAGUE_MEMBER_VOTES_PER_CITY_STATE_ALLY(1),
	m_fLEAGUE_PROJECT_REWARD_TIER_1_THRESHOLD(0.5f),
	m_fLEAGUE_PROJECT_REWARD_TIER_2_THRESHOLD(1.0f),
#if defined(MOD_DIPLOMACY_CITYSTATES_RESOLUTIONS)
	m_iLEAGUE_PROPOSERS_PER_SESSION(2),
	m_iLEAGUE_NUM_LEADERS_FOR_EXTRA_VOTES(2),
	m_iLEAGUE_PROJECT_PROGRESS_PERCENT_WARNING(33),
#endif

// -- post defines --

	m_iLAND_TERRAIN(0),
	m_iDEEP_WATER_TERRAIN(6),
	m_iSHALLOW_WATER_TERRAIN(5),
	m_iRUINS_IMPROVEMENT(0),
	m_iNUKE_FEATURE(6),
	m_iARTIFACT_RESOURCE(35),
	m_iHIDDEN_ARTIFACT_RESOURCE(39),
	m_iCAPITAL_BUILDINGCLASS(28),
	m_iDEFAULT_SPECIALIST(0),
	m_iSPACE_RACE_TRIGGER_PROJECT(1),
	m_iSPACESHIP_CAPSULE(2),
	m_iSPACESHIP_BOOSTER(5),
	m_iSPACESHIP_STASIS(3),
	m_iSPACESHIP_ENGINE(4),
	m_iMANHATTAN_PROJECT(0),
	m_iINITIAL_CITY_ROUTE_TYPE(0),
	m_iSTANDARD_HANDICAP(1),
	m_iMULTIPLAYER_HANDICAP(3),
	m_iSTANDARD_HANDICAP_QUICK(1),
	m_iSTANDARD_GAMESPEED(2),
	m_iSTANDARD_TURNTIMER(3),
	m_iSTANDARD_CLIMATE(0),
	m_iSTANDARD_WORLD_SIZE(3),
	m_iSTANDARD_SEALEVEL(1),
	m_iSTANDARD_ERA(0),
	m_iLAST_EMBARK_ART_ERA(4),
	m_iLAST_UNIT_ART_ERA(4),
	m_iLAST_BRIDGE_ART_ERA(5),
	m_iSTANDARD_CALENDAR(0),
	m_iBARBARIAN_HANDICAP(1),
	m_iBARBARIAN_CIVILIZATION(19),
	m_iBARBARIAN_LEADER(3),
	m_iMINOR_CIV_HANDICAP(3),
	m_iMINOR_CIVILIZATION(18),
	m_iPROMOTION_EMBARKATION(76),
	m_iPROMOTION_DEFENSIVE_EMBARKATION(77),
	m_iPROMOTION_ALLWATER_EMBARKATION(146),
#if defined(MOD_PROMOTIONS_DEEP_WATER_EMBARKATION)
	GD_INT_INIT(PROMOTION_DEEPWATER_EMBARKATION, -1),
	GD_INT_INIT(PROMOTION_DEFENSIVE_DEEPWATER_EMBARKATION, -1),
#endif
#if defined(MOD_PROMOTIONS_FLAGSHIP)
	GD_INT_INIT(PROMOTION_FLAGSHIP, -1),
#endif
	m_iPROMOTION_OCEAN_IMPASSABLE_UNTIL_ASTRONOMY(115),
	m_iPROMOTION_OCEAN_IMPASSABLE(116),
	m_iCOMBAT_CAPTURE_HEALTH(50),
	m_iCOMBAT_CAPTURE_MIN_CHANCE(10),
	m_iCOMBAT_CAPTURE_MAX_CHANCE(80),
	m_iCOMBAT_CAPTURE_RATIO_MULTIPLIER(40),
	m_iAI_HANDICAP(8),
	m_iBARBARIAN_CAMP_IMPROVEMENT(1),
#if defined(MOD_DIPLOMACY_CITYSTATES)
	m_iEMBASSY_IMPROVEMENT(1),
#endif
	m_iWALLS_BUILDINGCLASS(-1),
	m_iPROMOTION_ONLY_DEFENSIVE(-1),
	m_iPROMOTION_UNWELCOME_EVANGELIST(-1),
	m_iRELIGION_MIN_FAITH_FIRST_PANTHEON(0),
	m_iRELIGION_MIN_FAITH_FIRST_PROPHET(0),
	m_iRELIGION_MIN_FAITH_FIRST_GREAT_PERSON(0),
	m_iRELIGION_GAME_FAITH_DELTA_NEXT_PANTHEON(0),
	m_iRELIGION_FAITH_DELTA_NEXT_PROPHET(0),
	m_iRELIGION_FAITH_DELTA_NEXT_GREAT_PERSON(0),
	m_iRELIGION_BASE_CHANCE_PROPHET_SPAWN(0),
	m_iRELIGION_ATHEISM_PRESSURE_PER_POP(0),
	m_iRELIGION_INITIAL_FOUNDING_CITY_PRESSURE(0),
	m_iRELIGION_PER_TURN_FOUNDING_CITY_PRESSURE(0),
	m_iRELIGION_MISSIONARY_PRESSURE_MULTIPLIER(0),
	m_iRELIGION_ADJACENT_CITY_DISTANCE(0),
	m_iRELIGION_DIPLO_HIT_INITIAL_CONVERT_FRIENDLY_CITY(0),
	m_iRELIGION_DIPLO_HIT_RELIGIOUS_FLIP_FRIENDLY_CITY(0),
	m_iRELIGION_DIPLO_HIT_CONVERT_HOLY_CITY(0),
	m_iRELIGION_DIPLO_HIT_THRESHOLD(0),
	m_iESPIONAGE_GATHERING_INTEL_COST_PERCENT(0),
	m_iESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT(0),
	m_iESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT(0),
	m_iESPIONAGE_TURNS_BETWEEN_CITY_STATE_ELECTIONS(0),
	m_iESPIONAGE_INFLUENCE_GAINED_FOR_RIGGED_ELECTION(0),
	m_iESPIONAGE_INFLUENCE_LOST_FOR_RIGGED_ELECTION(0),
	m_iESPIONAGE_SURVEILLANCE_SIGHT_RANGE(0),
	m_iESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP(10),
#if defined(MOD_PROMOTIONS_AURA_CHANGE)
	GD_INT_INIT(GREAT_GENERAL_MAX_RANGE, 2),
#endif
#if defined(MOD_DIPLOMACY_CIV4_FEATURES)
	m_fTECH_COST_ERA_EXPONENT(0.7f),
	m_fVASSALAGE_VASSAL_CITY_POP_EXPONENT(0.6f),

	m_iHELP_REQUEST_TURN_LIMIT_MIN(20),
	m_iHELP_REQUEST_TURN_LIMIT_RAND(10),
	m_iSHARE_OPINION_TURN_BUFFER(20),
	m_iVASSAL_TOURISM_MODIFIER(33),
	m_iVASSALAGE_VASSAL_UNIT_MAINT_COST_PERCENT(40),
	m_iVASSAL_SCORE_PERCENT(50),
	m_iVASSAL_HAPPINESS_PERCENT(20),
	m_iVASSALAGE_FREE_YIELD_FROM_VASSAL_PERCENT(20),
	m_iVASSALAGE_PROTECT_VALUE_PER_OPINION_WEIGHT(50),
	m_iVASSALAGE_FAILED_PROTECT_VALUE_PER_OPINION_WEIGHT(50),
	m_iVASSALAGE_PROTECTED_CITY_DISTANCE(6),
	m_iVASSALAGE_FAILED_PROTECT_CITY_DISTANCE(0),
	m_iVASSALAGE_FAILED_PROTECT_PER_TURN_DECAY(25),
	m_iVASSALAGE_PROTECTED_PER_TURN_DECAY(25),
	m_iVASSALAGE_VASSAL_LOST_CITIES_THRESHOLD(75),
	m_iVASSALAGE_VASSAL_POPULATION_THRESHOLD(300),
	m_iVASSALAGE_VASSAL_MASTER_CITY_PERCENT_THRESHOLD(60),
	m_iVASSALAGE_VASSAL_MASTER_POP_PERCENT_THRESHOLD(60),
	m_iVASSALAGE_CAPITULATE_BASE_THRESHOLD(90),
	m_iVASSALAGE_VASSAL_TAX_PERCENT_MINIMUM(0),
	m_iVASSALAGE_VASSAL_TAX_PERCENT_MAXIMUM(30),
	m_iVASSALAGE_TREATMENT_THRESHOLD_DISAGREE(-10),
	m_iVASSALAGE_TREATMENT_THRESHOLD_MISTREATED(-30),
	m_iVASSALAGE_TREATMENT_THRESHOLD_UNHAPPY(-60),
	m_iVASSALAGE_TREATMENT_THRESHOLD_ENSLAVED(-100),
	m_iOPINION_WEIGHT_MASTER_LIBERATED_ME_FROM_VASSALAGE(-50),
	m_iOPINION_WEIGHT_VASSALAGE_VOLUNTARY_VASSAL_MOD(150),
	m_iOPINION_WEIGHT_DEMANDED_WHILE_VASSAL(20),
	m_fOPINION_WEIGHT_VASSAL_TAX_EXPONENT(1.5),
	m_iOPINION_WEIGHT_VASSALAGE_WE_ARE_VOLUNTARY_VASSAL(-20),
	m_iOPINION_WEIGHT_VASSAL_TAX_DIVISOR(-5),
	m_iOPINION_WEIGHT_VASSAL_CURRENT_TAX_MODIFIER(50),
	m_iOPINION_WEIGHT_VASSALAGE_WE_ARE_VASSAL(0),
	m_iOPINION_WEIGHT_VASSALAGE_WE_ARE_MASTER(-50),
	m_iOPINION_WEIGHT_VASSALAGE_THEY_PEACEFULLY_REVOKED(-40),
	m_iOPINION_WEIGHT_VASSALAGE_THEY_FORCIBLY_REVOKED(50),
	m_iOPINION_WEIGHT_VASSALAGE_PROTECT_MAX(-50),
	m_iOPINION_WEIGHT_VASSALAGE_FAILED_PROTECT_MAX(50),
	m_iOPINION_WEIGHT_VASSALAGE_PEACEFULLY_REVOKED_NUM_TURNS_UNTIL_FORGOTTEN(100),
	m_iOPINION_WEIGHT_VASSALAGE_FORCIBLY_REVOKED_NUM_TURNS_UNTIL_FORGIVEN(100),
	m_iOPINION_WEIGHT_VASSALAGE_BROKEN_VASSAL_AGREEMENT_OPINION_WEIGHT(40),
	m_iOPINION_WEIGHT_VASSALAGE_TOO_MANY_VASSALS(10),
	m_iAPPROACH_WAR_VASSAL_FORCEFULLY_REVOKED(4),
	m_iAPPROACH_DECEPTIVE_VASSAL_FORCEFULLY_REVOKED(-10),
	m_iAPPROACH_FRIENDLY_VASSAL_FORCEFULLY_REVOKED(-10),
	m_iAPPROACH_WAR_VASSAL_PEACEFULLY_REVOKED(-4),
	m_iAPPROACH_DECEPTIVE_VASSAL_PEACEFULLY_REVOKED(2),
	m_iAPPROACH_FRIENDLY_VASSAL_PEACEFULLY_REVOKED(5),
	m_iAPPROACH_GUARDED_TOO_MANY_VASSALS(10),
	m_iAPPROACH_WAR_TOO_MANY_VASSALS(10),
	/*
	m_iGLOBAL_STATE_NEARLY_DEFEATED_WEIGHT(0),
	m_iGLOBAL_STATE_DEFENSIVE_WEIGHT(5),
	m_iGLOBAL_STATE_STALEMATE_WEIGHT(10),
	m_iGLOBAL_STATE_CALM_WEIGHT(12),
	m_iGLOBAL_STATE_OFFENSIVE_WEIGHT(18),
	m_iGLOBAL_STATE_NEARLY_WON_WEIGHT(25),
	m_iGLOBAL_STATE_MIL_STRENGTH_IMMENSE_WEIGHT(-20),
	m_iGLOBAL_STATE_MIL_STRENGTH_POWERFUL_WEIGHT(-14),
	m_iGLOBAL_STATE_MIL_STRENGTH_STRONG_WEIGHT(-8),
	m_iGLOBAL_STATE_MIL_STRENGTH_AVERAGE_WEIGHT(0),
	m_iGLOBAL_STATE_MIL_STRENGTH_WEAK_WEIGHT(8),
	m_iGLOBAL_STATE_MIL_STRENGTH_POOR_WEIGHT(14),
	m_iGLOBAL_STATE_MIL_STRENGTH_PATHETIC_WEIGHT(20),
	m_iGLOBAL_STATE_ECON_STRENGTH_IMMENSE_WEIGHT(-12),
	m_iGLOBAL_STATE_ECON_STRENGTH_POWERFUL_WEIGHT(-7),
	m_iGLOBAL_STATE_ECON_STRENGTH_STRONG_WEIGHT(-3),
	m_iGLOBAL_STATE_ECON_STRENGTH_AVERAGE_WEIGHT(0),
	m_iGLOBAL_STATE_ECON_STRENGTH_WEAK_WEIGHT(3),
	m_iGLOBAL_STATE_ECON_STRENGTH_POOR_WEIGHT(7),
	m_iGLOBAL_STATE_ECON_STRENGTH_PATHETIC_WEIGHT(12),
	m_iGLOBAL_STATE_NUM_VASSALS_MULTIPLIER(10),
	m_iGLOBAL_STATE_TECH_PERCENT_VERY_GOOD_WEIGHT(25),
	m_iGLOBAL_STATE_TECH_PERCENT_GOOD_WEIGHT(18),
	m_iGLOBAL_STATE_TECH_PERCENT_AVERAGE_WEIGHT(10),
	m_iGLOBAL_STATE_TECH_PERCENT_BAD_WEIGHT(5),
	m_iGLOBAL_STATE_TECH_PERCENT_VERY_BAD_WEIGHT(0),
	m_iGLOBAL_STATE_PER_POLICY_WEIGHT(4),
	m_iGLOBAL_STATE_PER_ALLY_WEIGHT(4),
	m_iGLOBAL_STATE_SCORE_PERCENT_EXTREMELY_GOOD_WEIGHT(20),
	m_iGLOBAL_STATE_SCORE_PERCENT_VERY_GOOD_WEIGHT(25),
	m_iGLOBAL_STATE_SCORE_PERCENT_GOOD_WEIGHT(18),
	m_iGLOBAL_STATE_SCORE_PERCENT_AVERAGE_WEIGHT(10),
	m_iGLOBAL_STATE_SCORE_PERCENT_BAD_WEIGHT(5),
	m_iGLOBAL_STATE_SCORE_PERCENT_VERY_BAD_WEIGHT(0),
	m_iGLOBAL_STATE_MIN_TURNS_BEFORE_PROCESS_STATE(100),
	*/
#endif
	m_iMAX_PLOTS_PER_EXPLORER(20),

	m_pEconomicAIStrategies(NULL),
	m_pCitySpecializations(NULL),
	m_pMilitaryAIStrategies(NULL),
	m_pAIGrandStrategies(NULL),
	m_pPolicies(NULL),
	m_pTechs(NULL),
	m_pBuildings(NULL),
	m_pEmphases(NULL),
	m_pTraits(NULL),
	m_pReligions(NULL),
	m_pBeliefs(NULL),
	m_pLeagueSpecialSessions(NULL),
	m_pLeagueNames(NULL),
	m_pLeagueProjects(NULL),
	m_pLeagueProjectRewards(NULL),
	m_pResolutions(NULL),
#if defined(MOD_API_ACHIEVEMENTS) || defined(ACHIEVEMENT_HACKS)
	m_pAchievements(NULL),
#endif
#if defined(MOD_BALANCE_CORE)
	m_pCorporations(NULL),
	m_pContracts(NULL),
#endif
	m_pGameDatabase(NULL)
{
}

CvGlobals::~CvGlobals()
{
	uninit();
}

#ifdef STACKWALKER
MyStackWalker gStackWalker;
lua_State* gLuaState = NULL;
#endif

//cannot use GC.getGame().getActivePlayer() in observer mode
PlayerTypes GetCurrentPlayer()
{
	for(int i = 0; i < MAX_PLAYERS; ++i)
	{
		CvPlayerAI& kPlayer = GET_PLAYER( (PlayerTypes)i );
		if (kPlayer.isTurnActive())
			return (PlayerTypes)i;
	}
	return NO_PLAYER;
}

#if defined(MOD_DEBUG_MINIDUMP)
/************************************************************************************************/
/* MINIDUMP_MOD                           04/10/11                                terkhen       */
/* See http://www.debuginfo.com/articles/effminidumps.html                                      */
/*                                                                                              */
/* Originally for Civ 4, ported by ls612 to Civ 5                                               */
/* See http://forums.civfanatics.com/showthread.php?t=498919                                    */
/************************************************************************************************/

#pragma comment (lib, "dbghelp.lib")
void CreateMiniDump(EXCEPTION_POINTERS *pep)
{
#ifdef STACKWALKER
	{
		/* Try to log the callstack */
		FILogFile* pLog=LOGFILEMGR.GetLog( "Callstack.log", FILogFile::kDontTimeStamp );
		if (pLog)
		{
			pLog->Msg("Gamecore Callstack\n");

			gStackWalker.SetLog(pLog);	
			gStackWalker.ShowCallstack( GetCurrentThread(), pep ? pep->ContextRecord : NULL );

			pLog->Msg("\nLua Callstack\n");
			if (gLuaState)
				LuaSupport::DumpCallStack(gLuaState,pLog);

			pLog->Close();
		}
	}
#endif

	/* Open a file to store the minidump. */
	HANDLE hFile = CreateFile(_T("CvMiniDump.dmp"), GENERIC_READ | GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
	if((hFile == NULL) || (hFile == INVALID_HANDLE_VALUE)) {
		_tprintf(_T("CreateFile failed. Error: %u \n"), GetLastError());
		return;
	}

	/* Create the minidump. */
	MINIDUMP_EXCEPTION_INFORMATION mdei;
	mdei.ThreadId           = GetCurrentThreadId();
	mdei.ExceptionPointers  = pep;
	mdei.ClientPointers     = FALSE;

	MINIDUMP_TYPE mdt       = MiniDumpNormal;

	MiniDumpWriteDump(GetCurrentProcess(), GetCurrentProcessId(), hFile, mdt, (pep != NULL) ? &mdei : NULL, NULL, NULL);

	CloseHandle(hFile);
}

LONG WINAPI CustomFilter(EXCEPTION_POINTERS *ExceptionInfo)
{
	CreateMiniDump(ExceptionInfo);
	return EXCEPTION_EXECUTE_HANDLER;
}
#endif

//
// allocate
//
void CvGlobals::init()
{
#if defined(MOD_DEBUG_MINIDUMP)
	/* Enable our custom exception that will write the minidump for us. */
	SetUnhandledExceptionFilter(CustomFilter);
	CUSTOMLOG("MiniDump exception handler installed");
#endif

	//
	// These vars are used to initialize the globals.
	//
#if defined(MOD_BALANCE_CORE)
	int aiPlotDirectionX[NUM_DIRECTION_TYPES+2] =
	{
		0,	// DIRECTION_NORTHEAST
		1,	// DIRECTION_EAST
		1,	// DIRECTION_SOUTHEAST
		0,	// DIRECTION_SOUTHWEST
		-1,	// DIRECTION_WEST
		-1,	// DIRECTION_NORTHWEST
		0,	// DUMMY
		0,	// NONE
#else
	int aiPlotDirectionX[NUM_DIRECTION_TYPES] =
	{
		0,	// DIRECTION_NORTHEAST
		1,	// DIRECTION_EAST
		1,	// DIRECTION_SOUTHEAST
		0,	// DIRECTION_SOUTHWEST
		-1,	// DIRECTION_WEST
		-1,	// DIRECTION_NORTHWEST
#endif
	};
#if defined(MOD_BALANCE_CORE)
	int aiPlotDirectionY[NUM_DIRECTION_TYPES+2] =
	{
		1,	// DIRECTION_NORTHEAST
		0,	// DIRECTION_EAST
		-1,	// DIRECTION_SOUTHEAST
		-1,	// DIRECTION_SOUTHWEST
		0,	// DIRECTION_WEST
		1,	// DIRECTION_NORTHWEST
		0,	// DUMMY
		0,	// NONE
#else
	int aiPlotDirectionY[NUM_DIRECTION_TYPES] =
	{
		1,	// DIRECTION_NORTHEAST
		0,	// DIRECTION_EAST
		-1,	// DIRECTION_SOUTHEAST
		-1,	// DIRECTION_SOUTHWEST
		0,	// DIRECTION_WEST
		1,	// DIRECTION_NORTHWEST
#endif
	};

	// these are now in hex-space coords

	int aiRingPlotXOffset[MAX_CITY_PLOTS] =
	{
		//	0
		0,
		//	1	2	3	4	5	6
		0,  1,  1,  0, -1, -1,
		//	7	8	9	10	11	12	13	14	15	16	17	18
		0,  1,  2,  2,  2,  1,  0,  -1, -2, -2, -2, -1,
		//	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36
		0,  1,  2,  3,  3,  3,  3,  2,  1,  0,  -1, -2, -3, -3, -3, -3, -2, -1,
		//	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60
		0,  1,  2,  3,  4,  4,  4,  4,  4,  3,  2,  1,  0,  -1,  -2, -3, -4, -4, -4, -4, -4, -3, -2, -1,
		//	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84  85  86  87  88  89  90
		0,  1,  2,  3,  4,  5,  5,  5,  5,  5,  5,  4,  3,  2,  1,  0,  -1, -2, -3, -4, -5, -5, -5, -5, -5, -5, -4, -3, -2, -1,
		// The pattern for the Nth ring is 0 .. N, (N-1) * N, N .. -N, (N-1) * -N, -N .. -1
	};


	int aiRingPlotYOffset[MAX_CITY_PLOTS] =
	{
		//	0
		0,
		//	1	2	3	4	5	6
		1,  0, -1, -1,  0,  1,
		//	7	8	9	10	11	12	13	14	15	16	17	18
		2,  1,  0, -1,	-2, -2, -2, -1,  0,  1,  2,  2,
		//	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36
		3,  2,  1,  0,  -1, -2, -3, -3, -3, -3, -2, -1,  0,  1,  2,  3,  3,  3,
		//	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60
		4,  3,  2,  1,  0, -1, -2, -3, -4, -4, -4, -4, -4, -3, -2, -1,  0,  1,  2,  3,  4,  4,  4,  4,
		//	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84  85  86  87  88  89  90
		5,  4,  3,  2,  1,  0,  -1, -2, -3, -4, -5, -5, -5, -5, -5, -5, -4, -3, -2, -1,  0,  1,  2,  3, 4,  5,  5,  5,  5,  5,
		// The pattern for the Nth ring is N .. -N, (N-1) * -N, -N .. N, (N-1) * N
	};


	int aiCityPlotPriority[MAX_CITY_PLOTS] =
	{
		0,
		1,  1,  1,  1,  1,  1,
		2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
		4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
		5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
		// The pattern for the Nth ring is (6*N) N
	};


	int aaiRingPlotIndex[2*MAX_CITY_RADIUS+1][2*MAX_CITY_RADIUS+1] =
	{
		// this is the 5 ring layout
		//	 -5  -4  -3  -2  -1   0   1   2   3  4  5  -- in the Y direction
		{-1, -1, -1, -1, -1, 81, 82, 83, 84, 85, 86,}, // -5 hex-space x
		{-1, -1, -1, -1, 80, 53, 54, 55, 56, 57, 87,}, // -4 hex-space x
		{-1, -1, -1, 79, 52, 31, 32, 33, 34, 58, 88,}, // -3 hex-space x
		{-1, -1, 78, 51, 30, 15, 16, 17, 35, 59, 89,}, // -2 hex-space x
		{-1, 77, 50, 29, 14,  5,  6, 18, 36, 60, 90,}, // -1 hex-space x
		{76, 49, 28, 13,  4,  0,  1,  7, 19, 37, 61,}, //  0 hex-space x
		{75, 48, 27, 12,  3,  2,  8, 20, 38, 62, -1,}, //  1 hex-space x
		{74, 47, 26, 11, 10,  9, 21, 39, 63, -1, -1,}, //  2 hex-space x
		{73, 46, 25, 24, 23, 22, 40, 64, -1, -1, -1,}, //  3 hex-space x
		{72, 45, 44, 43, 42, 41, 65, -1, -1, -1, -1,}, //  4 hex-space x
		{71, 70, 69, 68, 67, 66, -1, -1, -1, -1, -1,}, //  5 hex-space x
		// There is no pattern to this, adding a ring requires adding a new row at the top and bottom AND a -1 entry at the start and end of each existing row
	};

	DirectionTypes aeTurnRightDirection[NUM_DIRECTION_TYPES] =
	{
		DIRECTION_EAST,			// DIRECTION_NORTHEAST or DIRECTION_NORTH (deprecated)
		DIRECTION_SOUTHEAST,	// DIRECTION_EAST
		DIRECTION_SOUTHWEST,	// DIRECTION_SOUTHEAST
		DIRECTION_WEST,			// DIRECTION_SOUTHWEST or DIRECTION_SOUTH (deprecated)
		DIRECTION_NORTHWEST,	// DIRECTION_WEST
		DIRECTION_NORTHEAST,	// DIRECTION_NORTHWEST
	};

	DirectionTypes aeTurnLeftDirection[NUM_DIRECTION_TYPES] =
	{
		DIRECTION_NORTHWEST,	// DIRECTION_NORTHEAST or DIRECTION_NORTH (deprecated)
		DIRECTION_NORTHEAST,	// DIRECTION_EAST
		DIRECTION_EAST,			// DIRECTION_SOUTHEAST
		DIRECTION_SOUTHEAST,	// DIRECTION_SOUTHWEST or DIRECTION_SOUTH (deprecated)
		DIRECTION_SOUTHWEST,	// DIRECTION_WEST
		DIRECTION_WEST,			// DIRECTION_NORTHWEST
	};

	CvAssertMsg(gDLL != NULL, "Civ app needs to set gDLL");
	m_asyncRand = FNEW(CvRandom("UiRng"), c_eCiv5GameplayDLL, 0);

	gDLL->InitGlobals();	// some globals need to be allocated outside the dll

	m_game = FNEW(CvGame, c_eCiv5GameplayDLL, 0);
	m_map = FNEW(CvMap, c_eCiv5GameplayDLL, 0);

	m_pEconomicAIStrategies = FNEW(CvEconomicAIStrategyXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pCitySpecializations = FNEW(CvCitySpecializationXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pMilitaryAIStrategies = FNEW(CvMilitaryAIStrategyXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pAIGrandStrategies = FNEW(CvAIGrandStrategyXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pAICityStrategies = FNEW(CvAICityStrategies, c_eCiv5GameplayDLL, 0);
	m_pPolicies = FNEW(CvPolicyXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pTechs = FNEW(CvTechXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pBuildings = FNEW(CvBuildingXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pUnits = FNEW(CvUnitXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pProjects = FNEW(CvProjectXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pPromotions = FNEW(CvPromotionXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pImprovements = FNEW(CvImprovementXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pEmphases = FNEW(CvEmphasisXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pTraits = FNEW(CvTraitXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pReligions = FNEW(CvReligionXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pBeliefs = FNEW(CvBeliefXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pLeagueSpecialSessions = FNEW(CvLeagueSpecialSessionXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pLeagueNames = FNEW(CvLeagueNameXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pLeagueProjects = FNEW(CvLeagueProjectXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pLeagueProjectRewards = FNEW(CvLeagueProjectRewardXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pResolutions = FNEW(CvResolutionXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pNotifications = FNEW(CvNotificationXMLEntries, c_eCiv5GameplayDLL, 0);
#if defined(MOD_API_ACHIEVEMENTS) || defined(ACHIEVEMENT_HACKS)
	m_pAchievements = FNEW(CvAchievementXMLEntries, c_eCiv5GameplayDLL, 0);
#endif
#if defined(MOD_BALANCE_CORE)
	m_pCorporations = FNEW(CvCorporationXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pContracts = FNEW(CvContractXMLEntries, c_eCiv5GameplayDLL, 0);
#endif

	auto_ptr<ICvDLLDatabaseUtility1> pkLoader(getDatabaseLoadUtility());

	Database::Connection* pDB = GetGameDatabase();
	pDB->Execute(m_kGlobalDefinesLookup, "SELECT Value from Defines where Name = ? LIMIT 1");

	pkLoader->PerformDatabasePostProcessing();
	pkLoader->CacheGameDatabaseData();

	GameDataPostProcess();

	CvPlayerAI::initStatics();
	CvTeam::initStatics();

	memcpy(m_aiPlotDirectionX, aiPlotDirectionX, sizeof(m_aiPlotDirectionX));
	memcpy(m_aiPlotDirectionY, aiPlotDirectionY, sizeof(m_aiPlotDirectionY));
	memcpy(m_aiRingPlotXOffset, aiRingPlotXOffset, sizeof(m_aiRingPlotXOffset));
	memcpy(m_aiRingPlotYOffset, aiRingPlotYOffset, sizeof(m_aiRingPlotYOffset));
	memcpy(m_aiCityPlotPriority, aiCityPlotPriority, sizeof(m_aiCityPlotPriority));
	memcpy(m_aeTurnLeftDirection, aeTurnLeftDirection, sizeof(m_aeTurnLeftDirection));
	memcpy(m_aeTurnRightDirection, aeTurnRightDirection, sizeof(m_aeTurnRightDirection));
	memcpy(m_aaiRingPlotIndex, aaiRingPlotIndex, sizeof(m_aaiRingPlotIndex));

	m_pathFinder = new CvTwoLayerPathFinder();
	m_interfacePathFinder = new CvTwoLayerPathFinder();
	m_stepFinder = new CvStepFinder();
}

//
// free
//
void CvGlobals::uninit()
{
	CvPlayerAI::freeStatics();
	CvTeam::freeStatics();

	deleteInfoArrays();

	SAFE_DELETE(m_pEconomicAIStrategies);
	SAFE_DELETE(m_pCitySpecializations);
	SAFE_DELETE(m_pMilitaryAIStrategies);
	SAFE_DELETE(m_pAIGrandStrategies);
	SAFE_DELETE(m_pPolicies);
	SAFE_DELETE(m_pBuildings);
	SAFE_DELETE(m_pUnits);
	SAFE_DELETE(m_pProjects);
	SAFE_DELETE(m_pPromotions);
	SAFE_DELETE(m_pEmphases);
	SAFE_DELETE(m_pTraits);
	SAFE_DELETE(m_pReligions);
	SAFE_DELETE(m_pBeliefs);
#if defined(MOD_BALANCE_CORE)
	SAFE_DELETE(m_pCorporations);
	SAFE_DELETE(m_pContracts);
#endif
	SAFE_DELETE(m_pLeagueSpecialSessions);
	SAFE_DELETE(m_pLeagueNames);
	SAFE_DELETE(m_pLeagueProjects);
	SAFE_DELETE(m_pLeagueProjectRewards);
	SAFE_DELETE(m_pResolutions);
	SAFE_DELETE(m_pNotifications);
#if defined(MOD_API_ACHIEVEMENTS) || defined(ACHIEVEMENT_HACKS)
	SAFE_DELETE(m_pAchievements);
#endif
	SAFE_DELETE(m_pImprovements); // player uses the improvement count in deallocating.
	SAFE_DELETE(m_pTechs);        // improvements uses tech to deallocate. arrghh!

	SAFE_DELETE(m_map);
	SAFE_DELETE(m_game);

	SAFE_DELETE(m_asyncRand);

	m_kGlobalDefinesLookup.Release();

	if(gDLL)
		gDLL->UninitGlobals();	// free globals allocated outside the dll

	SAFE_DELETE(m_pathFinder);
	SAFE_DELETE(m_interfacePathFinder);
	SAFE_DELETE(m_stepFinder);

	// already deleted outside of the dll, set to null for safety
	m_pathFinder=NULL;
	m_interfacePathFinder=NULL;
	m_stepFinder=NULL;
}

//------------------------------------------------------------------------------
CvCity* CvGlobals::UnwrapCityPointer(ICvCity1* pCity)
{
	return (NULL != pCity)? static_cast<CvDllCity*>(pCity)->GetInstance() : NULL;
}
//------------------------------------------------------------------------------
auto_ptr<ICvCity1> CvGlobals::WrapCityPointer(CvCity* pCity)
{
	return auto_ptr<ICvCity1>((NULL != pCity)? new CvDllCity(pCity) : NULL);
}
//------------------------------------------------------------------------------
CvDeal* CvGlobals::UnwrapDealPointer(ICvDeal1* pDeal)
{
	return (NULL != pDeal)? static_cast<CvDllDeal*>(pDeal)->GetInstance() : NULL;
}
//------------------------------------------------------------------------------
auto_ptr<ICvDeal1> CvGlobals::WrapDealPointer(CvDeal* pDeal)
{
	return auto_ptr<ICvDeal1>((NULL != pDeal)? new CvDllDeal(pDeal) : NULL);
}
//------------------------------------------------------------------------------
CvPlot* CvGlobals::UnwrapPlotPointer(ICvPlot1* pPlot)
{
	return (NULL != pPlot)? static_cast<CvDllPlot*>(pPlot)->GetInstance() : NULL;
}
//------------------------------------------------------------------------------
auto_ptr<ICvPlot1> CvGlobals::WrapPlotPointer(CvPlot* pPlot)
{
	return auto_ptr<ICvPlot1>((NULL != pPlot)? new CvDllPlot(pPlot) : NULL);
}
//------------------------------------------------------------------------------
CvRandom* CvGlobals::UnwrapRandomPointer(ICvRandom1* pRandom)
{
	return (NULL != pRandom)? static_cast<CvDllRandom*>(pRandom)->GetInstance() : NULL;
}
//------------------------------------------------------------------------------
auto_ptr<ICvRandom1> CvGlobals::WrapRandomPointer(CvRandom* pRandom)
{
	return auto_ptr<ICvRandom1>((NULL != pRandom)? new CvDllRandom(pRandom) : NULL);
}
//------------------------------------------------------------------------------
auto_ptr<ICvUnit1> CvGlobals::WrapUnitPointer(CvUnit* pUnit)
{
	return auto_ptr<ICvUnit1>((NULL != pUnit)? new CvDllUnit(pUnit) : NULL);
}
//------------------------------------------------------------------------------
CvUnit* CvGlobals::UnwrapUnitPointer(ICvUnit1* pUnit)
{
	return (NULL != pUnit)? static_cast<CvDllUnit*>(pUnit)->GetInstance() : NULL;
}
//------------------------------------------------------------------------------
CvGlobals& CvGlobals::getInstance()
{
	return gGlobals;
}

CvRandom& CvGlobals::getASyncRand()
{
	return *m_asyncRand;
}

void CvGlobals::InitializePathfinders(int iX, int iY, bool bWx, bool bWy)
{
	if (m_pathFinder)
	{
		m_pathFinder->Initialize(iX, iY, bWx, bWy);
		m_pathFinder->SetName("unit pf");
	}
	if (m_interfacePathFinder)
	{
		m_interfacePathFinder->Initialize(iX, iY, bWx, bWy);
		m_interfacePathFinder->SetName("iface pf");
	}
	if (m_stepFinder)
	{
		m_stepFinder->Initialize(iX, iY, bWx, bWy);
		m_stepFinder->SetName("stepfinder");
	}
}

CvTwoLayerPathFinder& CvGlobals::GetPathFinder()
{
	//important, avoid deadlocks
	return gDLL->IsGameCoreThread() ? *m_pathFinder : *m_interfacePathFinder;
}

CvStepFinder& CvGlobals::GetStepFinder()
{
	return *m_stepFinder;
}

ICvDLLDatabaseUtility1* CvGlobals::getDatabaseLoadUtility()
{
	if(m_pkDatabaseLoadUtility == NULL)
		m_pkDatabaseLoadUtility = new CvDllDatabaseUtility(DB);

	//By using query interface, we implicitly increment the reference count and avoid
	//a new allocation.
	return m_pkDatabaseLoadUtility->QueryInterface<ICvDLLDatabaseUtility1>();
}

std::vector<CvInterfaceModeInfo*>& CvGlobals::getInterfaceModeInfo()
{
	return m_paInterfaceModeInfo;
}

CvInterfaceModeInfo* CvGlobals::getInterfaceModeInfo(InterfaceModeTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < NUM_INTERFACEMODE_TYPES);
	if(e > -1 && e < (int)m_paInterfaceModeInfo.size())
		return m_paInterfaceModeInfo[e];
	else
		return NULL;
}

bool CvGlobals::getLogging()
{
	return m_bLogging;
}

void CvGlobals::setLogging(bool bLoggingEnabled)
{
	m_bLogging = bLoggingEnabled;
}

int CvGlobals::getRandLogging()
{
	return m_iRandLogging;
}

void CvGlobals::setRandLogging(int iRandLoggingFlags)
{
	m_iRandLogging = iRandLoggingFlags;
}

bool CvGlobals::getAILogging()
{
	return m_bAILogging;
}

void CvGlobals::setAILogging(bool bEnable)
{
	m_bAILogging = bEnable;
}

bool CvGlobals::getAIPerfLogging()
{
	return m_bAIPerfLogging;
}

void CvGlobals::setAIPerfLogging(bool bEnable)
{
	m_bAIPerfLogging = bEnable;
}

bool CvGlobals::GetBuilderAILogging()
{
	return m_bBuilderAILogging;
}

void CvGlobals::SetBuilderAILogging(bool bEnable)
{
	m_bBuilderAILogging = bEnable;
}

bool CvGlobals::getPlayerAndCityAILogSplit()
{
	return m_bPlayerAndCityAILogSplit;
}

void CvGlobals::setPlayerAndCityAILogSplit(bool bEnable)
{
	m_bPlayerAndCityAILogSplit = bEnable;
}

bool CvGlobals::GetTutorialLogging()
{
	return m_bTutorialLogging;
}

void CvGlobals::SetTutorialLogging(bool bEnable)
{
	m_bTutorialLogging = bEnable;
}

bool CvGlobals::GetTutorialDebugging()
{
	return m_bTutorialDebugging;
}

void CvGlobals::SetTutorialDebugging(bool bEnable)
{
	m_bTutorialDebugging = bEnable;
}

bool CvGlobals::GetAllowRClickMovementWhileScrolling()
{
	return m_bAllowRClickMovementWhileCameraScrolling;
}

void CvGlobals::SetAllowRClickMovementWhileScrolling(bool bAllow)
{
	m_bAllowRClickMovementWhileCameraScrolling = bAllow;
}

bool CvGlobals::GetPostTurnAutosaves()
{
	return m_bPostTurnAutosaves;
}

void CvGlobals::SetPostTurnAutosaves(bool bEnable)
{
	m_bPostTurnAutosaves = bEnable;
}


int* CvGlobals::getCityPlotPriority()
{
	return m_aiCityPlotPriority;
}

int CvGlobals::getRingIterationIndexHex(int i, int j)
{
	CvAssertMsg(i < (2*MAX_CITY_RADIUS+1), "Index out of bounds");
	CvAssertMsg(i > -1, "Index out of bounds");
	if(i < 0 || i >= (2*MAX_CITY_RADIUS+1)) return -1;

	CvAssertMsg(j < (2*MAX_CITY_RADIUS+1), "Index out of bounds");
	CvAssertMsg(j > -1, "Index out of bounds");
	if(j < 0 || j >= (2*MAX_CITY_RADIUS+1)) return -1;

	return m_aaiRingPlotIndex[i][j];
}

DirectionTypes* CvGlobals::getTurnLeftDirection()
{
	return m_aeTurnLeftDirection;
}

DirectionTypes CvGlobals::getTurnLeftDirection(int i)
{
	CvAssertMsg(i < NUM_DIRECTION_TYPES, "Index out of bounds");
	CvAssertMsg(i > -1, "Index out of bounds");

	if(i < 0 || i >= NUM_DIRECTION_TYPES) return NO_DIRECTION;

	return m_aeTurnLeftDirection[i];
}

DirectionTypes* CvGlobals::getTurnRightDirection()
{
	return m_aeTurnRightDirection;
}

DirectionTypes CvGlobals::getTurnRightDirection(int i)
{
	CvAssertMsg(i < NUM_DIRECTION_TYPES, "Index out of bounds");
	CvAssertMsg(i > -1, "Index out of bounds");

	if(i < 0 || i >= NUM_DIRECTION_TYPES) return NO_DIRECTION;

	return m_aeTurnRightDirection[i];
}

int CvGlobals::getNumWorldInfos()
{
	return GetGameDatabase()->Count("Worlds");
}

int CvGlobals::getNumClimateInfos()
{
	return GetGameDatabase()->Count("Climates");
}

int CvGlobals::getNumSeaLevelInfos()
{
	return GetGameDatabase()->Count("SeaLevels");
}

int CvGlobals::GetNumColorInfos()
{
	return (int)m_paColorInfo.size();
}

std::vector<CvColorInfo*>& CvGlobals::GetColorInfo()
{
	return m_paColorInfo;
}

CvColorInfo* CvGlobals::GetColorInfo(ColorTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GetNumColorInfos());
	if(e > -1 && e < (int)m_paColorInfo.size())
		return m_paColorInfo[e];
	else
		return NULL;
}


int CvGlobals::GetNumPlayerColorInfos()
{
	return (int)m_paPlayerColorInfo.size();
}

std::vector<CvPlayerColorInfo*>& CvGlobals::GetPlayerColorInfo()
{
	return m_paPlayerColorInfo;
}

CvPlayerColorInfo* CvGlobals::GetPlayerColorInfo(PlayerColorTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GetNumPlayerColorInfos());
	if(e > -1 && e < (int)m_paPlayerColorInfo.size())
		return m_paPlayerColorInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumEntityEventInfos()
{
	return (int)m_paEntityEventInfo.size();
}

std::vector<CvEntityEventInfo*>& CvGlobals::getEntityEventInfo()
{
	return m_paEntityEventInfo;
}

CvEntityEventInfo* CvGlobals::getEntityEventInfo(EntityEventTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumEntityEventInfos());
	if(e > -1 && e < (int)m_paEntityEventInfo.size())
		return m_paEntityEventInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumMultiUnitFormationInfos()
{
	return (int)m_paMultiUnitFormationInfo.size();
}

std::vector<CvMultiUnitFormationInfo*>& CvGlobals::getMultiUnitFormationInfo()
{
	return m_paMultiUnitFormationInfo;
}

CvMultiUnitFormationInfo* CvGlobals::getMultiUnitFormationInfo(int i)
{
	CvAssert(i > -1);
	CvAssert(i < GC.getNumMultiUnitFormationInfos());
	if(i > -1 && i < (int)m_paMultiUnitFormationInfo.size())
		return m_paMultiUnitFormationInfo[i];
	else
		return NULL;
}

#if defined(MOD_API_PLOT_YIELDS)
int CvGlobals::getNumPlotInfos()
{
	return MOD_API_PLOT_YIELDS ? (int)m_paPlotInfo.size() : 0;
}

std::vector<CvPlotInfo*>& CvGlobals::getPlotInfo()
{
	return m_paPlotInfo;
}

CvPlotInfo* CvGlobals::getPlotInfo(PlotTypes ePlotNum)
{
	if (MOD_API_PLOT_YIELDS) {
		CvAssert(ePlotNum > -1);
		CvAssert(ePlotNum < GC.getNumPlotInfos());
		if(ePlotNum > -1 && ePlotNum < (int)m_paPlotInfo.size())
			return m_paPlotInfo[ePlotNum];
		else
			return NULL;
	} else {
		return NULL;
	}
}
#endif

#if defined(MOD_API_UNIFIED_YIELDS)
int CvGlobals::getNumGreatPersonInfos()
{
	return MOD_API_UNIFIED_YIELDS ? (int)m_paGreatPersonInfo.size() : 0;
}

std::vector<CvGreatPersonInfo*>& CvGlobals::getGreatPersonInfo()
{
	return m_paGreatPersonInfo;
}

CvGreatPersonInfo* CvGlobals::getGreatPersonInfo(GreatPersonTypes eGreatPersonNum)
{
	if (MOD_API_UNIFIED_YIELDS) {
		CvAssert(eGreatPersonNum > -1);
		CvAssert(eGreatPersonNum < GC.getNumGreatPersonInfos());
		if(eGreatPersonNum > -1 && eGreatPersonNum < (int)m_paGreatPersonInfo.size())
			return m_paGreatPersonInfo[eGreatPersonNum];
		else
			return NULL;
	} else {
		return NULL;
	}
}
#endif

int CvGlobals::getNumTerrainInfos()
{
	return (int)m_paTerrainInfo.size();
}

std::vector<CvTerrainInfo*>& CvGlobals::getTerrainInfo()
{
	return m_paTerrainInfo;
}

CvTerrainInfo* CvGlobals::getTerrainInfo(TerrainTypes eTerrainNum)
{
	CvAssert(eTerrainNum > -1);
	CvAssert(eTerrainNum < GC.getNumTerrainInfos());
	if(eTerrainNum > -1 && eTerrainNum < (int)m_paTerrainInfo.size())
		return m_paTerrainInfo[eTerrainNum];
	else
		return NULL;
}

int CvGlobals::getNumResourceClassInfos()
{
	return (int)m_paResourceClassInfo.size();
}

std::vector<CvResourceClassInfo*>& CvGlobals::getResourceClassInfo()
{
	return m_paResourceClassInfo;
}

CvResourceClassInfo* CvGlobals::getResourceClassInfo(ResourceClassTypes eResourceNum)
{
	CvAssert(eResourceNum > -1);
	CvAssert(eResourceNum < GC.getNumResourceClassInfos());
	if(eResourceNum > -1 && eResourceNum < (int)m_paResourceClassInfo.size())
		return m_paResourceClassInfo[eResourceNum];
	else
		return NULL;
}


int CvGlobals::getNumResourceInfos()
{
	return (int)m_paResourceInfo.size();
}

std::vector<CvResourceInfo*>& CvGlobals::getResourceInfo()
{
	return m_paResourceInfo;
}

CvResourceInfo* CvGlobals::getResourceInfo(ResourceTypes eResourceNum)
{
	CvAssert(eResourceNum > -1);
	CvAssert(eResourceNum < GC.getNumResourceInfos());
	if(eResourceNum > -1 && eResourceNum < (int)m_paResourceInfo.size())
		return m_paResourceInfo[eResourceNum];
	else
		return NULL;
}

int CvGlobals::getNumFeatureInfos()
{
	return (int)m_paFeatureInfo.size();
}

std::vector<CvFeatureInfo*>& CvGlobals::getFeatureInfo()
{
	return m_paFeatureInfo;
}

CvFeatureInfo* CvGlobals::getFeatureInfo(FeatureTypes eFeatureNum)
{
	CvAssert(eFeatureNum > -1);
	CvAssert(eFeatureNum < GC.getNumFeatureInfos());
	if(eFeatureNum > -1 && eFeatureNum < (int)m_paFeatureInfo.size())
		return m_paFeatureInfo[eFeatureNum];
	else
		return NULL;
}

int& CvGlobals::getNumPlayableCivilizationInfos()
{
	return m_iNumPlayableCivilizationInfos;
}

int& CvGlobals::getNumAIPlayableCivilizationInfos()
{
	return m_iNumAIPlayableCivilizationInfos;
}

int CvGlobals::getNumCivilizationInfos()
{
	return (int)m_paCivilizationInfo.size();
}

std::vector<CvCivilizationInfo*>& CvGlobals::getCivilizationInfo()
{
	return m_paCivilizationInfo;
}

CvCivilizationInfo* CvGlobals::getCivilizationInfo(CivilizationTypes eCivilizationNum)
{
	CvAssert(eCivilizationNum > -1);
	CvAssert(eCivilizationNum < GC.getNumCivilizationInfos());
	if(eCivilizationNum > -1 && eCivilizationNum < (int)m_paCivilizationInfo.size())
		return m_paCivilizationInfo[eCivilizationNum];
	else
		return NULL;
}

CivilizationTypes CvGlobals::getCivilizationInfoIndex(const char* pszType)
{
	CvAssert(pszType != NULL);
	if(pszType != NULL)
	{
		int iIndex = 0;
		for(std::vector<CvCivilizationInfo*>::iterator itr = m_paCivilizationInfo.begin(); itr != m_paCivilizationInfo.end(); ++itr, ++iIndex)
		{
			const char* szType = (*itr)->GetType();
			if(szType && strcmp(szType, pszType) == 0)
				return (CivilizationTypes)iIndex;
		}
	}
	return NO_CIVILIZATION;
}

int CvGlobals::getNumMinorCivInfos()
{
	return (int)m_paMinorCivInfo.size();
}

int CvGlobals::GetNumPlayableMinorCivs() const
{
	int iFound = 0;
	int iCurrentMinorIndex = 0;

	for(; iCurrentMinorIndex < (int)m_paMinorCivInfo.size(); iCurrentMinorIndex++)
	{
		if(m_paMinorCivInfo[iCurrentMinorIndex] != NULL)
		{
			iFound++;
		}
	}

	return iFound;
}

std::vector<CvMinorCivInfo*>& CvGlobals::getMinorCivInfo()
{
	return m_paMinorCivInfo;
}

CvMinorCivInfo* CvGlobals::getMinorCivInfo(MinorCivTypes eMinorCivNum)
{
	CvAssert(eMinorCivNum > -1);
	CvAssert(eMinorCivNum < GC.getNumMinorCivInfos());
	if(eMinorCivNum > -1 && eMinorCivNum < (int)m_paMinorCivInfo.size())
		return m_paMinorCivInfo[eMinorCivNum];
	else
		return NULL;
}

int CvGlobals::getNumLeaderHeadInfos()
{
	return (int)m_paLeaderHeadInfo.size();
}

std::vector<CvLeaderHeadInfo*>& CvGlobals::getLeaderHeadInfo()
{
	return m_paLeaderHeadInfo;
}

CvLeaderHeadInfo* CvGlobals::getLeaderHeadInfo(LeaderHeadTypes eLeaderHeadNum)
{
	CvAssert(eLeaderHeadNum > -1);
	CvAssert(eLeaderHeadNum < GC.getNumLeaderHeadInfos());
	if(eLeaderHeadNum > -1 && eLeaderHeadNum < (int)m_paLeaderHeadInfo.size())
		return m_paLeaderHeadInfo[eLeaderHeadNum];
	else
		return NULL;
}

int CvGlobals::getNumUnitInfos()
{
	return m_pUnits->GetNumUnits();
}

std::vector<CvUnitEntry*>& CvGlobals::getUnitInfo()
{
	return m_pUnits->GetUnitEntries();
}

CvUnitEntry* CvGlobals::getUnitInfo(UnitTypes eUnitNum)
{
	CvAssert(eUnitNum > -1);
	CvAssert(eUnitNum < GC.getNumUnitInfos());
	if(eUnitNum > -1 && eUnitNum < GC.getNumUnitInfos())
		return m_pUnits->GetUnitEntries()[eUnitNum];
	else
		return NULL;
}

CvUnitXMLEntries* CvGlobals::GetGameUnits() const
{
	return m_pUnits;
}

int CvGlobals::getNumSpecialUnitInfos()
{
	return (int)m_paSpecialUnitInfo.size();
}

std::vector<CvSpecialUnitInfo*>& CvGlobals::getSpecialUnitInfo()
{
	return m_paSpecialUnitInfo;
}

CvSpecialUnitInfo* CvGlobals::getSpecialUnitInfo(SpecialUnitTypes eSpecialUnitNum)
{
	CvAssert(eSpecialUnitNum > -1);
	CvAssert(eSpecialUnitNum < GC.getNumSpecialUnitInfos());
	if(eSpecialUnitNum > -1 && eSpecialUnitNum < (int)m_paSpecialUnitInfo.size())
		return m_paSpecialUnitInfo[eSpecialUnitNum];
	else
		return NULL;
}

int CvGlobals::getNumVoteSourceInfos()
{
	return (int)m_paVoteSourceInfo.size();
}

std::vector<CvVoteSourceInfo*>& CvGlobals::getVoteSourceInfo()
{
	return m_paVoteSourceInfo;
}

CvVoteSourceInfo* CvGlobals::getVoteSourceInfo(VoteSourceTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumVoteSourceInfos());
	if(e > -1 && e < (int)m_paVoteSourceInfo.size())
		return m_paVoteSourceInfo[e];
	else
		return NULL;
}

#if defined(MOD_BALANCE_CORE_EVENTS)
int CvGlobals::getNumEventInfos()
{
	return (int)m_paEventInfo.size();
}

std::vector<CvModEventInfo*>& CvGlobals::getEventInfo()
{
	return m_paEventInfo;
}

CvModEventInfo* CvGlobals::getEventInfo(EventTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumEventInfos());
	if(e > -1 && e < (int)m_paEventInfo.size())
		return m_paEventInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumEventChoiceInfos()
{
	return (int)m_paEventChoiceInfo.size();
}

std::vector<CvModEventChoiceInfo*>& CvGlobals::getEventChoiceInfo()
{
	return m_paEventChoiceInfo;
}

CvModEventChoiceInfo* CvGlobals::getEventChoiceInfo(EventChoiceTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumEventChoiceInfos());
	if(e > -1 && e < (int)m_paEventChoiceInfo.size())
		return m_paEventChoiceInfo[e];
	else
		return NULL;
}
int CvGlobals::getNumCityEventInfos()
{
	return (int)m_paCityEventInfo.size();
}

std::vector<CvModCityEventInfo*>& CvGlobals::getCityEventInfo()
{
	return m_paCityEventInfo;
}

CvModCityEventInfo* CvGlobals::getCityEventInfo(CityEventTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumCityEventInfos());
	if(e > -1 && e < (int)m_paCityEventInfo.size())
		return m_paCityEventInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumCityEventChoiceInfos()
{
	return (int)m_paCityEventChoiceInfo.size();
}

std::vector<CvModEventCityChoiceInfo*>& CvGlobals::getCityEventChoiceInfo()
{
	return m_paCityEventChoiceInfo;
}

CvModEventCityChoiceInfo* CvGlobals::getCityEventChoiceInfo(CityEventChoiceTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumCityEventChoiceInfos());
	if(e > -1 && e < (int)m_paCityEventChoiceInfo.size())
		return m_paCityEventChoiceInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumEventLinkingInfos()
{
	return (int)m_paEventLinkingInfo.size();
}

std::vector<CvEventLinkingInfo*>& CvGlobals::getEventLinkingInfo()
{
	return m_paEventLinkingInfo;
}

CvEventLinkingInfo* CvGlobals::getEventLinkingInfo(EventTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumEventLinkingInfos());
	if(e > -1 && e < (int)m_paEventLinkingInfo.size())
		return m_paEventLinkingInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumEventChoiceLinkingInfos()
{
	return (int)m_paEventChoiceLinkingInfo.size();
}

std::vector<CvEventChoiceLinkingInfo*>& CvGlobals::getEventChoiceLinkingInfo()
{
	return m_paEventChoiceLinkingInfo;
}

CvEventChoiceLinkingInfo* CvGlobals::getEventChoiceLinkingInfo(EventChoiceTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumEventChoiceLinkingInfos());
	if(e > -1 && e < (int)m_paEventChoiceLinkingInfo.size())
		return m_paEventChoiceLinkingInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumCityEventLinkingInfos()
{
	return (int)m_paCityEventLinkingInfo.size();
}

std::vector<CvCityEventLinkingInfo*>& CvGlobals::getCityEventLinkingInfo()
{
	return m_paCityEventLinkingInfo;
}

CvCityEventLinkingInfo* CvGlobals::getCityEventLinkingInfo(CityEventTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumCityEventLinkingInfos());
	if(e > -1 && e < (int)m_paCityEventLinkingInfo.size())
		return m_paCityEventLinkingInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumCityEventChoiceLinkingInfos()
{
	return (int)m_paCityEventChoiceLinkingInfo.size();
}

std::vector<CvCityEventChoiceLinkingInfo*>& CvGlobals::getCityEventChoiceLinkingInfo()
{
	return m_paCityEventChoiceLinkingInfo;
}

CvCityEventChoiceLinkingInfo* CvGlobals::getCityEventChoiceLinkingInfo(CityEventChoiceTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumCityEventChoiceLinkingInfos());
	if(e > -1 && e < (int)m_paCityEventChoiceLinkingInfo.size())
		return m_paCityEventChoiceLinkingInfo[e];
	else
		return NULL;
}
#endif

int CvGlobals::getNumUnitCombatClassInfos()
{
	return (int)m_paUnitCombatClassInfo.size();
}

std::vector<CvBaseInfo*>& CvGlobals::getUnitCombatClassInfo()
{
	return m_paUnitCombatClassInfo;
}

CvBaseInfo* CvGlobals::getUnitCombatClassInfo(UnitCombatTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumUnitCombatClassInfos());
	if(e > -1 && e < (int)m_paUnitCombatClassInfo.size())
		return m_paUnitCombatClassInfo[e];
	else
		return NULL;
}

std::vector<CvBaseInfo*>& CvGlobals::getUnitAIInfo()
{
	return m_paUnitAIInfos;
}

CvBaseInfo* CvGlobals::getUnitAIInfo(UnitAITypes eUnitAINum)
{
	CvAssert(eUnitAINum >= 0);
	CvAssert(eUnitAINum < NUM_UNITAI_TYPES);
	if(eUnitAINum > -1 && eUnitAINum < (int)m_paUnitAIInfos.size())
		return m_paUnitAIInfos[eUnitAINum];
	else
		return NULL;
}

int CvGlobals::getNumGameOptionInfos()
{
	return (int)m_paGameOptionInfos.size();
}

std::vector<CvGameOptionInfo*>& CvGlobals::getGameOptionInfo()
{
	return m_paGameOptionInfos;
}

CvGameOptionInfo* CvGlobals::getGameOptionInfo(GameOptionTypes eGameOptionNum)
{
	CvAssert(eGameOptionNum >= 0);
	CvAssert(eGameOptionNum < GC.getNumGameOptionInfos());
	if(eGameOptionNum > -1 && eGameOptionNum < (int)m_paGameOptionInfos.size())
		return m_paGameOptionInfos[eGameOptionNum];
	else
		return NULL;
}

int CvGlobals::getNumMPOptionInfos()
{
	return (int)m_paMPOptionInfos.size();
}

std::vector<CvMPOptionInfo*>& CvGlobals::getMPOptionInfo()
{
	return m_paMPOptionInfos;
}

CvMPOptionInfo* CvGlobals::getMPOptionInfo(MultiplayerOptionTypes eMPOptionNum)
{
	CvAssert(eMPOptionNum >= 0);
	CvAssert(eMPOptionNum < GC.getNumMPOptionInfos());
	if(eMPOptionNum > -1 && eMPOptionNum < (int)m_paMPOptionInfos.size())
		return m_paMPOptionInfos[eMPOptionNum];
	else
		return NULL;
}

std::vector<CvPlayerOptionInfo*>& CvGlobals::getPlayerOptionInfo()
{
	return m_paPlayerOptionInfos;
}

CvPlayerOptionInfo* CvGlobals::getPlayerOptionInfo(PlayerOptionTypes ePlayerOptionNum)
{
	CvAssert(ePlayerOptionNum >= 0);
	if(ePlayerOptionNum > -1 && ePlayerOptionNum < (int)m_paPlayerOptionInfos.size())
		return m_paPlayerOptionInfos[ePlayerOptionNum];
	else
		return NULL;
}

std::vector<CvYieldInfo*>& CvGlobals::getYieldInfo()
{
	return m_paYieldInfo;
}

CvYieldInfo* CvGlobals::getYieldInfo(YieldTypes eYieldNum)
{
	CvAssert(eYieldNum > -1);
	CvAssert(eYieldNum < NUM_YIELD_TYPES);
	if(eYieldNum > -1 && eYieldNum < (int)m_paYieldInfo.size())
		return m_paYieldInfo[eYieldNum];
	else
		return NULL;
}

int CvGlobals::getNumRouteInfos()
{
	return (int)m_paRouteInfo.size();
}

std::vector<CvRouteInfo*>& CvGlobals::getRouteInfo()
{
	return m_paRouteInfo;
}

CvRouteInfo* CvGlobals::getRouteInfo(RouteTypes eRouteNum)
{
	CvAssert(eRouteNum > -1);
	CvAssert(eRouteNum < GC.getNumRouteInfos());
	if(eRouteNum > -1 && eRouteNum < (int)m_paRouteInfo.size())
		return m_paRouteInfo[eRouteNum];
	else
		return NULL;
}

int CvGlobals::getNumImprovementInfos()
{
	return m_pImprovements->GetNumImprovements();
}

std::vector<CvImprovementEntry*>& CvGlobals::getImprovementInfo()
{
	return m_pImprovements->GetImprovementEntries();
}

CvImprovementEntry* CvGlobals::getImprovementInfo(ImprovementTypes eImprovementNum)
{
	CvAssert(eImprovementNum > -1);
	CvAssert(eImprovementNum < GC.getNumImprovementInfos());
	if(eImprovementNum > -1 && eImprovementNum < GC.getNumImprovementInfos())
		return m_pImprovements->GetImprovementEntries()[eImprovementNum];
	else
		return NULL;
}

CvImprovementXMLEntries* CvGlobals::GetGameImprovements() const
{
	return m_pImprovements;
}

int CvGlobals::getNumBuildInfos()
{
	return (int)m_paBuildInfo.size();
}

std::vector<CvBuildInfo*>& CvGlobals::getBuildInfo()
{
	return m_paBuildInfo;
}

CvBuildInfo* CvGlobals::getBuildInfo(BuildTypes eBuildNum)
{
	CvAssert(eBuildNum > -1);
	CvAssert(eBuildNum < GC.getNumBuildInfos());
	if(eBuildNum > -1 && eBuildNum < (int)m_paBuildInfo.size())
		return m_paBuildInfo[eBuildNum];
	else
		return NULL;
}

int CvGlobals::getNumHandicapInfos()
{
	return (int)m_paHandicapInfo.size();
}

std::vector<CvHandicapInfo*>& CvGlobals::getHandicapInfo()
{
	return m_paHandicapInfo;
}

CvHandicapInfo* CvGlobals::getHandicapInfo(HandicapTypes eHandicapNum)
{
	CvAssert(eHandicapNum > -1);
	CvAssert(eHandicapNum < GC.getNumHandicapInfos());
	if(eHandicapNum > -1 && eHandicapNum < (int)m_paHandicapInfo.size())
		return m_paHandicapInfo[eHandicapNum];
	else
		return NULL;
}

int CvGlobals::getNumGameSpeedInfos()
{
	return (int)m_paGameSpeedInfo.size();
}

std::vector<CvGameSpeedInfo*>& CvGlobals::getGameSpeedInfo()
{
	return m_paGameSpeedInfo;
}

CvGameSpeedInfo* CvGlobals::getGameSpeedInfo(GameSpeedTypes eGameSpeedNum)
{
	CvAssert(eGameSpeedNum > -1);
	CvAssert(eGameSpeedNum < GC.getNumGameSpeedInfos());
	if(eGameSpeedNum > -1 && eGameSpeedNum < (int)m_paGameSpeedInfo.size())
		return m_paGameSpeedInfo[eGameSpeedNum];
	else
		return NULL;
}

#if defined(MOD_EVENTS_DIPLO_MODIFIERS)
int CvGlobals::getNumDiploModifierInfos()
{
	return (int)m_paDiploModifierInfo.size();
}

std::vector<CvDiploModifierInfo*>& CvGlobals::getDiploModifierInfo()
{
	return m_paDiploModifierInfo;
}

CvDiploModifierInfo* CvGlobals::getDiploModifierInfo(DiploModifierTypes eDiploModifierNum)
{
	CvAssert(eDiploModifierNum > -1);
	CvAssert(eDiploModifierNum < GC.getNumDiploModifierInfos());
	if(eDiploModifierNum > -1 && eDiploModifierNum < (int)m_paDiploModifierInfo.size())
		return m_paDiploModifierInfo[eDiploModifierNum];
	else
		return NULL;
}

#endif

int CvGlobals::getNumProcessInfos()
{
	return (int)m_paProcessInfo.size();
}

std::vector<CvProcessInfo*>& CvGlobals::getProcessInfo()
{
	return m_paProcessInfo;
}

CvProcessInfo* CvGlobals::getProcessInfo(ProcessTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumProcessInfos());
	if(e > -1 && e < (int)m_paProcessInfo.size())
		return m_paProcessInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumVoteInfos()
{
	return (int)m_paVoteInfo.size();
}

std::vector<CvVoteInfo*>& CvGlobals::getVoteInfo()
{
	return m_paVoteInfo;
}

CvVoteInfo* CvGlobals::getVoteInfo(VoteTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumVoteInfos());
	if(e > -1 && e < (int)m_paVoteInfo.size())
		return m_paVoteInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumProjectInfos()
{
	return m_pProjects->GetNumProjects();
}

std::vector<CvProjectEntry*>& CvGlobals::getProjectInfo()
{
	return m_pProjects->GetProjectEntries();
}

CvProjectEntry* CvGlobals::getProjectInfo(ProjectTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumProjectInfos());
	if(e > -1 && e < GC.getNumProjectInfos())
		return m_pProjects->GetProjectEntries()[e];
	else
		return NULL;
}

CvProjectXMLEntries* CvGlobals::GetGameProjects() const
{
	return m_pProjects;
}

int CvGlobals::getNumBuildingClassInfos()
{
	return (int)m_paBuildingClassInfo.size();
}

std::vector<CvBuildingClassInfo*>& CvGlobals::getBuildingClassInfo()
{
	return m_paBuildingClassInfo;
}

CvBuildingClassInfo* CvGlobals::getBuildingClassInfo(BuildingClassTypes eBuildingClassNum)
{
	CvAssert(eBuildingClassNum > -1);
	CvAssert(eBuildingClassNum < GC.getNumBuildingClassInfos());
	if(eBuildingClassNum > -1 && eBuildingClassNum < (int)m_paBuildingClassInfo.size())
		return m_paBuildingClassInfo[eBuildingClassNum];
	else
		return NULL;
}

int CvGlobals::getNumBuildingInfos()
{
	return m_pBuildings->GetNumBuildings();
}

std::vector<CvBuildingEntry*>& CvGlobals::getBuildingInfo()
{
	return m_pBuildings->GetBuildingEntries();
}

CvBuildingEntry* CvGlobals::getBuildingInfo(BuildingTypes eBuildingNum)
{
	CvAssert(eBuildingNum > -1);
	CvAssert(eBuildingNum < GC.getNumBuildingInfos());
	if(eBuildingNum > -1 && eBuildingNum < GC.getNumBuildingInfos())
		return m_pBuildings->GetBuildingEntries()[eBuildingNum];
	else
		return NULL;
}

CvBuildingXMLEntries* CvGlobals::GetGameBuildings() const
{
	return m_pBuildings;
}

void CvGlobals::GameDataPostProcess()
{
	for (int iI = 0; iI < getNumBuildingInfos(); iI++)
	{
		const BuildingTypes eOuter = static_cast<BuildingTypes>(iI);
		CvBuildingEntry* pOuter = GC.getBuildingInfo(eOuter);
		if (pOuter==NULL)
			continue;

		for (int iJ = 0; iJ < getNumBuildingInfos(); iJ++)
		{
			const BuildingTypes eInner = static_cast<BuildingTypes>(iJ);
			CvBuildingEntry* pInner = GC.getBuildingInfo(eInner);
			if (pInner==NULL)
				continue;

			bool bHasInteraction = false;
			for (int iK = 0; iK < NUM_YIELD_TYPES; iK++)
			{
				YieldTypes eYield = (YieldTypes)iK;

				if (pOuter->GetBuildingClassYieldChange(pInner->GetBuildingClassType(), eYield) > 0)
					bHasInteraction = true;
				if (pOuter->GetBuildingClassLocalYieldChange(pInner->GetBuildingClassType(), eYield) > 0)
					bHasInteraction = true;
				if (pOuter->GetBuildingClassYieldModifier(pInner->GetBuildingClassType(), eYield) > 0)
					bHasInteraction = true;
			}

			if (bHasInteraction)
				m_buildingInteractionLookup[eOuter].push_back(eInner);
		}
	}
}

const vector<BuildingTypes>& CvGlobals::getBuildingInteractions(BuildingTypes eRefBuilding) const
{
	static vector<BuildingTypes> emptyResult;

	map<BuildingTypes, vector<BuildingTypes>>::const_iterator it = m_buildingInteractionLookup.find(eRefBuilding);
	if (it != m_buildingInteractionLookup.end())
		return it->second;
	else
		return emptyResult;
}

int CvGlobals::getNumUnitClassInfos()
{
	return (int)m_paUnitClassInfo.size();
}

std::vector<CvUnitClassInfo*>& CvGlobals::getUnitClassInfo()
{
	return m_paUnitClassInfo;
}

CvUnitClassInfo* CvGlobals::getUnitClassInfo(UnitClassTypes eUnitClassNum)
{
	CvAssert(eUnitClassNum > -1);
	CvAssert(eUnitClassNum < GC.getNumUnitClassInfos());
	if(eUnitClassNum > -1 && eUnitClassNum < (int)m_paUnitClassInfo.size())
		return m_paUnitClassInfo[eUnitClassNum];
	else
		return NULL;
}

int CvGlobals::getNumActionInfos()
{
	return (int)m_paActionInfo.size();
}

std::vector<CvActionInfo*>& CvGlobals::getActionInfo()
{
	return m_paActionInfo;
}

CvActionInfo* CvGlobals::getActionInfo(int i)
{
	CvAssertMsg(i < getNumActionInfos(), "Index out of bounds");
	CvAssertMsg(i > -1, "Index out of bounds");
	if(i > -1 && i < (int)m_paActionInfo.size())
		return m_paActionInfo[i];
	else
		return NULL;
}

std::vector<CvMissionInfo*>& CvGlobals::getMissionInfo()
{
	return m_paMissionInfo;
}

CvMissionInfo* CvGlobals::getMissionInfo(MissionTypes eMissionNum)
{
	CvAssert(eMissionNum > -1);
	CvAssert(static_cast<unsigned int>(eMissionNum) < CvTypes::getNUM_MISSION_TYPES());
	if(eMissionNum > -1 && eMissionNum < (int)m_paMissionInfo.size())
		return m_paMissionInfo[eMissionNum];
	else
		return NULL;
}

std::vector<CvControlInfo*>& CvGlobals::getControlInfo()
{
	return m_paControlInfo;
}

CvControlInfo* CvGlobals::getControlInfo(ControlTypes eControlNum)
{
	CvAssert(eControlNum > -1);
	CvAssert(eControlNum < NUM_CONTROL_TYPES);
	if(eControlNum > -1 && eControlNum < (int)m_paControlInfo.size())
		return m_paControlInfo[eControlNum];
	else
		return NULL;
}

std::vector<CvCommandInfo*>& CvGlobals::getCommandInfo()
{
	return m_paCommandInfo;
}

CvCommandInfo* CvGlobals::getCommandInfo(CommandTypes eCommandNum)
{
	CvAssert(eCommandNum > -1);
	CvAssert(eCommandNum < NUM_COMMAND_TYPES);
	if(eCommandNum > -1 && eCommandNum < (int)m_paCommandInfo.size())
		return m_paCommandInfo[eCommandNum];
	else
		return NULL;
}

int CvGlobals::getNumAutomateInfos()
{
	return (int)m_paAutomateInfo.size();
}

std::vector<CvAutomateInfo*>& CvGlobals::getAutomateInfo()
{
	return m_paAutomateInfo;
}

CvAutomateInfo* CvGlobals::getAutomateInfo(int iAutomateNum)
{
	CvAssertMsg(iAutomateNum < getNumAutomateInfos(), "Index out of bounds");
	CvAssertMsg(iAutomateNum > -1, "Index out of bounds");
	if(iAutomateNum > -1 && iAutomateNum < (int)m_paAutomateInfo.size())
		return m_paAutomateInfo[iAutomateNum];
	else
		return NULL;
}

int CvGlobals::getNumPromotionInfos()
{
	return (int)m_pPromotions->GetPromotionEntries().size();
}

std::vector<CvPromotionEntry*>& CvGlobals::getPromotionInfo()
{
	return m_pPromotions->GetPromotionEntries();
}

CvPromotionEntry* CvGlobals::getPromotionInfo(PromotionTypes ePromotionNum)
{
	CvAssert(ePromotionNum > -1);
	CvAssert(ePromotionNum < GC.getNumPromotionInfos());
	if(ePromotionNum > -1 && ePromotionNum < GC.getNumPromotionInfos())
		return m_pPromotions->GetPromotionEntries()[ePromotionNum];
	else
		return NULL;
}

CvPromotionXMLEntries* CvGlobals::GetGamePromotions() const
{
	return m_pPromotions;
}

int CvGlobals::getNumSpecialistInfos()
{
	return (int)m_paSpecialistInfo.size();
}

std::vector<CvSpecialistInfo*>& CvGlobals::getSpecialistInfo()
{
	return m_paSpecialistInfo;
}

CvSpecialistInfo* CvGlobals::getSpecialistInfo(SpecialistTypes eSpecialistNum)
{
	CvAssert(eSpecialistNum > -1);
	CvAssert(eSpecialistNum < GC.getNumSpecialistInfos());
	if(eSpecialistNum > -1 && eSpecialistNum < (int)m_paSpecialistInfo.size())
		return m_paSpecialistInfo[eSpecialistNum];
	else
		return NULL;
}

int CvGlobals::getNumEconomicAIStrategyInfos()
{
	return (int)m_pEconomicAIStrategies->GetEconomicAIStrategyEntries().size();
}

std::vector<CvEconomicAIStrategyXMLEntry*>& CvGlobals::getEconomicAIStrategyInfo()
{
	return m_pEconomicAIStrategies->GetEconomicAIStrategyEntries();
}

CvEconomicAIStrategyXMLEntry* CvGlobals::getEconomicAIStrategyInfo(EconomicAIStrategyTypes eAIStrategyNum)
{
	FAssert(eAIStrategyNum > -1);
	FAssert(eAIStrategyNum < GC.getNumEconomicAIStrategyInfos());
	if(eAIStrategyNum > -1 && eAIStrategyNum < GC.getNumEconomicAIStrategyInfos())
		return m_pEconomicAIStrategies->GetEconomicAIStrategyEntries()[eAIStrategyNum];
	else
		return NULL;
}

CvEconomicAIStrategyXMLEntries* CvGlobals::GetGameEconomicAIStrategies() const
{
	return m_pEconomicAIStrategies;
}

int CvGlobals::getNumCitySpecializationInfos()
{
	return (int)m_pCitySpecializations->GetCitySpecializationEntries().size();
}

std::vector<CvCitySpecializationXMLEntry*>& CvGlobals::getCitySpecializationInfo()
{
	return m_pCitySpecializations->GetCitySpecializationEntries();
}

CvCitySpecializationXMLEntry* CvGlobals::getCitySpecializationInfo(CitySpecializationTypes eCitySpecialization)
{
	CvAssert(eCitySpecialization > -1);
	CvAssert(eCitySpecialization < GC.getNumCitySpecializationInfos());
	if(eCitySpecialization > -1 && eCitySpecialization < GC.getNumCitySpecializationInfos())
		return m_pCitySpecializations->GetCitySpecializationEntries()[eCitySpecialization];
	else
		return NULL;
}

CvCitySpecializationXMLEntries* CvGlobals::GetGameCitySpecializations() const
{
	return m_pCitySpecializations;
}

int CvGlobals::getNumMilitaryAIStrategyInfos()
{
	return (int)m_pMilitaryAIStrategies->GetMilitaryAIStrategyEntries().size();
}

std::vector<CvMilitaryAIStrategyXMLEntry*>& CvGlobals::getMilitaryAIStrategyInfo()
{
	return m_pMilitaryAIStrategies->GetMilitaryAIStrategyEntries();
}

CvMilitaryAIStrategyXMLEntry* CvGlobals::getMilitaryAIStrategyInfo(MilitaryAIStrategyTypes eAIStrategyNum)
{
	FAssert(eAIStrategyNum < GC.getNumMilitaryAIStrategyInfos());
	return m_pMilitaryAIStrategies->GetMilitaryAIStrategyEntries()[eAIStrategyNum];
}

CvMilitaryAIStrategyXMLEntries* CvGlobals::GetGameMilitaryAIStrategies() const
{
	return m_pMilitaryAIStrategies;
}

int CvGlobals::getNumAIGrandStrategyInfos()
{
	return (int)m_pAIGrandStrategies->GetAIGrandStrategyEntries().size();
}

std::vector<CvAIGrandStrategyXMLEntry*>& CvGlobals::getAIGrandStrategyInfo()
{
	return m_pAIGrandStrategies->GetAIGrandStrategyEntries();
}

CvAIGrandStrategyXMLEntry* CvGlobals::getAIGrandStrategyInfo(AIGrandStrategyTypes eAIGrandStrategyNum)
{
	CvAssert(eAIGrandStrategyNum > -1);
	CvAssert(eAIGrandStrategyNum < GC.getNumAIGrandStrategyInfos());
	return m_pAIGrandStrategies->GetAIGrandStrategyEntries()[eAIGrandStrategyNum];
}

CvAIGrandStrategyXMLEntries* CvGlobals::GetGameAIGrandStrategies() const
{
	return m_pAIGrandStrategies;
}

int CvGlobals::getNumAICityStrategyInfos()
{
	return (int)m_pAICityStrategies->GetAICityStrategyEntries().size();
}

std::vector<CvAICityStrategyEntry*>& CvGlobals::getAICityStrategyInfo()
{
	return m_pAICityStrategies->GetAICityStrategyEntries();
}

CvAICityStrategyEntry* CvGlobals::getAICityStrategyInfo(AICityStrategyTypes eAICityStrategyNum)
{
	CvAssert(eAICityStrategyNum > -1);
	CvAssert(eAICityStrategyNum < GC.getNumAICityStrategyInfos());
	return m_pAICityStrategies->GetAICityStrategyEntries()[eAICityStrategyNum];
}

CvAICityStrategies* CvGlobals::GetGameAICityStrategies() const
{
	return m_pAICityStrategies;
}

int CvGlobals::getNumPolicyInfos()
{
	return (int)m_pPolicies->GetPolicyEntries().size();
}

std::vector<CvPolicyEntry*>& CvGlobals::getPolicyInfo()
{
	return m_pPolicies->GetPolicyEntries();
}

CvPolicyEntry* CvGlobals::getPolicyInfo(PolicyTypes ePolicyNum)
{
	CvAssert(ePolicyNum > -1);
	CvAssert(ePolicyNum < GC.getNumPolicyInfos());
	return m_pPolicies->GetPolicyEntries()[ePolicyNum];
}

CvPolicyXMLEntries* CvGlobals::GetGamePolicies() const
{
	return m_pPolicies;
}

int CvGlobals::getNumPolicyBranchInfos()
{
	return (int)m_pPolicies->GetPolicyBranchEntries().size();
}

std::vector<CvPolicyBranchEntry*>& CvGlobals::getPolicyBranchInfo()
{
	return m_pPolicies->GetPolicyBranchEntries();
}

CvPolicyBranchEntry* CvGlobals::getPolicyBranchInfo(PolicyBranchTypes ePolicyBranchNum)
{
	CvAssert(ePolicyBranchNum > -1);
	CvAssert(ePolicyBranchNum < GC.getNumPolicyBranchInfos());
	return m_pPolicies->GetPolicyBranchEntries()[ePolicyBranchNum];
}

int CvGlobals::getNumEmphasisInfos()
{
	return (int)m_pEmphases->GetEmphasisEntries().size();
}

std::vector<CvEmphasisEntry*>& CvGlobals::getEmphasisInfo()
{
	return m_pEmphases->GetEmphasisEntries();
}

CvEmphasisEntry* CvGlobals::getEmphasisInfo(EmphasizeTypes eEmphasisNum)
{
	CvAssert(eEmphasisNum > -1);
	CvAssert(eEmphasisNum < GC.getNumEmphasisInfos());
	return m_pEmphases->GetEmphasisEntries()[eEmphasisNum];
}

CvEmphasisXMLEntries* CvGlobals::GetGameEmphases() const
{
	return m_pEmphases;
}

int CvGlobals::getNumTraitInfos()
{
	return (int)m_pTraits->GetTraitEntries().size();
}

std::vector<CvTraitEntry*>& CvGlobals::getTraitInfo()
{
	return m_pTraits->GetTraitEntries();
}

CvTraitEntry* CvGlobals::getTraitInfo(TraitTypes eTraitNum)
{
	CvAssert(eTraitNum > -1);
	CvAssert(eTraitNum < GC.getNumTraitInfos());
	return m_pTraits->GetTraitEntries()[eTraitNum];
}

CvTraitXMLEntries* CvGlobals::GetGameTraits() const
{
	return m_pTraits;
}

int CvGlobals::getNumReligionInfos()
{
	return (int)m_pReligions->GetReligionEntries().size();
}

std::vector<CvReligionEntry*>& CvGlobals::getReligionInfo()
{
	return m_pReligions->GetReligionEntries();
}

CvReligionEntry* CvGlobals::getReligionInfo(ReligionTypes eReligionNum)
{
	CvAssert(eReligionNum > -1);
	CvAssert(eReligionNum < GC.getNumReligionInfos());
	return m_pReligions->GetReligionEntries()[eReligionNum];
}

CvReligionXMLEntries* CvGlobals::GetGameReligions() const
{
	return m_pReligions;
}

int CvGlobals::getNumBeliefInfos()
{
	return (int)m_pBeliefs->GetBeliefEntries().size();
}

std::vector<CvBeliefEntry*>& CvGlobals::getBeliefInfo()
{
	return m_pBeliefs->GetBeliefEntries();
}

CvBeliefEntry* CvGlobals::getBeliefInfo(BeliefTypes eBeliefNum)
{
	CvAssert(eBeliefNum > -1);
	CvAssert(eBeliefNum < GC.getNumBeliefInfos());
	return m_pBeliefs->GetBeliefEntries()[eBeliefNum];
}

CvBeliefXMLEntries* CvGlobals::GetGameBeliefs() const
{
	return m_pBeliefs;
}

#if defined(MOD_BALANCE_CORE)
int CvGlobals::getNumCorporationInfos()
{
	return (int)m_pCorporations->GetCorporationEntries().size();
}

std::vector<CvCorporationEntry*>& CvGlobals::getCorporationInfo()
{
	return m_pCorporations->GetCorporationEntries();
}

CvCorporationEntry* CvGlobals::getCorporationInfo(CorporationTypes eCorporationNum)
{
	CvAssert(eCorporationNum > -1);
	CvAssert(eCorporationNum < GC.getNumCorporationInfos());
	return m_pCorporations->GetCorporationEntries()[eCorporationNum];
}

CvCorporationXMLEntries* CvGlobals::GetGameCorporations() const
{
	return m_pCorporations;
}

int CvGlobals::getNumContractInfos()
{
	return (int)m_paContractInfo.size();
}

std::vector<CvContractEntry*>& CvGlobals::getContractInfo()
{
	return m_paContractInfo;
}

CvContractEntry* CvGlobals::getContractInfo(ContractTypes eContract)
{
	CvAssert(eContract > -1);
	CvAssert(eContract < GC.getNumContractInfos());
	return m_paContractInfo[eContract];
}

CvContractXMLEntries* CvGlobals::GetGameContracts() const
{
	return m_pContracts;
}
#endif

int CvGlobals::getNumLeagueSpecialSessionInfos()
{
	return (int) m_pLeagueSpecialSessions->GetLeagueSpecialSessionEntries().size();
}

std::vector<CvLeagueSpecialSessionEntry*>& CvGlobals::getLeagueSpecialSessionInfo()
{
	return m_pLeagueSpecialSessions->GetLeagueSpecialSessionEntries();
}

_Ret_maybenull_ CvLeagueSpecialSessionEntry* CvGlobals::getLeagueSpecialSessionInfo(LeagueSpecialSessionTypes eLeagueSpecialSessionNum)
{
	CvAssert(eLeagueSpecialSessionNum > -1);
	CvAssert(eLeagueSpecialSessionNum < GC.getNumLeagueSpecialSessionInfos());
	return m_pLeagueSpecialSessions->GetLeagueSpecialSessionEntries()[eLeagueSpecialSessionNum];
}

CvLeagueSpecialSessionXMLEntries* CvGlobals::GetGameLeagueSpecialSessions() const
{
	return m_pLeagueSpecialSessions;
}

int CvGlobals::getNumLeagueNameInfos()
{
	return (int) m_pLeagueNames->GetLeagueNameEntries().size();
}

std::vector<CvLeagueNameEntry*>& CvGlobals::getLeagueNameInfo()
{
	return m_pLeagueNames->GetLeagueNameEntries();
}

CvLeagueNameEntry* CvGlobals::getLeagueNameInfo(LeagueNameTypes eLeagueNameNum)
{
	CvAssert(eLeagueNameNum > -1);
	CvAssert(eLeagueNameNum < GC.getNumLeagueNameInfos());
	return m_pLeagueNames->GetLeagueNameEntries()[eLeagueNameNum];
}

CvLeagueNameXMLEntries* CvGlobals::GetGameLeagueNames() const
{
	return m_pLeagueNames;
}

int CvGlobals::getNumLeagueProjectInfos()
{
	return (int) m_pLeagueProjects->GetLeagueProjectEntries().size();
}

std::vector<CvLeagueProjectEntry*>& CvGlobals::getLeagueProjectInfo()
{
	return m_pLeagueProjects->GetLeagueProjectEntries();
}

CvLeagueProjectEntry* CvGlobals::getLeagueProjectInfo(LeagueProjectTypes eLeagueProjectNum)
{
	CvAssert(eLeagueProjectNum > -1);
	CvAssert(eLeagueProjectNum < GC.getNumLeagueProjectInfos());
	return m_pLeagueProjects->GetLeagueProjectEntries()[eLeagueProjectNum];
}

CvLeagueProjectXMLEntries* CvGlobals::GetGameLeagueProjects() const
{
	return m_pLeagueProjects;
}

int CvGlobals::getNumLeagueProjectRewardInfos()
{
	return (int) m_pLeagueProjectRewards->GetLeagueProjectRewardEntries().size();
}

std::vector<CvLeagueProjectRewardEntry*>& CvGlobals::getLeagueProjectRewardInfo()
{
	return m_pLeagueProjectRewards->GetLeagueProjectRewardEntries();
}

CvLeagueProjectRewardEntry* CvGlobals::getLeagueProjectRewardInfo(LeagueProjectRewardTypes eLeagueProjectRewardNum)
{
	CvAssert(eLeagueProjectRewardNum > -1);
	CvAssert(eLeagueProjectRewardNum < GC.getNumLeagueProjectRewardInfos());
	return m_pLeagueProjectRewards->GetLeagueProjectRewardEntries()[eLeagueProjectRewardNum];
}

CvLeagueProjectRewardXMLEntries* CvGlobals::GetGameLeagueProjectRewards() const
{
	return m_pLeagueProjectRewards;
}

int CvGlobals::getNumResolutionInfos()
{
	return (int) m_pResolutions->GetResolutionEntries().size();
}

std::vector<CvResolutionEntry*>& CvGlobals::getResolutionInfo()
{
	return m_pResolutions->GetResolutionEntries();
}

CvResolutionEntry* CvGlobals::getResolutionInfo(ResolutionTypes eResolutionNum)
{
	CvAssert(eResolutionNum > -1);
	CvAssert(eResolutionNum < GC.getNumResolutionInfos());
	return m_pResolutions->GetResolutionEntries()[eResolutionNum];
}

CvResolutionXMLEntries* CvGlobals::GetGameResolutions() const
{
	return m_pResolutions;
}

int CvGlobals::getNumTechInfos()
{
	return (int)m_pTechs->GetTechEntries().size();
}

std::vector<CvTechEntry*>& CvGlobals::getTechInfo()
{
	return m_pTechs->GetTechEntries();
}

CvTechEntry* CvGlobals::getTechInfo(TechTypes eTechNum)
{
	CvAssert(eTechNum > -1);
	CvAssert(eTechNum < GC.getNumTechInfos());
	return m_pTechs->GetTechEntries()[eTechNum];
}

CvTechXMLEntries* CvGlobals::GetGameTechs() const
{
	return m_pTechs;
}

int CvGlobals::getNumEraInfos()
{
	return (int)m_aEraInfo.size();
}

std::vector<CvEraInfo*>& CvGlobals::getEraInfo()
{
	return m_aEraInfo;
}

CvEraInfo* CvGlobals::getEraInfo(EraTypes eEraNum)
{
	CvAssert(eEraNum > -1);
	CvAssert(eEraNum < GC.getNumEraInfos());
	return m_aEraInfo[eEraNum];
}

int CvGlobals::getNumHurryInfos()
{
	return (int)m_paHurryInfo.size();
}

std::vector<CvHurryInfo*>& CvGlobals::getHurryInfo()
{
	return m_paHurryInfo;
}

CvHurryInfo* CvGlobals::getHurryInfo(HurryTypes eHurryNum)
{
	CvAssert(eHurryNum > -1);
	CvAssert(eHurryNum < GC.getNumHurryInfos());
	return m_paHurryInfo[eHurryNum];
}

int CvGlobals::getNumVictoryInfos()
{
	return (int)m_paVictoryInfo.size();
}

std::vector<CvVictoryInfo*>& CvGlobals::getVictoryInfo()
{
	return m_paVictoryInfo;
}

CvVictoryInfo* CvGlobals::getVictoryInfo(VictoryTypes eVictoryNum)
{
	CvAssert(eVictoryNum > -1);
	CvAssert(eVictoryNum < GC.getNumVictoryInfos());
	return m_paVictoryInfo[eVictoryNum];
}

int CvGlobals::getNumSmallAwardInfos()
{
	return (int)m_paSmallAwardInfo.size();
}

std::vector<CvSmallAwardInfo*>& CvGlobals::getSmallAwardInfo()	// For Moose - XML Load Util, CvInfos
{
	return m_paSmallAwardInfo;
}

CvSmallAwardInfo* CvGlobals::getSmallAwardInfo(SmallAwardTypes eSmallAwardNum)
{
	CvAssert(eSmallAwardNum > -1);
	CvAssert(eSmallAwardNum < GC.getNumSmallAwardInfos());
	return m_paSmallAwardInfo[eSmallAwardNum];
}

//////////////////////////////////////////////////////////////////////////
int CvGlobals::getNumUnitDomainInfos()
{
	return (int)m_paUnitDomainInfo.size();
}

std::vector<CvDomainInfo*>& CvGlobals::getUnitDomainInfo()
{
	return m_paUnitDomainInfo;
}

CvDomainInfo* CvGlobals::getUnitDomainInfo(DomainTypes eDomainNum)
{
	CvAssert(eDomainNum > -1);
	CvAssert(eDomainNum < GC.getNumUnitDomainInfos());
	return m_paUnitDomainInfo[eDomainNum];
}

//////////////////////////////////////////////////////////////////////////
void CvGlobals::LogMessage(const char* szMessage)
{
	if(getLogging())
	{
		FILogFile* pLog = LOGFILEMGR.GetLog("GameCore.log", 0);
		if(pLog)
			pLog->Msg(szMessage);
	}
}

CvNotificationXMLEntries* CvGlobals::GetNotificationEntries()
{
	return m_pNotifications;
}

#if defined(MOD_API_ACHIEVEMENTS) || defined(ACHIEVEMENT_HACKS)
int CvGlobals::getNumAchievementInfos()
{
	return m_pAchievements->GetNumAchievements();
}

std::vector<CvAchievementInfo*>& CvGlobals::getAchievementInfo()
{
	return m_pAchievements->GetAchievementEntries();
}

CvAchievementInfo* CvGlobals::getAchievementInfo(EAchievement eAchievementNum)
{
	CvAssert(eAchievementNum > -1);
	CvAssert(eAchievementNum < GC.getNumAchievementInfos());
	if(eAchievementNum > -1 && eAchievementNum < GC.getNumAchievementInfos())
		return m_pAchievements->GetAchievementEntries()[eAchievementNum];
	else
		return NULL;
}

CvAchievementXMLEntries* CvGlobals::GetGameAchievements() const
{
	return m_pAchievements;
}
#endif

CvString*& CvGlobals::getFootstepAudioTags()
{
	return m_paszFootstepAudioTags;
}

CvString& CvGlobals::getFootstepAudioTags(int i)
{
//	CvAssertMsg(i < getNumFootstepAudioTags(), "Index out of bounds")
	CvAssertMsg(i > -1, "Index out of bounds");
	return m_paszFootstepAudioTags[i];
}

const char** CvGlobals::GetHexDebugLayerNames()
{
	static const char* hexDebugLayerNames[] =
	{
		"StartSiteEvaluationLayer",
		"SettlerSiteEvaluationLayer",
		"VisibilityLayer",
		"RevealedLayer",
		"DangerLayer",
		"TacticalAnalysisLayer",
		"ArtifactLayer",
		"TargetingPathLayer",
		NULL
	};
	return hexDebugLayerNames;
}

float CvGlobals::GetHexDebugLayerScale(const char* szLayerName)
{
	std::string strLayerName = szLayerName;
	float fScale = 1.0f;

	if(strLayerName == "SettlerSiteEvaluationLayer")
	{
		fScale = 1.5f;
	}
	if(strLayerName == "ArtifactLayer")
	{
		fScale = 2.0f;
	}

	return fScale;
}

bool CvGlobals::GetHexDebugLayerString(CvPlot* pkPlot, const char* szLayerName, PlayerTypes ePlayer, char* szBuffer, unsigned int uiBufferLength)
{
	std::string strLayerName = szLayerName;
	if(strLayerName == "StartSiteEvaluationLayer")
	{
		if(!pkPlot->isWater())
		{
			const int iValue = GC.getGame().GetStartSiteEvaluator()->PlotFoundValue(pkPlot, NULL, vector<int>());
			sprintf_s(szBuffer, uiBufferLength, "%d", iValue);
		}
	}
	else if(strLayerName == "SettlerSiteEvaluationLayer")
	{
		if(!pkPlot->isWater() && ePlayer != NO_PLAYER)
		{
			CvPlayerAI& kPlayer = GET_PLAYER(ePlayer);
			const int iValue = kPlayer.getPlotFoundValue(pkPlot->getX(), pkPlot->getY());
			sprintf_s(szBuffer, uiBufferLength, "%d", iValue);
		}
	}
	else if(strLayerName == "VisibilityLayer")
	{
		if(ePlayer != NO_PLAYER)
		{
			CvPlayerAI& kPlayer = GET_PLAYER(ePlayer);
			const TeamTypes eTeam = kPlayer.getTeam();

			if(pkPlot->isVisible(eTeam))
			{
				sprintf_s(szBuffer, uiBufferLength, "Vis %d", kPlayer.GetID());
			}
		}
	}
	else if(strLayerName == "RevealedLayer")
	{
		if(ePlayer != NO_PLAYER)
		{
			CvPlayerAI& kPlayer = GET_PLAYER(ePlayer);
			const TeamTypes eTeam = kPlayer.getTeam();
			if(pkPlot->isRevealed(eTeam))
			{
				sprintf_s(szBuffer, uiBufferLength, "Rev %d", kPlayer.GetID());

			}
		}
	}
	else if(strLayerName == "DangerLayer")
	{
		if(ePlayer != NO_PLAYER)
		{
			CvPlayerAI& kPlayer = GET_PLAYER(ePlayer);
			const int iValue = kPlayer.GetPlotDanger(*pkPlot, false);

			sprintf_s(szBuffer, uiBufferLength, "%d", iValue);
		}
	}
	else if(strLayerName == "ArtifactLayer")
	{
		const int iValue = pkPlot->GetArchaeologicalRecord().m_eArtifactType; // this is a copy
		sprintf_s(szBuffer, uiBufferLength, "%d", iValue);
	}
	else if(strLayerName == "TacticalAnalysisLayer")
	{
		std::string strOut("E_NOIMPL");
		sprintf_s(szBuffer, uiBufferLength, "%s", strOut.c_str());
	}
	else if(strLayerName == "TargetingPathLayer")
	{
		extern int GetLastTargetingPathIndex(int plotIndex);
		sprintf_s(szBuffer, uiBufferLength, "%d", GetLastTargetingPathIndex(pkPlot->GetPlotIndex()));
	}

	return true;
}


void CvGlobals::cacheGlobals()
{
	// -- ints --

	getDatabaseValue("AI_ATTEMPT_RUSH_OVER_X_TURNS_TO_BUILD",m_iAI_ATTEMPT_RUSH_OVER_X_TURNS_TO_BUILD);
	getDatabaseValue("INITIAL_AI_CITY_PRODUCTION",m_iINITIAL_AI_CITY_PRODUCTION);
	getDatabaseValue("AI_CAN_DISBAND_UNITS",m_iAI_CAN_DISBAND_UNITS);
	getDatabaseValue("AI_SHOULDNT_MANAGE_PLOT_ASSIGNMENT",m_iAI_SHOULDNT_MANAGE_PLOT_ASSIGNMENT);
	getDatabaseValue("POLICY_WEIGHT_PROPAGATION_PERCENT",m_iPOLICY_WEIGHT_PROPAGATION_PERCENT);
	getDatabaseValue("POLICY_WEIGHT_PROPAGATION_LEVELS",m_iPOLICY_WEIGHT_PROPAGATION_LEVELS);
	getDatabaseValue("POLICY_WEIGHT_PERCENT_DROP_NEW_BRANCH",m_iPOLICY_WEIGHT_PERCENT_DROP_NEW_BRANCH);
	getDatabaseValue("TECH_WEIGHT_PROPAGATION_PERCENT",m_iTECH_WEIGHT_PROPAGATION_PERCENT);
	getDatabaseValue("TECH_WEIGHT_PROPAGATION_LEVELS",m_iTECH_WEIGHT_PROPAGATION_LEVELS);
	getDatabaseValue("TECH_PRIORITY_UNIQUE_ITEM",m_iTECH_PRIORITY_UNIQUE_ITEM);
	getDatabaseValue("TECH_PRIORITY_MAYA_CALENDAR_BONUS",m_iTECH_PRIORITY_MAYA_CALENDAR_BONUS);
	getDatabaseValue("AI_VALUE_OF_YIELD_GOLD",m_iAI_VALUE_OF_YIELD_GOLD);
	getDatabaseValue("AI_VALUE_OF_YIELD_PRODUCTION",m_iAI_VALUE_OF_YIELD_PRODUCTION);
	getDatabaseValue("AI_VALUE_OF_YIELD_SCIENCE",m_iAI_VALUE_OF_YIELD_SCIENCE);
	getDatabaseValue("DEFAULT_FLAVOR_VALUE",m_iDEFAULT_FLAVOR_VALUE);
	getDatabaseValue("PERSONALITY_FLAVOR_MAX_VALUE",m_iPERSONALITY_FLAVOR_MAX_VALUE);
	getDatabaseValue("PERSONALITY_FLAVOR_MIN_VALUE",m_iPERSONALITY_FLAVOR_MIN_VALUE);
	getDatabaseValue("DIPLO_PERSONALITY_FLAVOR_MAX_VALUE",m_iDIPLO_PERSONALITY_FLAVOR_MAX_VALUE);
	getDatabaseValue("DIPLO_PERSONALITY_FLAVOR_MIN_VALUE",m_iDIPLO_PERSONALITY_FLAVOR_MIN_VALUE);
	getDatabaseValue("FLAVOR_MIN_VALUE",m_iFLAVOR_MIN_VALUE);
	getDatabaseValue("FLAVOR_MAX_VALUE",m_iFLAVOR_MAX_VALUE);
	getDatabaseValue("FLAVOR_RANDOMIZATION_RANGE",m_iFLAVOR_RANDOMIZATION_RANGE);
	getDatabaseValue("FLAVOR_EXPANDGROW_COEFFICIENT",m_iFLAVOR_EXPANDGROW_COEFFICIENT);
	getDatabaseValue("AI_GRAND_STRATEGY_NUM_TURNS_STRATEGY_MUST_BE_ACTIVE",m_iAI_GRAND_STRATEGY_NUM_TURNS_STRATEGY_MUST_BE_ACTIVE);
	getDatabaseValue("AI_GS_RAND_ROLL",m_iAI_GS_RAND_ROLL);
	getDatabaseValue("AI_GRAND_STRATEGY_CURRENT_STRATEGY_WEIGHT",m_iAI_GRAND_STRATEGY_CURRENT_STRATEGY_WEIGHT);
	getDatabaseValue("AI_GRAND_STRATEGY_GUESS_NO_CLUE_WEIGHT",m_iAI_GRAND_STRATEGY_GUESS_NO_CLUE_WEIGHT);
	getDatabaseValue("AI_GRAND_STRATEGY_GUESS_POSITIVE_THRESHOLD",m_iAI_GRAND_STRATEGY_GUESS_POSITIVE_THRESHOLD);
	getDatabaseValue("AI_GRAND_STRATEGY_GUESS_LIKELY_THRESHOLD",m_iAI_GRAND_STRATEGY_GUESS_LIKELY_THRESHOLD);
	getDatabaseValue("AI_GRAND_STRATEGY_OTHER_PLAYERS_GS_MULTIPLIER",m_iAI_GRAND_STRATEGY_OTHER_PLAYERS_GS_MULTIPLIER);
	getDatabaseValue("AI_GS_CONQUEST_NOBODY_MET_FIRST_TURN",m_iAI_GS_CONQUEST_NOBODY_MET_FIRST_TURN);
	getDatabaseValue("AI_GRAND_STRATEGY_CONQUEST_NOBODY_MET_WEIGHT",m_iAI_GRAND_STRATEGY_CONQUEST_NOBODY_MET_WEIGHT);
	getDatabaseValue("AI_GRAND_STRATEGY_CONQUEST_AT_WAR_WEIGHT",m_iAI_GRAND_STRATEGY_CONQUEST_AT_WAR_WEIGHT);
	getDatabaseValue("AI_GS_CONQUEST_MILITARY_STRENGTH_FIRST_TURN",m_iAI_GS_CONQUEST_MILITARY_STRENGTH_FIRST_TURN);
	getDatabaseValue("AI_GRAND_STRATEGY_CONQUEST_POWER_RATIO_MULTIPLIER",m_iAI_GRAND_STRATEGY_CONQUEST_POWER_RATIO_MULTIPLIER);
	getDatabaseValue("AI_GRAND_STRATEGY_CONQUEST_CRAMPED_WEIGHT",m_iAI_GRAND_STRATEGY_CONQUEST_CRAMPED_WEIGHT);
	getDatabaseValue("AI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MINOR_ATTACKED",m_iAI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MINOR_ATTACKED);
	getDatabaseValue("AI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MINOR_CONQUERED",m_iAI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MINOR_CONQUERED);
	getDatabaseValue("AI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MAJOR_ATTACKED",m_iAI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MAJOR_ATTACKED);
	getDatabaseValue("AI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MAJOR_CONQUERED",m_iAI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MAJOR_CONQUERED);
	getDatabaseValue("AI_GS_CULTURE_RATIO_MULTIPLIER",m_iAI_GS_CULTURE_RATIO_MULTIPLIER);
	getDatabaseValue("AI_GS_TOURISM_RATIO_MULTIPLIER",m_iAI_GS_TOURISM_RATIO_MULTIPLIER);
	getDatabaseValue("AI_GS_CULTURE_AHEAD_WEIGHT",m_iAI_GS_CULTURE_AHEAD_WEIGHT);
	getDatabaseValue("AI_GS_CULTURE_TOURISM_AHEAD_WEIGHT",m_iAI_GS_CULTURE_TOURISM_AHEAD_WEIGHT);
	getDatabaseValue("AI_GS_CULTURE_INFLUENTIAL_CIV_MOD",m_iAI_GS_CULTURE_INFLUENTIAL_CIV_MOD);
	getDatabaseValue("AI_GRAND_STRATEGY_UN_EACH_MINOR_ATTACKED_WEIGHT",m_iAI_GRAND_STRATEGY_UN_EACH_MINOR_ATTACKED_WEIGHT);
	getDatabaseValue("AI_GS_UN_SECURED_VOTE_MOD",m_iAI_GS_UN_SECURED_VOTE_MOD);
	getDatabaseValue("AI_GS_SS_HAS_APOLLO_PROGRAM",m_iAI_GS_SS_HAS_APOLLO_PROGRAM);
	getDatabaseValue("AI_GS_SS_TECH_PROGRESS_MOD",m_iAI_GS_SS_TECH_PROGRESS_MOD);
#if defined(MOD_BALANCE_CORE_HAPPINESS)
	getDatabaseValue("EVENT_MIN_DURATION_BETWEEN",m_iEVENT_MIN_DURATION_BETWEEN);
	getDatabaseValue("CITY_EVENT_MIN_DURATION_BETWEEN",m_iCITY_EVENT_MIN_DURATION_BETWEEN);
	getDatabaseValue("BALANCE_HAPPINESS_THRESHOLD_PERCENTILE",m_iBALANCE_HAPPINESS_THRESHOLD_PERCENTILE);
	getDatabaseValue("GLOBAL_RESOURCE_MONOPOLY_THRESHOLD",m_iGLOBAL_RESOURCE_MONOPOLY_THRESHOLD);
	getDatabaseValue("STRATEGIC_RESOURCE_MONOPOLY_THRESHOLD",m_iSTRATEGIC_RESOURCE_MONOPOLY_THRESHOLD);
	getDatabaseValue("RELIGION_MIN_FAITH_SECOND_PROPHET",m_iRELIGION_MIN_FAITH_SECOND_PROPHET);
#endif
	getDatabaseValue("AI_STRATEGY_EARLY_EXPLORATION_STARTING_WEIGHT",m_iAI_STRATEGY_EARLY_EXPLORATION_STARTING_WEIGHT);
	getDatabaseValue("AI_STRATEGY_EARLY_EXPLORATION_EXPLORERS_WEIGHT_DIVISOR",m_iAI_STRATEGY_EARLY_EXPLORATION_EXPLORERS_WEIGHT_DIVISOR);
	getDatabaseValue("AI_STRATEGY_EARLY_EXPLORATION_WEIGHT_PER_FLAVOR",m_iAI_STRATEGY_EARLY_EXPLORATION_WEIGHT_PER_FLAVOR);
	getDatabaseValue("AI_STRATEGY_EARLY_EXPANSION_RELATIVE_TILE_QUALITY",m_iAI_STRATEGY_EARLY_EXPANSION_RELATIVE_TILE_QUALITY);
	getDatabaseValue("AI_STRATEGY_EARLY_EXPANSION_NUM_CITIES_LIMIT",m_iAI_STRATEGY_EARLY_EXPANSION_NUM_CITIES_LIMIT);
	getDatabaseValue("AI_STRATEGY_NEED_IMPROVEMENT_CITY_RATIO",m_fAI_STRATEGY_NEED_IMPROVEMENT_CITY_RATIO);
	getDatabaseValue("AI_STRATEGY_ISLAND_START_COAST_REVEAL_PERCENT",m_iAI_STRATEGY_ISLAND_START_COAST_REVEAL_PERCENT);
	getDatabaseValue("AI_STRATEGY_AREA_IS_FULL_PERCENT",m_iAI_STRATEGY_AREA_IS_FULL_PERCENT);
	getDatabaseValue("AI_STRATEGY_MINIMUM_SETTLE_FERTILITY",m_iAI_STRATEGY_MINIMUM_SETTLE_FERTILITY);
	getDatabaseValue("AI_BUY_PLOT_TEST_PROBES",m_iAI_BUY_PLOT_TEST_PROBES);
	getDatabaseValue("AI_PLOT_VALUE_STRATEGIC_RESOURCE",m_iAI_PLOT_VALUE_STRATEGIC_RESOURCE);
	getDatabaseValue("AI_PLOT_VALUE_LUXURY_RESOURCE",m_iAI_PLOT_VALUE_LUXURY_RESOURCE);
	getDatabaseValue("AI_PLOT_VALUE_SPECIALIZATION_MULTIPLIER",m_iAI_PLOT_VALUE_SPECIALIZATION_MULTIPLIER);
	getDatabaseValue("AI_PLOT_VALUE_YIELD_MULTIPLIER",m_iAI_PLOT_VALUE_YIELD_MULTIPLIER);
	getDatabaseValue("AI_PLOT_VALUE_DEFICIENT_YIELD_MULTIPLIER",m_iAI_PLOT_VALUE_DEFICIENT_YIELD_MULTIPLIER);
	getDatabaseValue("AI_PLOT_VALUE_FIERCE_DISPUTE",m_iAI_PLOT_VALUE_FIERCE_DISPUTE);
	getDatabaseValue("AI_PLOT_VALUE_STRONG_DISPUTE",m_iAI_PLOT_VALUE_STRONG_DISPUTE);
	getDatabaseValue("AI_PLOT_VALUE_WEAK_DISPUTE",m_iAI_PLOT_VALUE_WEAK_DISPUTE);
	getDatabaseValue("AI_GOLD_PRIORITY_MINIMUM_PLOT_BUY_VALUE",m_iAI_GOLD_PRIORITY_MINIMUM_PLOT_BUY_VALUE);
	getDatabaseValue("AI_GOLD_BALANCE_TO_HALVE_PLOT_BUY_MINIMUM",m_iAI_GOLD_BALANCE_TO_HALVE_PLOT_BUY_MINIMUM);
	getDatabaseValue("AI_GOLD_PRIORITY_UPGRADE_BASE",m_iAI_GOLD_PRIORITY_UPGRADE_BASE);
	getDatabaseValue("AI_GOLD_PRIORITY_UPGRADE_PER_FLAVOR_POINT",m_iAI_GOLD_PRIORITY_UPGRADE_PER_FLAVOR_POINT);
	getDatabaseValue("AI_GOLD_PRIORITY_DIPLOMACY_BASE",m_iAI_GOLD_PRIORITY_DIPLOMACY_BASE);
	getDatabaseValue("AI_GOLD_PRIORITY_DIPLOMACY_PER_FLAVOR_POINT",m_iAI_GOLD_PRIORITY_DIPLOMACY_PER_FLAVOR_POINT);
	getDatabaseValue("AI_GOLD_PRIORITY_UNIT",m_iAI_GOLD_PRIORITY_UNIT);
	getDatabaseValue("AI_GOLD_PRIORITY_DEFENSIVE_BUILDING",m_iAI_GOLD_PRIORITY_DEFENSIVE_BUILDING);
	getDatabaseValue("AI_GOLD_PRIORITY_BUYOUT_CITY_STATE",m_iAI_GOLD_PRIORITY_BUYOUT_CITY_STATE);
	getDatabaseValue("BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_FOOD",m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_FOOD);
	getDatabaseValue("BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_PRODUCTION",m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_PRODUCTION);
	getDatabaseValue("BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_GOLD",m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_GOLD);
	getDatabaseValue("BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_SCIENCE",m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_SCIENCE);
	getDatabaseValue("BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_CULTURE",m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_CULTURE);
	getDatabaseValue("BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_LUXURY_RESOURCE",m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_LUXURY_RESOURCE);
	getDatabaseValue("BUILDER_TASKING_IMPROVE_RESOURCE_TENDENCY",m_iBUILDER_TASKING_IMPROVE_RESOURCE_TENDENCY);
	getDatabaseValue("BUILDER_TASKING_BUILD_ROUTE_TENDENCY",m_iBUILDER_TASKING_BUILD_ROUTE_TENDENCY);
	getDatabaseValue("BUILDER_TASKING_DIRECTIVES_TO_EVALUATE",m_iBUILDER_TASKING_DIRECTIVES_TO_EVALUATE);
	getDatabaseValue("BUILDER_TASKING_BASELINE_BUILD_IMPROVEMENTS",m_iBUILDER_TASKING_BASELINE_BUILD_IMPROVEMENTS);
	getDatabaseValue("BUILDER_TASKING_BASELINE_BUILD_RESOURCE_IMPROVEMENTS",m_iBUILDER_TASKING_BASELINE_BUILD_RESOURCE_IMPROVEMENTS);
	getDatabaseValue("BUILDER_TASKING_BASELINE_BUILD_ROUTES",m_iBUILDER_TASKING_BASELINE_BUILD_ROUTES);
	getDatabaseValue("BUILDER_TASKING_BASELINE_REPAIR",m_iBUILDER_TASKING_BASELINE_REPAIR);
	getDatabaseValue("BUILDER_TASKING_BASELINE_SCRUB_FALLOUT",m_iBUILDER_TASKING_BASELINE_SCRUB_FALLOUT);
	getDatabaseValue("BUILDER_TASKING_BASELINE_ADDS_CULTURE",m_iBUILDER_TASKING_BASELINE_ADDS_CULTURE);
	getDatabaseValue("AI_MILITARY_THREAT_WEIGHT_MINOR",m_iAI_MILITARY_THREAT_WEIGHT_MINOR);
	getDatabaseValue("AI_MILITARY_THREAT_WEIGHT_MAJOR",m_iAI_MILITARY_THREAT_WEIGHT_MAJOR);
	getDatabaseValue("AI_MILITARY_THREAT_WEIGHT_SEVERE",m_iAI_MILITARY_THREAT_WEIGHT_SEVERE);
	getDatabaseValue("AI_MILITARY_THREAT_WEIGHT_CRITICAL",m_iAI_MILITARY_THREAT_WEIGHT_CRITICAL);
	getDatabaseValue("AI_STRATEGY_DEFEND_MY_LANDS_BASE_UNITS",m_iAI_STRATEGY_DEFEND_MY_LANDS_BASE_UNITS);
	getDatabaseValue("AI_STRATEGY_MILITARY_RESERVE_PERCENTAGE",m_iAI_STRATEGY_MILITARY_RESERVE_PERCENTAGE);
	getDatabaseValue("AI_MILITARY_CITY_THREAT_WEIGHT_CAPITAL",m_iAI_MILITARY_CITY_THREAT_WEIGHT_CAPITAL);
	getDatabaseValue("AI_MILITARY_BARBARIANS_FOR_MINOR_THREAT",m_iAI_MILITARY_BARBARIANS_FOR_MINOR_THREAT);
	getDatabaseValue("AI_MILITARY_IGNORE_BAD_ODDS",m_iAI_MILITARY_IGNORE_BAD_ODDS);
	getDatabaseValue("AI_MILITARY_RECAPTURING_OWN_CITY",m_iAI_MILITARY_RECAPTURING_OWN_CITY);
	getDatabaseValue("AI_MILITARY_CAPTURING_ORIGINAL_CAPITAL",m_iAI_MILITARY_CAPTURING_ORIGINAL_CAPITAL);
	getDatabaseValue("AI_CITY_SPECIALIZATION_EARLIEST_TURN",m_iAI_CITY_SPECIALIZATION_EARLIEST_TURN);
	getDatabaseValue("AI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL",m_iAI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL);
	getDatabaseValue("AI_CITY_SPECIALIZATION_GENERAL_ECONOMIC_WEIGHT",m_iAI_CITY_SPECIALIZATION_GENERAL_ECONOMIC_WEIGHT);
	getDatabaseValue("AI_CITY_SPECIALIZATION_FOOD_WEIGHT_FLAVOR_EXPANSION",m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_FLAVOR_EXPANSION);
	getDatabaseValue("AI_CITY_SPECIALIZATION_FOOD_WEIGHT_PERCENT_CONTINENT_UNOWNED",m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_PERCENT_CONTINENT_UNOWNED);
	getDatabaseValue("AI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_CITIES",m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_CITIES);
	getDatabaseValue("AI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_SETTLERS",m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_SETTLERS);
	getDatabaseValue("AI_CITY_SPECIALIZATION_FOOD_WEIGHT_EARLY_EXPANSION",m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_EARLY_EXPANSION);
	getDatabaseValue("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED",m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED);
	getDatabaseValue("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH",m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH);
	getDatabaseValue("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION",m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION);
	getDatabaseValue("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE",m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE);
	getDatabaseValue("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL",m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL);
	getDatabaseValue("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT",m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT);
	getDatabaseValue("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS",m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS);
	getDatabaseValue("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL",m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL);
	getDatabaseValue("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER",m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER);
	getDatabaseValue("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP",m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP);
	getDatabaseValue("AI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE",m_iAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE);
	getDatabaseValue("AI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY",m_iAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY);
	getDatabaseValue("AI_CITY_SPECIALIZATION_GOLD_WEIGHT_FLAVOR_GOLD",m_iAI_CITY_SPECIALIZATION_GOLD_WEIGHT_FLAVOR_GOLD);
	getDatabaseValue("AI_CITY_SPECIALIZATION_GOLD_WEIGHT_LAND_DISPUTE",m_iAI_CITY_SPECIALIZATION_GOLD_WEIGHT_LAND_DISPUTE);
	getDatabaseValue("AI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SCIENCE",m_iAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SCIENCE);
	getDatabaseValue("AI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SPACESHIP",m_iAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SPACESHIP);
	getDatabaseValue("AI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING",m_iAI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING);
	getDatabaseValue("AI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING",m_iAI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING);
	getDatabaseValue("AI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING",m_iAI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING);
	getDatabaseValue("AI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED",m_iAI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED);
	getDatabaseValue("AI_CITYSTRATEGY_SMALL_CITY_POP_THRESHOLD",m_iAI_CITYSTRATEGY_SMALL_CITY_POP_THRESHOLD);
	getDatabaseValue("AI_CITYSTRATEGY_MEDIUM_CITY_POP_THRESHOLD",m_iAI_CITYSTRATEGY_MEDIUM_CITY_POP_THRESHOLD);
	getDatabaseValue("AI_CITYSTRATEGY_LARGE_CITY_POP_THRESHOLD",m_iAI_CITYSTRATEGY_LARGE_CITY_POP_THRESHOLD);
	getDatabaseValue("AI_CITYSTRATEGY_NEED_TILE_IMPROVERS_CITY_THRESHOLD",m_iAI_CITYSTRATEGY_NEED_TILE_IMPROVERS_CITY_THRESHOLD);
	getDatabaseValue("AI_CITYSTRATEGY_NEED_TILE_IMPROVERS_WORKER_MOD",m_iAI_CITYSTRATEGY_NEED_TILE_IMPROVERS_WORKER_MOD);
	getDatabaseValue("AI_CITYSTRATEGY_NEED_TILE_IMPROVERS_DESPERATE_TURN",m_iAI_CITYSTRATEGY_NEED_TILE_IMPROVERS_DESPERATE_TURN);
	getDatabaseValue("AI_CITYSTRATEGY_WANT_TILE_IMPROVERS_MINIMUM_SIZE",m_iAI_CITYSTRATEGY_WANT_TILE_IMPROVERS_MINIMUM_SIZE);
	getDatabaseValue("AI_CITYSTRATEGY_YIELD_DEFICIENT_FOOD",m_fAI_CITYSTRATEGY_YIELD_DEFICIENT_FOOD);
	getDatabaseValue("AI_CITYSTRATEGY_YIELD_DEFICIENT_PRODUCTION",m_fAI_CITYSTRATEGY_YIELD_DEFICIENT_PRODUCTION);
	getDatabaseValue("AI_CITYSTRATEGY_YIELD_DEFICIENT_GOLD",m_fAI_CITYSTRATEGY_YIELD_DEFICIENT_GOLD);
	getDatabaseValue("AI_CITYSTRATEGY_YIELD_DEFICIENT_SCIENCE",m_fAI_CITYSTRATEGY_YIELD_DEFICIENT_SCIENCE);
	getDatabaseValue("AI_CITYSTRATEGY_YIELD_DEFICIENT_CULTURE",m_fAI_CITYSTRATEGY_YIELD_DEFICIENT_CULTURE);
	getDatabaseValue("AI_CITYSTRATEGY_OPERATION_UNIT_BASE_WEIGHT",m_iAI_CITYSTRATEGY_OPERATION_UNIT_BASE_WEIGHT);
	getDatabaseValue("AI_CITYSTRATEGY_OPERATION_UNIT_FLAVOR_MULTIPLIER",m_iAI_CITYSTRATEGY_OPERATION_UNIT_FLAVOR_MULTIPLIER);
	getDatabaseValue("AI_CITYSTRATEGY_ARMY_UNIT_BASE_WEIGHT",m_iAI_CITYSTRATEGY_ARMY_UNIT_BASE_WEIGHT);
	getDatabaseValue("AI_CITIZEN_VALUE_FOOD",m_iAI_CITIZEN_VALUE_FOOD);
	getDatabaseValue("AI_CITIZEN_VALUE_PRODUCTION",m_iAI_CITIZEN_VALUE_PRODUCTION);
	getDatabaseValue("AI_CITIZEN_VALUE_GOLD",m_iAI_CITIZEN_VALUE_GOLD);
	getDatabaseValue("AI_CITIZEN_VALUE_SCIENCE",m_iAI_CITIZEN_VALUE_SCIENCE);
	getDatabaseValue("AI_CITIZEN_VALUE_CULTURE",m_iAI_CITIZEN_VALUE_CULTURE);
	getDatabaseValue("AI_CITIZEN_VALUE_FAITH",m_iAI_CITIZEN_VALUE_FAITH);
	getDatabaseValue("AI_CITIZEN_FOOD_MOD_SIZE_CUTOFF",m_iAI_CITIZEN_FOOD_MOD_SIZE_CUTOFF);
	getDatabaseValue("AI_CITIZEN_FOOD_MOD_SIZE_EXPONENT",m_iAI_CITIZEN_FOOD_MOD_SIZE_EXPONENT);
	getDatabaseValue("AI_CITIZEN_MOD_FOOD_DEFICIT",m_iAI_CITIZEN_MOD_FOOD_DEFICIT);
	getDatabaseValue("AI_CITIZEN_MOD_PRODUCTION_DEFICIT",m_iAI_CITIZEN_MOD_PRODUCTION_DEFICIT);
	getDatabaseValue("AI_OPERATIONAL_BARBARIAN_CAMP_DEPLOY_RANGE",m_iAI_OPERATIONAL_BARBARIAN_CAMP_DEPLOY_RANGE);
	getDatabaseValue("AI_OPERATIONAL_CITY_ATTACK_DEPLOY_RANGE",m_iAI_OPERATIONAL_CITY_ATTACK_DEPLOY_RANGE);
	getDatabaseValue("AI_OPERATIONAL_PERCENT_DANGER_FOR_FORWARD_MUSTER",m_iAI_OPERATIONAL_PERCENT_DANGER_FOR_FORWARD_MUSTER);
	getDatabaseValue("AI_OPERATIONAL_PERCENT_HEALTH_FOR_OPERATION",m_iAI_OPERATIONAL_PERCENT_HEALTH_FOR_OPERATION);
	getDatabaseValue("AI_TACTICAL_MAP_UNIT_STRENGTH_MULTIPLIER",m_iAI_TACTICAL_MAP_UNIT_STRENGTH_MULTIPLIER);
	getDatabaseValue("AI_TACTICAL_MAP_DOMINANCE_PERCENTAGE",m_iAI_TACTICAL_MAP_DOMINANCE_PERCENTAGE);
	getDatabaseValue("AI_TACTICAL_MAP_TEMP_ZONE_RADIUS",m_iAI_TACTICAL_MAP_TEMP_ZONE_RADIUS);
	getDatabaseValue("AI_TACTICAL_MAP_TEMP_ZONE_TURNS",m_iAI_TACTICAL_MAP_TEMP_ZONE_TURNS);
	getDatabaseValue("AI_TACTICAL_MAP_BOMBARDMENT_ZONE_TURNS",m_iAI_TACTICAL_MAP_BOMBARDMENT_ZONE_TURNS);
	getDatabaseValue("AI_TACTICAL_RECRUIT_RANGE",m_iAI_TACTICAL_RECRUIT_RANGE);
	getDatabaseValue("AI_TACTICAL_REPOSITION_RANGE",m_iAI_TACTICAL_REPOSITION_RANGE);
	getDatabaseValue("AI_TACTICAL_OVERKILL_PERCENT",m_iAI_TACTICAL_OVERKILL_PERCENT);
	getDatabaseValue("AI_TACTICAL_BARBARIAN_RELEASE_VARIATION",m_iAI_TACTICAL_BARBARIAN_RELEASE_VARIATION);
	getDatabaseValue("AI_HOMELAND_MAX_UPGRADE_MOVE_TURNS",m_iAI_HOMELAND_MAX_UPGRADE_MOVE_TURNS);
	getDatabaseValue("AI_HOMELAND_MAX_DEFENSIVE_MOVE_TURNS",m_iAI_HOMELAND_MAX_DEFENSIVE_MOVE_TURNS);
	getDatabaseValue("AI_HOMELAND_ESTIMATE_TURNS_DISTANCE",m_iAI_HOMELAND_ESTIMATE_TURNS_DISTANCE);
	getDatabaseValue("AI_HOMELAND_GREAT_PERSON_TURNS_TO_WAIT",m_iAI_HOMELAND_GREAT_PERSON_TURNS_TO_WAIT);
	getDatabaseValue("AI_DIPLO_PLOT_RANGE_FROM_CITY_HOME_FRONT",m_iAI_DIPLO_PLOT_RANGE_FROM_CITY_HOME_FRONT);
	getDatabaseValue("AI_DIPLO_LAND_DISPUTE_WEIGHT_WEAK",m_iAI_DIPLO_LAND_DISPUTE_WEIGHT_WEAK);
	getDatabaseValue("AI_DIPLO_LAND_DISPUTE_WEIGHT_STRONG",m_iAI_DIPLO_LAND_DISPUTE_WEIGHT_STRONG);
	getDatabaseValue("AI_DIPLO_LAND_DISPUTE_WEIGHT_FIERCE",m_iAI_DIPLO_LAND_DISPUTE_WEIGHT_FIERCE);
	GD_INT_CACHE(AI_CONFIG_MILITARY_MELEE_PER_AA);
	GD_INT_CACHE(AI_CONFIG_MILITARY_TILES_PER_SHIP);
	GD_INT_CACHE(RELIGION_LAST_FOUND_ERA);
	GD_INT_CACHE(RELIGION_GP_FAITH_PURCHASE_ERA);
	GD_INT_CACHE(IDEOLOGY_START_ERA);
	GD_INT_CACHE(IDEOLOGY_PREREQ_ERA);
#if defined(MOD_API_UNIFIED_YIELDS_TOURISM)
	GD_INT_CACHE(TOURISM_START_TECH);
	GD_INT_CACHE(TOURISM_START_ERA);
#endif
	getDatabaseValue("MINOR_BULLY_GOLD",m_iMINOR_BULLY_GOLD);
	getDatabaseValue("MINOR_FRIENDSHIP_RATE_MOD_MAXIMUM",m_iMINOR_FRIENDSHIP_RATE_MOD_MAXIMUM);
	getDatabaseValue("MINOR_FRIENDSHIP_RATE_MOD_SHARED_RELIGION",m_iMINOR_FRIENDSHIP_RATE_MOD_SHARED_RELIGION);
	getDatabaseValue("MINOR_FRIENDSHIP_DROP_PER_TURN",m_iMINOR_FRIENDSHIP_DROP_PER_TURN);
	getDatabaseValue("MINOR_FRIENDSHIP_DROP_PER_TURN_HOSTILE",m_iMINOR_FRIENDSHIP_DROP_PER_TURN_HOSTILE);
	getDatabaseValue("MINOR_FRIENDSHIP_DROP_PER_TURN_AGGRESSOR",m_iMINOR_FRIENDSHIP_DROP_PER_TURN_AGGRESSOR);
	getDatabaseValue("MINOR_FRIENDSHIP_DROP_DISHONOR_PLEDGE_TO_PROTECT",m_iMINOR_FRIENDSHIP_DROP_DISHONOR_PLEDGE_TO_PROTECT);
	getDatabaseValue("MINOR_FRIENDSHIP_DROP_BULLY_GOLD_SUCCESS",m_iMINOR_FRIENDSHIP_DROP_BULLY_GOLD_SUCCESS);
	getDatabaseValue("MINOR_FRIENDSHIP_DROP_BULLY_GOLD_FAILURE",m_iMINOR_FRIENDSHIP_DROP_BULLY_GOLD_FAILURE);
	getDatabaseValue("MINOR_FRIENDSHIP_DROP_BULLY_WORKER_SUCCESS",m_iMINOR_FRIENDSHIP_DROP_BULLY_WORKER_SUCCESS);
	getDatabaseValue("MINOR_FRIENDSHIP_DROP_BULLY_WORKER_FAILURE",m_iMINOR_FRIENDSHIP_DROP_BULLY_WORKER_FAILURE);
	getDatabaseValue("MINOR_FRIENDSHIP_NEGATIVE_INCREASE_PER_TURN",m_iMINOR_FRIENDSHIP_NEGATIVE_INCREASE_PER_TURN);
	getDatabaseValue("MINOR_FRIENDSHIP_AT_WAR",m_iMINOR_FRIENDSHIP_AT_WAR);
	getDatabaseValue("MINOR_CIV_AGGRESSOR_THRESHOLD",m_iMINOR_CIV_AGGRESSOR_THRESHOLD);
	getDatabaseValue("MINOR_CIV_WARMONGER_THRESHOLD",m_iMINOR_CIV_WARMONGER_THRESHOLD);
	getDatabaseValue("PERMANENT_WAR_AGGRESSOR_CHANCE",m_iPERMANENT_WAR_AGGRESSOR_CHANCE);
	getDatabaseValue("PERMANENT_WAR_OTHER_WARMONGER_CHANCE_DISTANT",m_iPERMANENT_WAR_OTHER_WARMONGER_CHANCE_DISTANT);
	getDatabaseValue("PERMANENT_WAR_OTHER_WARMONGER_CHANCE_FAR",m_iPERMANENT_WAR_OTHER_WARMONGER_CHANCE_FAR);
	getDatabaseValue("PERMANENT_WAR_OTHER_WARMONGER_CHANCE_CLOSE",m_iPERMANENT_WAR_OTHER_WARMONGER_CHANCE_CLOSE);
	getDatabaseValue("PERMANENT_WAR_OTHER_WARMONGER_CHANCE_NEIGHBORS",m_iPERMANENT_WAR_OTHER_WARMONGER_CHANCE_NEIGHBORS);
	getDatabaseValue("PERMANENT_WAR_OTHER_CHANCE_DISTANT",m_iPERMANENT_WAR_OTHER_CHANCE_DISTANT);
	getDatabaseValue("PERMANENT_WAR_OTHER_CHANCE_FAR",m_iPERMANENT_WAR_OTHER_CHANCE_FAR);
	getDatabaseValue("PERMANENT_WAR_OTHER_CHANCE_CLOSE",m_iPERMANENT_WAR_OTHER_CHANCE_CLOSE);
	getDatabaseValue("PERMANENT_WAR_OTHER_CHANCE_NEIGHBORS",m_iPERMANENT_WAR_OTHER_CHANCE_NEIGHBORS);
	getDatabaseValue("PERMANENT_WAR_OTHER_AT_WAR",m_iPERMANENT_WAR_OTHER_AT_WAR);
	getDatabaseValue("FRIENDSHIP_NEUTRAL_ON_DEATH",m_iFRIENDSHIP_NEUTRAL_ON_DEATH);
	getDatabaseValue("FRIENDSHIP_THRESHOLD_NEUTRAL",m_iFRIENDSHIP_THRESHOLD_NEUTRAL);
	getDatabaseValue("FRIENDSHIP_FRIENDS_ON_DEATH",m_iFRIENDSHIP_FRIENDS_ON_DEATH);
	getDatabaseValue("FRIENDSHIP_THRESHOLD_FRIENDS",m_iFRIENDSHIP_THRESHOLD_FRIENDS);
	getDatabaseValue("FRIENDSHIP_ALLIES_ON_DEATH",m_iFRIENDSHIP_ALLIES_ON_DEATH);
	getDatabaseValue("FRIENDSHIP_THRESHOLD_ALLIES",m_iFRIENDSHIP_THRESHOLD_ALLIES);
	getDatabaseValue("FRIENDSHIP_THRESHOLD_MAX",m_iFRIENDSHIP_THRESHOLD_MAX);
	getDatabaseValue("FRIENDSHIP_THRESHOLD_CAN_BULLY",m_iFRIENDSHIP_THRESHOLD_CAN_BULLY);
	getDatabaseValue("FRIENDSHIP_THRESHOLD_CAN_PLEDGE_TO_PROTECT",m_iFRIENDSHIP_THRESHOLD_CAN_PLEDGE_TO_PROTECT);
#if defined(MOD_CITY_STATE_SCALE)
	GD_INT_CACHE(FRIENDSHIP_THRESHOLD_MOD_MEDIEVAL);
	GD_INT_CACHE(FRIENDSHIP_THRESHOLD_MOD_INDUSTRIAL);
#endif
	getDatabaseValue("MINOR_FRIENDSHIP_CLOSE_AMOUNT",m_iMINOR_FRIENDSHIP_CLOSE_AMOUNT);
	getDatabaseValue("MINOR_CIV_SCIENCE_BONUS_MULTIPLIER",m_iMINOR_CIV_SCIENCE_BONUS_MULTIPLIER);
	getDatabaseValue("FRIENDS_CULTURE_BONUS_AMOUNT_ANCIENT",m_iFRIENDS_CULTURE_BONUS_AMOUNT_ANCIENT);
	getDatabaseValue("FRIENDS_CULTURE_BONUS_AMOUNT_MEDIEVAL",m_iFRIENDS_CULTURE_BONUS_AMOUNT_MEDIEVAL);
	getDatabaseValue("FRIENDS_CULTURE_BONUS_AMOUNT_INDUSTRIAL",m_iFRIENDS_CULTURE_BONUS_AMOUNT_INDUSTRIAL);
	getDatabaseValue("ALLIES_CULTURE_BONUS_AMOUNT_ANCIENT",m_iALLIES_CULTURE_BONUS_AMOUNT_ANCIENT);
	getDatabaseValue("ALLIES_CULTURE_BONUS_AMOUNT_MEDIEVAL",m_iALLIES_CULTURE_BONUS_AMOUNT_MEDIEVAL);
	getDatabaseValue("ALLIES_CULTURE_BONUS_AMOUNT_INDUSTRIAL",m_iALLIES_CULTURE_BONUS_AMOUNT_INDUSTRIAL);
	getDatabaseValue("FRIENDS_CAPITAL_FOOD_BONUS_AMOUNT_PRE_RENAISSANCE",m_iFRIENDS_CAPITAL_FOOD_BONUS_AMOUNT_PRE_RENAISSANCE);
	getDatabaseValue("FRIENDS_CAPITAL_FOOD_BONUS_AMOUNT_POST_RENAISSANCE",m_iFRIENDS_CAPITAL_FOOD_BONUS_AMOUNT_POST_RENAISSANCE);
	getDatabaseValue("FRIENDS_OTHER_CITIES_FOOD_BONUS_AMOUNT_PRE_RENAISSANCE",m_iFRIENDS_OTHER_CITIES_FOOD_BONUS_AMOUNT_PRE_RENAISSANCE);
	getDatabaseValue("FRIENDS_OTHER_CITIES_FOOD_BONUS_AMOUNT_POST_RENAISSANCE",m_iFRIENDS_OTHER_CITIES_FOOD_BONUS_AMOUNT_POST_RENAISSANCE);
	getDatabaseValue("ALLIES_CAPITAL_FOOD_BONUS_AMOUNT",m_iALLIES_CAPITAL_FOOD_BONUS_AMOUNT);
	getDatabaseValue("ALLIES_OTHER_CITIES_FOOD_BONUS_AMOUNT",m_iALLIES_OTHER_CITIES_FOOD_BONUS_AMOUNT);
	getDatabaseValue("FRIENDS_BASE_TURNS_UNIT_SPAWN",m_iFRIENDS_BASE_TURNS_UNIT_SPAWN);
	getDatabaseValue("FRIENDS_RAND_TURNS_UNIT_SPAWN",m_iFRIENDS_RAND_TURNS_UNIT_SPAWN);
	getDatabaseValue("ALLIES_EXTRA_TURNS_UNIT_SPAWN",m_iALLIES_EXTRA_TURNS_UNIT_SPAWN);
	getDatabaseValue("UNIT_SPAWN_BIAS_MULTIPLIER",m_iUNIT_SPAWN_BIAS_MULTIPLIER);
	getDatabaseValue("UNIT_SPAWN_NUM_CHOICES",m_iUNIT_SPAWN_NUM_CHOICES);
	getDatabaseValue("FRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_ANCIENT",m_iFRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_ANCIENT);
	getDatabaseValue("FRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_MEDIEVAL",m_iFRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_MEDIEVAL);
	getDatabaseValue("FRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_INDUSTRIAL",m_iFRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_INDUSTRIAL);
	getDatabaseValue("ALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_ANCIENT",m_iALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_ANCIENT);
	getDatabaseValue("ALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_MEDIEVAL",m_iALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_MEDIEVAL);
	getDatabaseValue("ALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_INDUSTRIAL",m_iALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_INDUSTRIAL);
	getDatabaseValue("FRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_ANCIENT",m_iFRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_ANCIENT);
	getDatabaseValue("FRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_MEDIEVAL",m_iFRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_MEDIEVAL);
	getDatabaseValue("FRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_INDUSTRIAL",m_iFRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_INDUSTRIAL);
	getDatabaseValue("ALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_ANCIENT",m_iALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_ANCIENT);
	getDatabaseValue("ALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_MEDIEVAL",m_iALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_MEDIEVAL);
	getDatabaseValue("ALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_INDUSTRIAL",m_iALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_INDUSTRIAL);
	getDatabaseValue("FRIENDS_FAITH_FLAT_BONUS_AMOUNT_INDUSTRIAL",m_iFRIENDS_FAITH_FLAT_BONUS_AMOUNT_INDUSTRIAL);
	getDatabaseValue("FRIENDS_FAITH_FLAT_BONUS_AMOUNT_RENAISSANCE",m_iFRIENDS_FAITH_FLAT_BONUS_AMOUNT_RENAISSANCE);
	getDatabaseValue("FRIENDS_FAITH_FLAT_BONUS_AMOUNT_MEDIEVAL",m_iFRIENDS_FAITH_FLAT_BONUS_AMOUNT_MEDIEVAL);
	getDatabaseValue("FRIENDS_FAITH_FLAT_BONUS_AMOUNT_CLASSICAL",m_iFRIENDS_FAITH_FLAT_BONUS_AMOUNT_CLASSICAL);
	getDatabaseValue("FRIENDS_FAITH_FLAT_BONUS_AMOUNT_ANCIENT",m_iFRIENDS_FAITH_FLAT_BONUS_AMOUNT_ANCIENT);
	getDatabaseValue("ALLIES_FAITH_FLAT_BONUS_AMOUNT_INDUSTRIAL",m_iALLIES_FAITH_FLAT_BONUS_AMOUNT_INDUSTRIAL);
	getDatabaseValue("ALLIES_FAITH_FLAT_BONUS_AMOUNT_RENAISSANCE",m_iALLIES_FAITH_FLAT_BONUS_AMOUNT_RENAISSANCE);
	getDatabaseValue("ALLIES_FAITH_FLAT_BONUS_AMOUNT_MEDIEVAL",m_iALLIES_FAITH_FLAT_BONUS_AMOUNT_MEDIEVAL);
	getDatabaseValue("ALLIES_FAITH_FLAT_BONUS_AMOUNT_CLASSICAL",m_iALLIES_FAITH_FLAT_BONUS_AMOUNT_CLASSICAL);
	getDatabaseValue("ALLIES_FAITH_FLAT_BONUS_AMOUNT_ANCIENT",m_iALLIES_FAITH_FLAT_BONUS_AMOUNT_ANCIENT);
	getDatabaseValue("MINOR_TURNS_GREAT_PEOPLE_SPAWN_BASE",m_iMINOR_TURNS_GREAT_PEOPLE_SPAWN_BASE);
	getDatabaseValue("MINOR_TURNS_GREAT_PEOPLE_SPAWN_RAND",m_iMINOR_TURNS_GREAT_PEOPLE_SPAWN_RAND);
	getDatabaseValue("MINOR_TURNS_GREAT_PEOPLE_SPAWN_BIAS_MULTIPLY",m_iMINOR_TURNS_GREAT_PEOPLE_SPAWN_BIAS_MULTIPLY);
	getDatabaseValue("MINOR_ADDITIONAL_ALLIES_GP_CHANGE",m_iMINOR_ADDITIONAL_ALLIES_GP_CHANGE);
	getDatabaseValue("MAX_MINOR_ADDITIONAL_ALLIES_GP_CHANGE",m_iMAX_MINOR_ADDITIONAL_ALLIES_GP_CHANGE);
	getDatabaseValue("MAX_DISTANCE_MINORS_BARB_QUEST",m_iMAX_DISTANCE_MINORS_BARB_QUEST);
	getDatabaseValue("TXT_KEY_MINOR_GIFT_UNITS_REMINDER",m_iTXT_KEY_MINOR_GIFT_UNITS_REMINDER);
	getDatabaseValue("WAR_QUEST_COMPLETE_FRIENDSHIP",m_iWAR_QUEST_COMPLETE_FRIENDSHIP);
	getDatabaseValue("WAR_QUEST_UNITS_TO_KILL_DIVISOR",m_iWAR_QUEST_UNITS_TO_KILL_DIVISOR);
	getDatabaseValue("WAR_QUEST_MIN_UNITS_TO_KILL",m_iWAR_QUEST_MIN_UNITS_TO_KILL);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_ROUTE",m_iMINOR_QUEST_FRIENDSHIP_ROUTE);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_KILL_CAMP",m_iMINOR_QUEST_FRIENDSHIP_KILL_CAMP);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_CONNECT_RESOURCE",m_iMINOR_QUEST_FRIENDSHIP_CONNECT_RESOURCE);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_CONSTRUCT_WONDER",m_iMINOR_QUEST_FRIENDSHIP_CONSTRUCT_WONDER);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_GREAT_PERSON",m_iMINOR_QUEST_FRIENDSHIP_GREAT_PERSON);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_KILL_CITY_STATE",m_iMINOR_QUEST_FRIENDSHIP_KILL_CITY_STATE);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_FIND_PLAYER",m_iMINOR_QUEST_FRIENDSHIP_FIND_PLAYER);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_FIND_NATURAL_WONDER",m_iMINOR_QUEST_FRIENDSHIP_FIND_NATURAL_WONDER);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_GIVE_GOLD",m_iMINOR_QUEST_FRIENDSHIP_GIVE_GOLD);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_PLEDGE_TO_PROTECT",m_iMINOR_QUEST_FRIENDSHIP_PLEDGE_TO_PROTECT);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_CONTEST_CULTURE",m_iMINOR_QUEST_FRIENDSHIP_CONTEST_CULTURE);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_CONTEST_FAITH",m_iMINOR_QUEST_FRIENDSHIP_CONTEST_FAITH);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_CONTEST_TECHS",m_iMINOR_QUEST_FRIENDSHIP_CONTEST_TECHS);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_INVEST",m_iMINOR_QUEST_FRIENDSHIP_INVEST);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_BULLY_CITY_STATE",m_iMINOR_QUEST_FRIENDSHIP_BULLY_CITY_STATE);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_DENOUNCE_MAJOR",m_iMINOR_QUEST_FRIENDSHIP_DENOUNCE_MAJOR);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_SPREAD_RELIGION",m_iMINOR_QUEST_FRIENDSHIP_SPREAD_RELIGION);
	getDatabaseValue("MINOR_QUEST_FRIENDSHIP_TRADE_ROUTE",m_iMINOR_QUEST_FRIENDSHIP_TRADE_ROUTE);
#if defined(MOD_DIPLOMACY_CITYSTATES_QUESTS)
	if (MOD_DIPLOMACY_CITYSTATES_QUESTS) 
	{
		getDatabaseValue("MINOR_QUEST_FRIENDSHIP_WAR",m_iMINOR_QUEST_FRIENDSHIP_WAR);
		getDatabaseValue("MINOR_QUEST_FRIENDSHIP_FIND_CITY_STATE",m_iMINOR_QUEST_FRIENDSHIP_FIND_CITY_STATE);
		getDatabaseValue("MINOR_QUEST_FRIENDSHIP_INFLUENCE",m_iMINOR_QUEST_FRIENDSHIP_INFLUENCE);
		getDatabaseValue("MINOR_QUEST_FRIENDSHIP_TOURISM",m_iMINOR_QUEST_FRIENDSHIP_TOURISM);
		getDatabaseValue("MINOR_QUEST_FRIENDSHIP_TOURISM",m_iMINOR_QUEST_FRIENDSHIP_ARCHAEOLOGY);
		getDatabaseValue("MINOR_QUEST_FRIENDSHIP_CIRCUMNAVIGATION",m_iMINOR_QUEST_FRIENDSHIP_CIRCUMNAVIGATION);
		getDatabaseValue("IDEOLOGY_PER_CITY_UNHAPPY",m_iIDEOLOGY_PER_CITY_UNHAPPY);
		getDatabaseValue("IDEOLOGY_POP_PER_UNHAPPY",m_iIDEOLOGY_POP_PER_UNHAPPY);
		getDatabaseValue("WARMONGER_THREAT_PER_TURN_DECAY_INCREASED",m_iWARMONGER_THREAT_PER_TURN_DECAY_INCREASED);
		getDatabaseValue("WARMONGER_THREAT_PER_TURN_DECAY_DECREASED",m_iWARMONGER_THREAT_PER_TURN_DECAY_DECREASED);
		getDatabaseValue("WARMONGER_THREAT_ATTACKED_WEIGHT_WORLD_WAR",m_iWARMONGER_THREAT_ATTACKED_WEIGHT_WORLD_WAR);
		getDatabaseValue("WARMONGER_THREAT_ATTACKED_WEIGHT_WORLD_PEACE",m_iWARMONGER_THREAT_ATTACKED_WEIGHT_WORLD_PEACE);
		getDatabaseValue("SCHOLAR_MINOR_ALLY_MULTIPLIER",m_iSCHOLAR_MINOR_ALLY_MULTIPLIER);
		getDatabaseValue("SCIENCE_LEAGUE_GREAT_WORK_MODIFIER",m_iSCIENCE_LEAGUE_GREAT_WORK_MODIFIER);
		getDatabaseValue("PIONEER_POPULATION_CHANGE",m_iPIONEER_POPULATION_CHANGE);
		getDatabaseValue("PIONEER_EXTRA_PLOTS",m_iPIONEER_EXTRA_PLOTS);
		getDatabaseValue("PIONEER_FOOD_PERCENT",m_iPIONEER_FOOD_PERCENT);
		getDatabaseValue("COLONIST_POPULATION_CHANGE",m_iCOLONIST_POPULATION_CHANGE);
		getDatabaseValue("COLONIST_EXTRA_PLOTS",m_iCOLONIST_EXTRA_PLOTS);
		getDatabaseValue("COLONIST_FOOD_PERCENT",m_iCOLONIST_FOOD_PERCENT);
		getDatabaseValue("MINOR_QUEST_REBELLION_TIMER",m_iMINOR_QUEST_REBELLION_TIMER);
		getDatabaseValue("MINOR_CIV_QUEST_WAR_MILITARISTIC_VALUE",m_iMINOR_CIV_QUEST_WAR_MILITARISTIC_VALUE);
		getDatabaseValue("MINOR_CIV_QUEST_WAR_HOSTILE_VALUE",m_iMINOR_CIV_QUEST_WAR_HOSTILE_VALUE);
		getDatabaseValue("MINOR_CIV_QUEST_WAR_CULTURED_VALUE",m_iMINOR_CIV_QUEST_WAR_CULTURED_VALUE);
		getDatabaseValue("MINOR_CIV_QUEST_NATIONAL_WONDER_CULTURED_VALUE",m_iMINOR_CIV_QUEST_NATIONAL_WONDER_CULTURED_VALUE);
		getDatabaseValue("MINOR_CIV_QUEST_FIND_CITYSTATE_MARITIME_VALUE",m_iMINOR_CIV_QUEST_FIND_CITYSTATE_MARITIME_VALUE);
		getDatabaseValue("MINOR_CIV_QUEST_FIND_CITYSTATE_MERCANTILE_VALUE",m_iMINOR_CIV_QUEST_FIND_CITYSTATE_MERCANTILE_VALUE);
		getDatabaseValue("MINOR_CIV_QUEST_ARCHAEOLOGY_MILITARISTIC_VALUE",m_iMINOR_CIV_QUEST_ARCHAEOLOGY_MILITARISTIC_VALUE);
		getDatabaseValue("MINOR_CIV_QUEST_ARCHAEOLOGY_RELIGIOUS_VALUE",m_iMINOR_CIV_QUEST_ARCHAEOLOGY_RELIGIOUS_VALUE);
		getDatabaseValue("MINOR_CIV_QUEST_CIRCUMNAVIGATION_MARITIME_VALUE",m_iMINOR_CIV_QUEST_CIRCUMNAVIGATION_MARITIME_VALUE);
		getDatabaseValue("MINOR_CIV_QUEST_INFLUENCE_HOSTILE_VALUE",m_iMINOR_CIV_QUEST_INFLUENCE_HOSTILE_VALUE);
		getDatabaseValue("MINOR_CIV_QUEST_TOURISM_FRIENDLY_VALUE",m_iMINOR_CIV_QUEST_TOURISM_FRIENDLY_VALUE);
		getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_RELIGIOUS_LIBERATION",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_RELIGIOUS_LIBERATION);
		getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_FRIENDLY_LIBERATION",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_FRIENDLY_LIBERATION);
		getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_LIBERATION",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_LIBERATION);
		getDatabaseValue("INFLUENCE_TARGET_DISTANCE_WEIGHT_VALUE",m_iINFLUENCE_TARGET_DISTANCE_WEIGHT_VALUE);
		getDatabaseValue("AI_MILITARY_RECAPTURING_CITY_STATE",m_iAI_MILITARY_RECAPTURING_CITY_STATE);
		getDatabaseValue("NEED_DIPLOMAT_THRESHOLD_MODIFIER",m_iNEED_DIPLOMAT_THRESHOLD_MODIFIER);
		getDatabaseValue("NEED_DIPLOMAT_DESIRE_MODIFIER",m_iNEED_DIPLOMAT_DESIRE_MODIFIER);
		getDatabaseValue("NEED_DIPLOMAT_DISTASTE_MODIFIER",m_iNEED_DIPLOMAT_DISTASTE_MODIFIER);
		getDatabaseValue("INFLUENCE_MINOR_QUEST_BOOST",m_iINFLUENCE_MINOR_QUEST_BOOST);
		getDatabaseValue("QUEST_REBELLION_FREQUENCY",m_iQUEST_REBELLION_FREQUENCY);
		getDatabaseValue("BARBARIAN_HORDE_FREQUENCY",m_iBARBARIAN_HORDE_FREQUENCY);
		getDatabaseValue("LEAGUE_AID_MAX",m_iLEAGUE_AID_MAX);
		getDatabaseValue("CSD_GOLD_GIFT_DISABLED",m_iCSD_GOLD_GIFT_DISABLED);
	}
#endif
	getDatabaseValue("MINOR_QUEST_STANDARD_CONTEST_LENGTH",m_iMINOR_QUEST_STANDARD_CONTEST_LENGTH);
	getDatabaseValue("MINOR_CIV_GOLD_GIFT_GAME_MULTIPLIER",m_iMINOR_CIV_GOLD_GIFT_GAME_MULTIPLIER);
	getDatabaseValue("MINOR_CIV_GOLD_GIFT_GAME_DIVISOR",m_iMINOR_CIV_GOLD_GIFT_GAME_DIVISOR);
	getDatabaseValue("MINOR_CIV_GOLD_GIFT_VISIBLE_DIVISOR",m_iMINOR_CIV_GOLD_GIFT_VISIBLE_DIVISOR);
	getDatabaseValue("MINOR_CIV_GOLD_GIFT_MINIMUM_FRIENDSHIP_REWARD",m_iMINOR_CIV_GOLD_GIFT_MINIMUM_FRIENDSHIP_REWARD);
	getDatabaseValue("MINOR_CIV_BEST_RELATIONS_HAPPINESS_BONUS",m_iMINOR_CIV_BEST_RELATIONS_HAPPINESS_BONUS);
	getDatabaseValue("MINOR_CIV_RESOURCE_SEARCH_RADIUS",m_iMINOR_CIV_RESOURCE_SEARCH_RADIUS);
	getDatabaseValue("FRIENDSHIP_PER_UNIT_INTRUDING",m_iFRIENDSHIP_PER_UNIT_INTRUDING);
	getDatabaseValue("FRIENDSHIP_PER_BARB_KILLED",m_iFRIENDSHIP_PER_BARB_KILLED);
	getDatabaseValue("FRIENDSHIP_PER_UNIT_GIFTED",m_iFRIENDSHIP_PER_UNIT_GIFTED);
	getDatabaseValue("MAX_INFLUENCE_FROM_MINOR_GIFTS",m_iMAX_INFLUENCE_FROM_MINOR_GIFTS);
	getDatabaseValue("MINOR_LIBERATION_FRIENDSHIP",m_iMINOR_LIBERATION_FRIENDSHIP);
	getDatabaseValue("RETURN_CIVILIAN_FRIENDSHIP",m_iRETURN_CIVILIAN_FRIENDSHIP);
	getDatabaseValue("MINOR_CIV_MAX_GLOBAL_QUESTS_FOR_PLAYER",m_iMINOR_CIV_MAX_GLOBAL_QUESTS_FOR_PLAYER);
	getDatabaseValue("MINOR_CIV_MAX_PERSONAL_QUESTS_FOR_PLAYER",m_iMINOR_CIV_MAX_PERSONAL_QUESTS_FOR_PLAYER);
	getDatabaseValue("MINOR_CIV_GLOBAL_QUEST_FIRST_POSSIBLE_TURN",m_iMINOR_CIV_GLOBAL_QUEST_FIRST_POSSIBLE_TURN);
	getDatabaseValue("MINOR_CIV_GLOBAL_QUEST_FIRST_POSSIBLE_TURN_RAND",m_iMINOR_CIV_GLOBAL_QUEST_FIRST_POSSIBLE_TURN_RAND);
	getDatabaseValue("MINOR_CIV_GLOBAL_QUEST_MIN_TURNS_BETWEEN",m_iMINOR_CIV_GLOBAL_QUEST_MIN_TURNS_BETWEEN);
	getDatabaseValue("MINOR_CIV_GLOBAL_QUEST_RAND_TURNS_BETWEEN",m_iMINOR_CIV_GLOBAL_QUEST_RAND_TURNS_BETWEEN);
	getDatabaseValue("MINOR_CIV_GLOBAL_QUEST_RAND_TURNS_BETWEEN_HOSTILE_MULTIPLIER",m_iMINOR_CIV_GLOBAL_QUEST_RAND_TURNS_BETWEEN_HOSTILE_MULTIPLIER);
	getDatabaseValue("MINOR_CIV_PERSONAL_QUEST_FIRST_POSSIBLE_TURN",m_iMINOR_CIV_PERSONAL_QUEST_FIRST_POSSIBLE_TURN);
	getDatabaseValue("MINOR_CIV_PERSONAL_QUEST_FIRST_POSSIBLE_TURN_RAND",m_iMINOR_CIV_PERSONAL_QUEST_FIRST_POSSIBLE_TURN_RAND);
	getDatabaseValue("MINOR_CIV_PERSONAL_QUEST_MIN_TURNS_BETWEEN",m_iMINOR_CIV_PERSONAL_QUEST_MIN_TURNS_BETWEEN);
	getDatabaseValue("MINOR_CIV_PERSONAL_QUEST_RAND_TURNS_BETWEEN",m_iMINOR_CIV_PERSONAL_QUEST_RAND_TURNS_BETWEEN);
	getDatabaseValue("MINOR_CIV_PERSONAL_QUEST_RAND_TURNS_BETWEEN_HOSTILE_MULTIPLIER",m_iMINOR_CIV_PERSONAL_QUEST_RAND_TURNS_BETWEEN_HOSTILE_MULTIPLIER);
	getDatabaseValue("MINOR_CIV_QUEST_KILL_CAMP_RANGE",m_iMINOR_CIV_QUEST_KILL_CAMP_RANGE);
	getDatabaseValue("MINOR_CIV_QUEST_WONDER_COMPLETION_THRESHOLD",m_iMINOR_CIV_QUEST_WONDER_COMPLETION_THRESHOLD);
	getDatabaseValue("MINOR_CIV_THREATENED_BY_BARBS_NOTIF_THRESHOLD",m_iMINOR_CIV_THREATENED_BY_BARBS_NOTIF_THRESHOLD);
	getDatabaseValue("MINOR_CIV_MERCANTILE_RESOURCES_QUANTITY",m_iMINOR_CIV_MERCANTILE_RESOURCES_QUANTITY);
	getDatabaseValue("MINOR_CIV_MERCANTILE_RESOURCES_KEEP_ON_CAPTURE_DISABLED",m_iMINOR_CIV_MERCANTILE_RESOURCES_KEEP_ON_CAPTURE_DISABLED);
	getDatabaseValue("QUEST_DISABLED_ROUTE",m_iQUEST_DISABLED_ROUTE);
	getDatabaseValue("QUEST_DISABLED_KILL_CAMP",m_iQUEST_DISABLED_KILL_CAMP);
	getDatabaseValue("QUEST_DISABLED_CONNECT_RESOURCE",m_iQUEST_DISABLED_CONNECT_RESOURCE);
	getDatabaseValue("QUEST_DISABLED_CONSTRUCT_WONDER",m_iQUEST_DISABLED_CONSTRUCT_WONDER);
	getDatabaseValue("QUEST_DISABLED_GREAT_PERSON",m_iQUEST_DISABLED_GREAT_PERSON);
	getDatabaseValue("QUEST_DISABLED_KILL_CITY_STATE",m_iQUEST_DISABLED_KILL_CITY_STATE);
	getDatabaseValue("QUEST_DISABLED_FIND_PLAYER",m_iQUEST_DISABLED_FIND_PLAYER);
	getDatabaseValue("QUEST_DISABLED_NATURAL_WONDER",m_iQUEST_DISABLED_NATURAL_WONDER);
	getDatabaseValue("QUEST_DISABLED_GIVE_GOLD",m_iQUEST_DISABLED_GIVE_GOLD);
	getDatabaseValue("QUEST_DISABLED_PLEDGE_TO_PROTECT",m_iQUEST_DISABLED_PLEDGE_TO_PROTECT);
	getDatabaseValue("QUEST_DISABLED_CONTEST_CULTURE",m_iQUEST_DISABLED_CONTEST_CULTURE);
	getDatabaseValue("QUEST_DISABLED_CONTEST_FAITH",m_iQUEST_DISABLED_CONTEST_FAITH);
	getDatabaseValue("QUEST_DISABLED_CONTEST_TECHS",m_iQUEST_DISABLED_CONTEST_TECHS);
	getDatabaseValue("QUEST_DISABLED_INVEST",m_iQUEST_DISABLED_INVEST);
	getDatabaseValue("QUEST_DISABLED_BULLY_CITY_STATE",m_iQUEST_DISABLED_BULLY_CITY_STATE);
	getDatabaseValue("QUEST_DISABLED_DENOUNCE_MAJOR",m_iQUEST_DISABLED_DENOUNCE_MAJOR);
	getDatabaseValue("QUEST_DISABLED_SPREAD_RELIGION",m_iQUEST_DISABLED_SPREAD_RELIGION);
	getDatabaseValue("QUEST_DISABLED_TRADE_ROUTE",m_iQUEST_DISABLED_TRADE_ROUTE);
#if defined(MOD_DIPLOMACY_CITYSTATES_QUESTS)
	if (MOD_DIPLOMACY_CITYSTATES_QUESTS) {
		getDatabaseValue("QUEST_DISABLED_WAR",m_iQUEST_DISABLED_WAR);
		getDatabaseValue("QUEST_DISABLED_FIND_CITY_STATE",m_iQUEST_DISABLED_FIND_CITY_STATE);
		getDatabaseValue("QUEST_DISABLED_INFLUENCE",m_iQUEST_DISABLED_INFLUENCE);
		getDatabaseValue("QUEST_DISABLED_TOURISM",m_iQUEST_DISABLED_TOURISM);
		getDatabaseValue("QUEST_DISABLED_ARCHAEOLOGY",m_iQUEST_DISABLED_ARCHAEOLOGY);
		getDatabaseValue("QUEST_DISABLED_CIRCUMNAVIGATION",m_iQUEST_DISABLED_CIRCUMNAVIGATION);
		getDatabaseValue("QUEST_DISABLED_LIBERATION",m_iQUEST_DISABLED_LIBERATION);
		getDatabaseValue("QUEST_DISABLED_HORDE",m_iQUEST_DISABLED_HORDE);
		getDatabaseValue("QUEST_DISABLED_REBELLION",m_iQUEST_DISABLED_REBELLION);
	}
#endif
#if defined(MOD_BALANCE_CORE)
	getDatabaseValue("QUEST_DISABLED_CP_QUESTS",m_iQUEST_DISABLED_CP_QUESTS);
#endif
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_DEFAULT",m_iMINOR_CIV_QUEST_WEIGHT_DEFAULT);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_FRIENDLY_ROUTE",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_FRIENDLY_ROUTE);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_HOSTILE_ROUTE",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_HOSTILE_ROUTE);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MARITIME_ROUTE",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MARITIME_ROUTE);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_ROUTE",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_ROUTE);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_KILL_CAMP",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_KILL_CAMP);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MARITIME_CONNECT_RESOURCE",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MARITIME_CONNECT_RESOURCE);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_CONNECT_RESOURCE",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_CONNECT_RESOURCE);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_CULTURED_CONSTRUCT_WONDER",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_CULTURED_CONSTRUCT_WONDER);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_CULTURED_GREAT_PERSON",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_CULTURED_GREAT_PERSON);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_KILL_CITY_STATE",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_KILL_CITY_STATE);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_HOSTILE_KILL_CITY_STATE",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_HOSTILE_KILL_CITY_STATE);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_NEUTRAL_KILL_CITY_STATE",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_NEUTRAL_KILL_CITY_STATE);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MARITIME_FIND_PLAYER",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MARITIME_FIND_PLAYER);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_FIND_PLAYER",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_FIND_PLAYER);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_FIND_NATURAL_WONDER",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_FIND_NATURAL_WONDER);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_HOSTILE_FIND_NATURAL_WONDER",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_HOSTILE_FIND_NATURAL_WONDER);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_GIVE_GOLD",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_GIVE_GOLD);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_GIVE_GOLD",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_GIVE_GOLD);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_OTHER_GIVE_GOLD",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_OTHER_GIVE_GOLD);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_PLEDGE_TO_PROTECT",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_PLEDGE_TO_PROTECT);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_CULTURED_PLEDGE_TO_PROTECT",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_CULTURED_PLEDGE_TO_PROTECT);
	getDatabaseValue("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_OTHER_PLEDGE_TO_PROTECT",m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_OTHER_PLEDGE_TO_PROTECT);
	getDatabaseValue("RELIGION_BELIEF_SCORE_CITY_MULTIPLIER",m_iRELIGION_BELIEF_SCORE_CITY_MULTIPLIER);
	getDatabaseValue("RELIGION_BELIEF_SCORE_WORKED_PLOT_MULTIPLIER",m_iRELIGION_BELIEF_SCORE_WORKED_PLOT_MULTIPLIER);
	getDatabaseValue("RELIGION_BELIEF_SCORE_OWNED_PLOT_MULTIPLIER",m_iRELIGION_BELIEF_SCORE_OWNED_PLOT_MULTIPLIER);
	getDatabaseValue("RELIGION_BELIEF_SCORE_UNOWNED_PLOT_MULTIPLIER",m_iRELIGION_BELIEF_SCORE_UNOWNED_PLOT_MULTIPLIER);
	getDatabaseValue("RELIGION_MISSIONARY_RANGE_IN_TURNS",m_iRELIGION_MISSIONARY_RANGE_IN_TURNS);
	getDatabaseValue("RELIGION_MAX_MISSIONARIES",m_iRELIGION_MAX_MISSIONARIES);
	getDatabaseValue("NORMAL_ANNEX",m_fNORMAL_ANNEX);
	getDatabaseValue("AGGRESSIVE_ANNEX",m_fAGGRESSIVE_ANNEX);
	getDatabaseValue("MC_GIFT_WEIGHT_THRESHOLD",m_iMC_GIFT_WEIGHT_THRESHOLD);
	getDatabaseValue("MC_ALWAYS_GIFT_DIPLO_THRESHOLD",m_iMC_ALWAYS_GIFT_DIPLO_THRESHOLD);
	getDatabaseValue("MC_SOMETIMES_GIFT_RAND_MULTIPLIER",m_iMC_SOMETIMES_GIFT_RAND_MULTIPLIER);
	getDatabaseValue("MC_SMALL_GIFT_WEIGHT_PASS_OTHER_PLAYER",m_iMC_SMALL_GIFT_WEIGHT_PASS_OTHER_PLAYER);
	getDatabaseValue("MC_GIFT_WEIGHT_PASS_OTHER_PLAYER",m_iMC_GIFT_WEIGHT_PASS_OTHER_PLAYER);
	getDatabaseValue("MC_GIFT_WEIGHT_MARITIME_GROWTH",m_iMC_GIFT_WEIGHT_MARITIME_GROWTH);
	getDatabaseValue("MC_GIFT_WEIGHT_DIPLO_VICTORY",m_iMC_GIFT_WEIGHT_DIPLO_VICTORY);
	getDatabaseValue("MC_GIFT_WEIGHT_CULTURE_VICTORY",m_iMC_GIFT_WEIGHT_CULTURE_VICTORY);
	getDatabaseValue("MC_GIFT_WEIGHT_CONQUEST_VICTORY",m_iMC_GIFT_WEIGHT_CONQUEST_VICTORY);
	getDatabaseValue("MC_GIFT_WEIGHT_MILITARISTIC",m_iMC_GIFT_WEIGHT_MILITARISTIC);
	getDatabaseValue("MC_GIFT_WEIGHT_RESOURCE_WE_NEED",m_iMC_GIFT_WEIGHT_RESOURCE_WE_NEED);
	getDatabaseValue("MC_GIFT_WEIGHT_NEUTRAL_VICTORY_ROLL",m_iMC_GIFT_WEIGHT_NEUTRAL_VICTORY_ROLL);
	getDatabaseValue("MC_GIFT_WEIGHT_PROTECTIVE",m_iMC_GIFT_WEIGHT_PROTECTIVE);
	getDatabaseValue("MC_GIFT_WEIGHT_HOSTILE",m_iMC_GIFT_WEIGHT_HOSTILE);
	getDatabaseValue("MC_GIFT_WEIGHT_NEIGHBORS",m_iMC_GIFT_WEIGHT_NEIGHBORS);
	getDatabaseValue("MC_GIFT_WEIGHT_CLOSE",m_iMC_GIFT_WEIGHT_CLOSE);
	getDatabaseValue("MC_GIFT_WEIGHT_FAR",m_iMC_GIFT_WEIGHT_FAR);
	getDatabaseValue("MC_GIFT_WEIGHT_ALMOST_NOT_ALLIES",m_iMC_GIFT_WEIGHT_ALMOST_NOT_ALLIES);
	getDatabaseValue("MC_GIFT_WEIGHT_ALMOST_NOT_FRIENDS",m_iMC_GIFT_WEIGHT_ALMOST_NOT_FRIENDS);
	getDatabaseValue("OPINION_WEIGHT_BASE_HUMAN",m_iOPINION_WEIGHT_BASE_HUMAN);
	getDatabaseValue("OPINION_WEIGHT_BASE_AI",m_iOPINION_WEIGHT_BASE_AI);
	getDatabaseValue("OPINION_WEIGHT_LAND_FIERCE",m_iOPINION_WEIGHT_LAND_FIERCE);
	getDatabaseValue("OPINION_WEIGHT_LAND_STRONG",m_iOPINION_WEIGHT_LAND_STRONG);
	getDatabaseValue("OPINION_WEIGHT_LAND_WEAK",m_iOPINION_WEIGHT_LAND_WEAK);
	getDatabaseValue("OPINION_WEIGHT_LAND_NONE",m_iOPINION_WEIGHT_LAND_NONE);
	getDatabaseValue("OPINION_WEIGHT_LAND_ANCIENT_ERA",m_iOPINION_WEIGHT_LAND_ANCIENT_ERA);
	getDatabaseValue("OPINION_WEIGHT_LAND_CLASSICAL_ERA",m_iOPINION_WEIGHT_LAND_CLASSICAL_ERA);
	getDatabaseValue("OPINION_WEIGHT_LAND_NONE_EARLY_GAME",m_iOPINION_WEIGHT_LAND_NONE_EARLY_GAME);
	getDatabaseValue("OPINION_WEIGHT_LAND_WARMONGER",m_iOPINION_WEIGHT_LAND_WARMONGER);
	getDatabaseValue("OPINION_WEIGHT_LAND_NONE_WARMONGER",m_iOPINION_WEIGHT_LAND_NONE_WARMONGER);
	getDatabaseValue("OPINION_WEIGHT_VICTORY_FIERCE",m_iOPINION_WEIGHT_VICTORY_FIERCE);
	getDatabaseValue("OPINION_WEIGHT_VICTORY_STRONG",m_iOPINION_WEIGHT_VICTORY_STRONG);
	getDatabaseValue("OPINION_WEIGHT_VICTORY_WEAK",m_iOPINION_WEIGHT_VICTORY_WEAK);
	getDatabaseValue("OPINION_WEIGHT_VICTORY_NONE",m_iOPINION_WEIGHT_VICTORY_NONE);
	getDatabaseValue("OPINION_WEIGHT_VICTORY_PER_ERA",m_iOPINION_WEIGHT_VICTORY_PER_ERA);
	getDatabaseValue("OPINION_WEIGHT_VICTORY_BLOCK_FIERCE",m_iOPINION_WEIGHT_VICTORY_BLOCK_FIERCE);
	getDatabaseValue("OPINION_WEIGHT_VICTORY_BLOCK_STRONG",m_iOPINION_WEIGHT_VICTORY_BLOCK_STRONG);
	getDatabaseValue("OPINION_WEIGHT_VICTORY_BLOCK_WEAK",m_iOPINION_WEIGHT_VICTORY_BLOCK_WEAK);
	getDatabaseValue("OPINION_WEIGHT_VICTORY_BLOCK_NONE",m_iOPINION_WEIGHT_VICTORY_BLOCK_NONE);
	getDatabaseValue("OPINION_WEIGHT_VICTORY_BLOCK_PER_ERA",m_iOPINION_WEIGHT_VICTORY_BLOCK_PER_ERA);
	getDatabaseValue("OPINION_WEIGHT_WONDER_FIERCE",m_iOPINION_WEIGHT_WONDER_FIERCE);
	getDatabaseValue("OPINION_WEIGHT_WONDER_STRONG",m_iOPINION_WEIGHT_WONDER_STRONG);
	getDatabaseValue("OPINION_WEIGHT_WONDER_WEAK",m_iOPINION_WEIGHT_WONDER_WEAK);
	getDatabaseValue("OPINION_WEIGHT_WONDER_NONE",m_iOPINION_WEIGHT_WONDER_NONE);
	getDatabaseValue("OPINION_WEIGHT_WONDER_CULTURAL",m_iOPINION_WEIGHT_WONDER_CULTURAL);
	getDatabaseValue("OPINION_WEIGHT_WONDER_NONE_CULTURAL",m_iOPINION_WEIGHT_WONDER_NONE_CULTURAL);
	getDatabaseValue("OPINION_WEIGHT_MINOR_CIV_FIERCE",m_iOPINION_WEIGHT_MINOR_CIV_FIERCE);
	getDatabaseValue("OPINION_WEIGHT_MINOR_CIV_STRONG",m_iOPINION_WEIGHT_MINOR_CIV_STRONG);
	getDatabaseValue("OPINION_WEIGHT_MINOR_CIV_WEAK",m_iOPINION_WEIGHT_MINOR_CIV_WEAK);
	getDatabaseValue("OPINION_WEIGHT_MINOR_CIV_NONE",m_iOPINION_WEIGHT_MINOR_CIV_NONE);
	getDatabaseValue("OPINION_WEIGHT_MINOR_CIV_DIPLOMAT",m_iOPINION_WEIGHT_MINOR_CIV_DIPLOMAT);
	getDatabaseValue("OPINION_WEIGHT_MINOR_CIV_NONE_DIPLOMAT",m_iOPINION_WEIGHT_MINOR_CIV_NONE_DIPLOMAT);
	getDatabaseValue("OPINION_WEIGHT_TECH_FIERCE",m_iOPINION_WEIGHT_TECH_FIERCE);
	getDatabaseValue("OPINION_WEIGHT_TECH_STRONG",m_iOPINION_WEIGHT_TECH_STRONG);
	getDatabaseValue("OPINION_WEIGHT_TECH_WEAK",m_iOPINION_WEIGHT_TECH_WEAK);
	getDatabaseValue("OPINION_WEIGHT_TECH_NONE",m_iOPINION_WEIGHT_TECH_NONE);
	getDatabaseValue("OPINION_WEIGHT_POLICY_FIERCE",m_iOPINION_WEIGHT_POLICY_FIERCE);
	getDatabaseValue("OPINION_WEIGHT_POLICY_STRONG",m_iOPINION_WEIGHT_POLICY_STRONG);
	getDatabaseValue("OPINION_WEIGHT_POLICY_WEAK",m_iOPINION_WEIGHT_POLICY_WEAK);
	getDatabaseValue("OPINION_WEIGHT_POLICY_NONE",m_iOPINION_WEIGHT_POLICY_NONE);
	getDatabaseValue("OPINION_WEIGHT_WARMONGER_CRITICAL",m_iOPINION_WEIGHT_WARMONGER_CRITICAL);
	getDatabaseValue("OPINION_WEIGHT_WARMONGER_SEVERE",m_iOPINION_WEIGHT_WARMONGER_SEVERE);
	getDatabaseValue("OPINION_WEIGHT_WARMONGER_MAJOR",m_iOPINION_WEIGHT_WARMONGER_MAJOR);
	getDatabaseValue("OPINION_WEIGHT_WARMONGER_MINOR",m_iOPINION_WEIGHT_WARMONGER_MINOR);
	getDatabaseValue("OPINION_WEIGHT_WARMONGER_NONE",m_iOPINION_WEIGHT_WARMONGER_NONE);
	getDatabaseValue("OPINION_WEIGHT_ASKED_NO_SETTLE",m_iOPINION_WEIGHT_ASKED_NO_SETTLE);
	getDatabaseValue("OPINION_WEIGHT_ASKED_STOP_SPYING",m_iOPINION_WEIGHT_ASKED_STOP_SPYING);
	getDatabaseValue("OPINION_WEIGHT_MADE_DEMAND_OF_US",m_iOPINION_WEIGHT_MADE_DEMAND_OF_US);
	getDatabaseValue("OPINION_WEIGHT_MADE_DEMAND_OF_US_SUBSEQUENT",m_iOPINION_WEIGHT_MADE_DEMAND_OF_US_SUBSEQUENT);
	getDatabaseValue("OPINION_WEIGHT_RETURNED_CIVILIAN",m_iOPINION_WEIGHT_RETURNED_CIVILIAN);
	getDatabaseValue("OPINION_WEIGHT_RETURNED_CIVILIAN_SUBSEQUENT",m_iOPINION_WEIGHT_RETURNED_CIVILIAN_SUBSEQUENT);
	getDatabaseValue("OPINION_WEIGHT_BUILT_LANDMARK",m_iOPINION_WEIGHT_BUILT_LANDMARK);
	getDatabaseValue("OPINION_WEIGHT_BUILT_LANDMARK_SUBSEQUENT",m_iOPINION_WEIGHT_BUILT_LANDMARK_SUBSEQUENT);
	getDatabaseValue("OPINION_WEIGHT_RESURRECTED",m_iOPINION_WEIGHT_RESURRECTED);
	getDatabaseValue("OPINION_WEIGHT_LIBERATOR_CAPTURED_CAPITAL_DIVISOR",m_iOPINION_WEIGHT_LIBERATOR_CAPTURED_CAPITAL_DIVISOR);
	getDatabaseValue("OPINION_WEIGHT_LIBERATOR_CAPTURED_HOLY_CITY_DIVISOR",m_iOPINION_WEIGHT_LIBERATOR_CAPTURED_HOLY_CITY_DIVISOR);
	getDatabaseValue("OPINION_WEIGHT_LIBERATED_ONE_CITY",m_iOPINION_WEIGHT_LIBERATED_ONE_CITY);
	getDatabaseValue("OPINION_WEIGHT_LIBERATED_TWO_CITIES",m_iOPINION_WEIGHT_LIBERATED_TWO_CITIES);
	getDatabaseValue("OPINION_WEIGHT_LIBERATED_THREE_CITIES",m_iOPINION_WEIGHT_LIBERATED_THREE_CITIES);
	getDatabaseValue("OPINION_WEIGHT_EMBASSY",m_iOPINION_WEIGHT_EMBASSY);
	getDatabaseValue("OPINION_WEIGHT_DIPLOMAT",m_iOPINION_WEIGHT_DIPLOMAT);
	getDatabaseValue("OPINION_WEIGHT_DIPLOMAT_MOD",m_iOPINION_WEIGHT_DIPLOMAT_MOD);
	getDatabaseValue("OPINION_WEIGHT_CULTURE_BOMBED",m_iOPINION_WEIGHT_CULTURE_BOMBED);
	getDatabaseValue("OPINION_WEIGHT_PER_NEGATIVE_CONVERSION",m_iOPINION_WEIGHT_PER_NEGATIVE_CONVERSION);
	getDatabaseValue("OPINION_WEIGHT_ADOPTING_HIS_RELIGION",m_iOPINION_WEIGHT_ADOPTING_HIS_RELIGION);
	getDatabaseValue("OPINION_WEIGHT_ADOPTING_MY_RELIGION",m_iOPINION_WEIGHT_ADOPTING_MY_RELIGION);
	getDatabaseValue("OPINION_WEIGHT_SAME_MAJORITY_RELIGIONS",m_iOPINION_WEIGHT_SAME_MAJORITY_RELIGIONS);
	getDatabaseValue("OPINION_WEIGHT_DIFFERENT_STATE_RELIGIONS",m_iOPINION_WEIGHT_DIFFERENT_STATE_RELIGIONS);
	getDatabaseValue("OPINION_WEIGHT_DIFFERENT_MAJORITY_RELIGIONS",m_iOPINION_WEIGHT_DIFFERENT_MAJORITY_RELIGIONS);
	getDatabaseValue("OPINION_WEIGHT_WORLD_RELIGION_MODIFIER",m_iOPINION_WEIGHT_WORLD_RELIGION_MODIFIER);
	getDatabaseValue("OPINION_WEIGHT_SAME_LATE_POLICIES",m_iOPINION_WEIGHT_SAME_LATE_POLICIES);
	getDatabaseValue("OPINION_WEIGHT_DIFFERENT_LATE_POLICIES",m_iOPINION_WEIGHT_DIFFERENT_LATE_POLICIES);
	getDatabaseValue("OPINION_WEIGHT_WORLD_IDEOLOGY_MODIFIER",m_iOPINION_WEIGHT_WORLD_IDEOLOGY_MODIFIER);
	getDatabaseValue("OPINION_WEIGHT_IDEOLOGY_VASSAL_DIVISOR",m_iOPINION_WEIGHT_IDEOLOGY_VASSAL_DIVISOR);
	getDatabaseValue("OPINION_WEIGHT_BROKEN_MILITARY_PROMISE",m_iOPINION_WEIGHT_BROKEN_MILITARY_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_BROKEN_MILITARY_PROMISE_WORLD",m_iOPINION_WEIGHT_BROKEN_MILITARY_PROMISE_WORLD);
	getDatabaseValue("OPINION_WEIGHT_IGNORED_MILITARY_PROMISE",m_iOPINION_WEIGHT_IGNORED_MILITARY_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_BROKEN_EXPANSION_PROMISE",m_iOPINION_WEIGHT_BROKEN_EXPANSION_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_IGNORED_EXPANSION_PROMISE",m_iOPINION_WEIGHT_IGNORED_EXPANSION_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_BROKEN_BORDER_PROMISE",m_iOPINION_WEIGHT_BROKEN_BORDER_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_IGNORED_BORDER_PROMISE",m_iOPINION_WEIGHT_IGNORED_BORDER_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_BROKEN_CITY_STATE_PROMISE",m_iOPINION_WEIGHT_BROKEN_CITY_STATE_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_BROKEN_CITY_STATE_PROMISE_WORLD",m_iOPINION_WEIGHT_BROKEN_CITY_STATE_PROMISE_WORLD);
	getDatabaseValue("OPINION_WEIGHT_IGNORED_CITY_STATE_PROMISE",m_iOPINION_WEIGHT_IGNORED_CITY_STATE_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_BROKEN_BULLY_CITY_STATE_PROMISE",m_iOPINION_WEIGHT_BROKEN_BULLY_CITY_STATE_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_IGNORED_BULLY_CITY_STATE_PROMISE",m_iOPINION_WEIGHT_IGNORED_BULLY_CITY_STATE_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_BROKEN_SPY_PROMISE",m_iOPINION_WEIGHT_BROKEN_SPY_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_IGNORED_SPY_PROMISE",m_iOPINION_WEIGHT_IGNORED_SPY_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_FORGAVE_FOR_SPYING",m_iOPINION_WEIGHT_FORGAVE_FOR_SPYING);
	getDatabaseValue("OPINION_WEIGHT_BROKEN_NO_CONVERT_PROMISE",m_iOPINION_WEIGHT_BROKEN_NO_CONVERT_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_IGNORED_NO_CONVERT_PROMISE",m_iOPINION_WEIGHT_IGNORED_NO_CONVERT_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_BROKEN_NO_DIG_PROMISE",m_iOPINION_WEIGHT_BROKEN_NO_DIG_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_IGNORED_NO_DIG_PROMISE",m_iOPINION_WEIGHT_IGNORED_NO_DIG_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_BROKEN_COOP_WAR_PROMISE",m_iOPINION_WEIGHT_BROKEN_COOP_WAR_PROMISE);
	getDatabaseValue("OPINION_WEIGHT_KILLED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN",m_iOPINION_WEIGHT_KILLED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("OPINION_WEIGHT_KILLED_PROTECTED_MINOR",m_iOPINION_WEIGHT_KILLED_PROTECTED_MINOR);
	getDatabaseValue("OPINION_WEIGHT_KILLED_MANY_PROTECTED_MINORS",m_iOPINION_WEIGHT_KILLED_MANY_PROTECTED_MINORS);
	getDatabaseValue("OPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN",m_iOPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("OPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_RECENTLY_NUM_TURNS",m_iOPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_RECENTLY_NUM_TURNS);
	getDatabaseValue("OPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_RECENTLY",m_iOPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_RECENTLY);
	getDatabaseValue("OPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_WHILE_AGO",m_iOPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_WHILE_AGO);
	getDatabaseValue("OPINION_WEIGHT_ATTACKED_MANY_PROTECTED_MINORS",m_iOPINION_WEIGHT_ATTACKED_MANY_PROTECTED_MINORS);
	getDatabaseValue("OPINION_WEIGHT_BULLIED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN",m_iOPINION_WEIGHT_BULLIED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("OPINION_WEIGHT_BULLIED_PROTECTED_MINOR_RECENTLY_NUM_TURNS",m_iOPINION_WEIGHT_BULLIED_PROTECTED_MINOR_RECENTLY_NUM_TURNS);
	getDatabaseValue("OPINION_WEIGHT_BULLIED_PROTECTED_MINOR_RECENTLY",m_iOPINION_WEIGHT_BULLIED_PROTECTED_MINOR_RECENTLY);
	getDatabaseValue("OPINION_WEIGHT_BULLIED_PROTECTED_MINOR_WHILE_AGO",m_iOPINION_WEIGHT_BULLIED_PROTECTED_MINOR_WHILE_AGO);
	getDatabaseValue("OPINION_WEIGHT_BULLIED_MANY_PROTECTED_MINORS",m_iOPINION_WEIGHT_BULLIED_MANY_PROTECTED_MINORS);
	getDatabaseValue("OPINION_WEIGHT_SIDED_WITH_THEIR_MINOR_NUM_TURNS_UNTIL_FORGIVEN",m_iOPINION_WEIGHT_SIDED_WITH_THEIR_MINOR_NUM_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("OPINION_WEIGHT_SIDED_WITH_THEIR_MINOR",m_iOPINION_WEIGHT_SIDED_WITH_THEIR_MINOR);
	getDatabaseValue("OPINION_WEIGHT_SIDED_WITH_THEIR_MINOR_AGGRESSIVE_MOD",m_iOPINION_WEIGHT_SIDED_WITH_THEIR_MINOR_AGGRESSIVE_MOD);
	getDatabaseValue("OPINION_WEIGHT_DOF",m_iOPINION_WEIGHT_DOF);
	getDatabaseValue("OPINION_WEIGHT_DOF_MOST_VALUED_FRIEND",m_iOPINION_WEIGHT_DOF_MOST_VALUED_FRIEND);
	getDatabaseValue("OPINION_WEIGHT_DOF_TYPE_FRIENDS",m_iOPINION_WEIGHT_DOF_TYPE_FRIENDS);
	getDatabaseValue("OPINION_WEIGHT_DOF_TYPE_ALLIES",m_iOPINION_WEIGHT_DOF_TYPE_ALLIES);
	getDatabaseValue("OPINION_WEIGHT_DOF_TYPE_BATTLE_BROTHERS",m_iOPINION_WEIGHT_DOF_TYPE_BATTLE_BROTHERS);
	getDatabaseValue("OPINION_WEIGHT_DOF_WITH_FRIEND",m_iOPINION_WEIGHT_DOF_WITH_FRIEND);
	getDatabaseValue("OPINION_WEIGHT_DOF_WITH_FRIEND_SUBSEQUENT",m_iOPINION_WEIGHT_DOF_WITH_FRIEND_SUBSEQUENT);
	getDatabaseValue("OPINION_WEIGHT_DOF_WITH_MOST_VALUED_FRIEND",m_iOPINION_WEIGHT_DOF_WITH_MOST_VALUED_FRIEND);
	getDatabaseValue("OPINION_WEIGHT_DOF_WITH_MOST_VALUED_ALLY",m_iOPINION_WEIGHT_DOF_WITH_MOST_VALUED_ALLY);
	getDatabaseValue("OPINION_WEIGHT_DOF_WITH_ENEMY",m_iOPINION_WEIGHT_DOF_WITH_ENEMY);
	getDatabaseValue("OPINION_WEIGHT_DOF_WITH_ENEMY_SUBSEQUENT",m_iOPINION_WEIGHT_DOF_WITH_ENEMY_SUBSEQUENT);
	getDatabaseValue("OPINION_WEIGHT_DOF_WITH_BIGGEST_COMPETITOR",m_iOPINION_WEIGHT_DOF_WITH_BIGGEST_COMPETITOR);
	getDatabaseValue("OPINION_WEIGHT_DOF_WITH_BIGGEST_LEAGUE_RIVAL",m_iOPINION_WEIGHT_DOF_WITH_BIGGEST_LEAGUE_RIVAL);
	getDatabaseValue("OPINION_WEIGHT_BETRAYED_OUR_FRIEND_MULTIPLIER",m_iOPINION_WEIGHT_BETRAYED_OUR_FRIEND_MULTIPLIER);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_BY_FRIEND_EACH",m_iOPINION_WEIGHT_DENOUNCED_BY_FRIEND_EACH);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_BY_FRIEND_DONT_LIKE",m_iOPINION_WEIGHT_DENOUNCED_BY_FRIEND_DONT_LIKE);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_FRIEND_EACH",m_iOPINION_WEIGHT_DENOUNCED_FRIEND_EACH);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_ME_FRIENDS",m_iOPINION_WEIGHT_DENOUNCED_ME_FRIENDS);
	getDatabaseValue("OPINION_WEIGHT_WAR_FRIEND_EACH",m_iOPINION_WEIGHT_WAR_FRIEND_EACH);
	getDatabaseValue("OPINION_WEIGHT_WAR_ME_FRIENDS",m_iOPINION_WEIGHT_WAR_ME_FRIENDS);
	getDatabaseValue("OPINION_WEIGHT_RESURRECTOR_ATTACKED_US",m_iOPINION_WEIGHT_RESURRECTOR_ATTACKED_US);
	getDatabaseValue("OPINION_WEIGHT_REFUSED_REQUEST_EACH",m_iOPINION_WEIGHT_REFUSED_REQUEST_EACH);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_ME",m_iOPINION_WEIGHT_DENOUNCED_ME);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_THEM",m_iOPINION_WEIGHT_DENOUNCED_THEM);
	getDatabaseValue("OPINION_WEIGHT_MUTUAL_DENOUNCEMENT",m_iOPINION_WEIGHT_MUTUAL_DENOUNCEMENT);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_FRIEND",m_iOPINION_WEIGHT_DENOUNCED_FRIEND);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_FRIEND_SUBSEQUENT",m_iOPINION_WEIGHT_DENOUNCED_FRIEND_SUBSEQUENT);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_MOST_VALUED_FRIEND",m_iOPINION_WEIGHT_DENOUNCED_MOST_VALUED_FRIEND);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_MOST_VALUED_ALLY",m_iOPINION_WEIGHT_DENOUNCED_MOST_VALUED_ALLY);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_ENEMY",m_iOPINION_WEIGHT_DENOUNCED_ENEMY);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_ENEMY_SUBSEQUENT",m_iOPINION_WEIGHT_DENOUNCED_ENEMY_SUBSEQUENT);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_BIGGEST_COMPETITOR",m_iOPINION_WEIGHT_DENOUNCED_BIGGEST_COMPETITOR);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_BIGGEST_LEAGUE_RIVAL",m_iOPINION_WEIGHT_DENOUNCED_BIGGEST_LEAGUE_RIVAL);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_BY_THEIR_FRIEND",m_iOPINION_WEIGHT_DENOUNCED_BY_THEIR_FRIEND);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_BY_THEIR_FRIEND_SUBSEQUENT",m_iOPINION_WEIGHT_DENOUNCED_BY_THEIR_FRIEND_SUBSEQUENT);
	getDatabaseValue("OPINION_WEIGHT_DENOUNCED_BY_THEIR_KEY_FRIEND",m_iOPINION_WEIGHT_DENOUNCED_BY_THEIR_KEY_FRIEND);
	getDatabaseValue("RECKLESS_EXPANDER_CITIES_THRESHOLD",m_iRECKLESS_EXPANDER_CITIES_THRESHOLD);
	getDatabaseValue("RECKLESS_EXPANDER_LAND_THRESHOLD",m_iRECKLESS_EXPANDER_LAND_THRESHOLD);
	getDatabaseValue("OPINION_WEIGHT_RECKLESS_EXPANDER",m_iOPINION_WEIGHT_RECKLESS_EXPANDER);
	getDatabaseValue("OPINION_WEIGHT_RECKLESS_EXPANDER_PER_CITY",m_iOPINION_WEIGHT_RECKLESS_EXPANDER_PER_CITY);
	getDatabaseValue("OPINION_WEIGHT_RECKLESS_EXPANDER_PER_TILE",m_iOPINION_WEIGHT_RECKLESS_EXPANDER_PER_TILE);
	getDatabaseValue("OPINION_WEIGHT_RECKLESS_EXPANDER_STRATEGIC_MOD",m_iOPINION_WEIGHT_RECKLESS_EXPANDER_STRATEGIC_MOD);
	getDatabaseValue("WONDER_SPAMMER_THRESHOLD",m_iWONDER_SPAMMER_THRESHOLD);
	getDatabaseValue("OPINION_WEIGHT_WONDER_SPAMMER",m_iOPINION_WEIGHT_WONDER_SPAMMER);
	getDatabaseValue("OPINION_WEIGHT_WONDER_SPAMMER_PER_WONDER",m_iOPINION_WEIGHT_WONDER_SPAMMER_PER_WONDER);
	getDatabaseValue("OPINION_WEIGHT_WONDER_SPAMMER_CAP",m_iOPINION_WEIGHT_WONDER_SPAMMER_CAP);
	getDatabaseValue("OPINION_WEIGHT_WONDER_SPAMMER_STRATEGIC_MOD",m_iOPINION_WEIGHT_WONDER_SPAMMER_STRATEGIC_MOD);
	getDatabaseValue("OPINION_WEIGHT_TRADE_MAX",m_iOPINION_WEIGHT_TRADE_MAX);
	getDatabaseValue("OPINION_WEIGHT_STRATEGIC_TRADE_PARTNER_MULTIPLIER",m_iOPINION_WEIGHT_STRATEGIC_TRADE_PARTNER_MULTIPLIER);
	getDatabaseValue("OPINION_WEIGHT_COMMON_FOE_MAX",m_iOPINION_WEIGHT_COMMON_FOE_MAX);
	getDatabaseValue("OPINION_WEIGHT_ASSIST_MAX",m_iOPINION_WEIGHT_ASSIST_MAX);
	getDatabaseValue("OPINION_WEIGHT_LIBERATED_CAPITAL",m_iOPINION_WEIGHT_LIBERATED_CAPITAL);
	getDatabaseValue("OPINION_WEIGHT_LIBERATED_CAPITAL_VASSAL_MULTIPLIER",m_iOPINION_WEIGHT_LIBERATED_CAPITAL_VASSAL_MULTIPLIER);
	getDatabaseValue("OPINION_WEIGHT_LIBERATED_HOLY_CITY",m_iOPINION_WEIGHT_LIBERATED_HOLY_CITY);
	getDatabaseValue("OPINION_WEIGHT_LIBERATED_HOLY_CITY_VASSAL_MULTIPLIER",m_iOPINION_WEIGHT_LIBERATED_HOLY_CITY_VASSAL_MULTIPLIER);
	getDatabaseValue("OPINION_WEIGHT_LIBERATED_CITY",m_iOPINION_WEIGHT_LIBERATED_CITY);
	getDatabaseValue("OPINION_WEIGHT_LIBERATED_CITY_VASSAL_MULTIPLIER",m_iOPINION_WEIGHT_LIBERATED_CITY_VASSAL_MULTIPLIER);
	getDatabaseValue("OPINION_WEIGHT_RETURNED_CAPITAL",m_iOPINION_WEIGHT_RETURNED_CAPITAL);
	getDatabaseValue("OPINION_WEIGHT_RETURNED_CAPITAL_VASSAL_MULTIPLIER",m_iOPINION_WEIGHT_RETURNED_CAPITAL_VASSAL_MULTIPLIER);
	getDatabaseValue("OPINION_WEIGHT_RETURNED_HOLY_CITY",m_iOPINION_WEIGHT_RETURNED_HOLY_CITY);
	getDatabaseValue("OPINION_WEIGHT_RETURNED_HOLY_CITY_VASSAL_MULTIPLIER",m_iOPINION_WEIGHT_RETURNED_HOLY_CITY_VASSAL_MULTIPLIER);
	getDatabaseValue("OPINION_WEIGHT_GAVE_ASSISTANCE",m_iOPINION_WEIGHT_GAVE_ASSISTANCE);
	getDatabaseValue("OPINION_WEIGHT_PAID_TRIBUTE",m_iOPINION_WEIGHT_PAID_TRIBUTE);
	getDatabaseValue("OPINION_WEIGHT_NUKED_MAX",m_iOPINION_WEIGHT_NUKED_MAX);
	getDatabaseValue("CIVILIAN_KILLER_VALUE_PER_OPINION_WEIGHT",m_iCIVILIAN_KILLER_VALUE_PER_OPINION_WEIGHT);
	getDatabaseValue("CIVILIAN_KILLER_VALUE_PER_TURN_DECAY",m_iCIVILIAN_KILLER_VALUE_PER_TURN_DECAY);
	getDatabaseValue("OPINION_WEIGHT_CIVILIAN_KILLER_MAX",m_iOPINION_WEIGHT_CIVILIAN_KILLER_MAX);
	getDatabaseValue("OPINION_WEIGHT_CIVILIAN_KILLER_WORLD_THRESHOLD",m_iOPINION_WEIGHT_CIVILIAN_KILLER_WORLD_THRESHOLD);
	getDatabaseValue("OPINION_WEIGHT_CIVILIAN_KILLER_WORLD",m_iOPINION_WEIGHT_CIVILIAN_KILLER_WORLD);
	getDatabaseValue("OPINION_WEIGHT_PER_SIMILAR_POLICY",m_iOPINION_WEIGHT_PER_SIMILAR_POLICY);
	getDatabaseValue("OPINION_WEIGHT_PER_DIVERGENT_POLICY",m_iOPINION_WEIGHT_PER_DIVERGENT_POLICY);
	getDatabaseValue("OPINION_WEIGHT_SIMILAR_POLICIES",m_iOPINION_WEIGHT_SIMILAR_POLICIES);
	getDatabaseValue("OPINION_WEIGHT_DIVERGENT_POLICIES",m_iOPINION_WEIGHT_DIVERGENT_POLICIES);
	getDatabaseValue("POLICY_SCORE_NEEDY_THRESHOLD",m_iPOLICY_SCORE_NEEDY_THRESHOLD);
	getDatabaseValue("POLICY_SCORE_NEEDY_BONUS",m_iPOLICY_SCORE_NEEDY_BONUS);
	getDatabaseValue("OPINION_WEIGHT_PTP_SAME_MINOR_EACH",m_iOPINION_WEIGHT_PTP_SAME_MINOR_EACH);
	getDatabaseValue("OPINION_WEIGHT_PTP_SAME_MINOR_MIN",m_iOPINION_WEIGHT_PTP_SAME_MINOR_MIN);
	getDatabaseValue("OPINION_WEIGHT_PTP_SAME_MINOR_DIPLOMAT_MULTIPLIER",m_iOPINION_WEIGHT_PTP_SAME_MINOR_DIPLOMAT_MULTIPLIER);
	getDatabaseValue("OPINION_WEIGHT_CAPTURED_HOLY_CITY",m_iOPINION_WEIGHT_CAPTURED_HOLY_CITY);
	getDatabaseValue("OPINION_WEIGHT_CAPTURED_KEY_CITY_RETURNED_DIVISOR",m_iOPINION_WEIGHT_CAPTURED_KEY_CITY_RETURNED_DIVISOR);
	getDatabaseValue("OPINION_WEIGHT_CAPTURED_KEY_CITY_CAPITULATION_DIVISOR",m_iOPINION_WEIGHT_CAPTURED_KEY_CITY_CAPITULATION_DIVISOR);
	getDatabaseValue("OPINION_WEIGHT_ROBBED_BY",m_iOPINION_WEIGHT_ROBBED_BY);
	getDatabaseValue("OPINION_WEIGHT_INTRIGUE_SHARED_BY",m_iOPINION_WEIGHT_INTRIGUE_SHARED_BY);
	getDatabaseValue("OPINION_WEIGHT_INTRIGUE_SHARED_BY_SUBSEQUENT",m_iOPINION_WEIGHT_INTRIGUE_SHARED_BY_SUBSEQUENT);
	getDatabaseValue("OPINION_WEIGHT_CAPTURED_CAPITAL",m_iOPINION_WEIGHT_CAPTURED_CAPITAL);
	getDatabaseValue("OPINION_WEIGHT_PRIME_LEAGUE_COMPETITOR",m_iOPINION_WEIGHT_PRIME_LEAGUE_COMPETITOR);
	getDatabaseValue("OPINION_WEIGHT_LEAGUE_ALIGNMENT_ENEMY",m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_ENEMY);
	getDatabaseValue("OPINION_WEIGHT_LEAGUE_ALIGNMENT_HATRED",m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_HATRED);
	getDatabaseValue("OPINION_WEIGHT_LEAGUE_ALIGNMENT_RIVAL",m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_RIVAL);
	getDatabaseValue("OPINION_WEIGHT_LEAGUE_ALIGNMENT_FRIEND",m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_FRIEND);
	getDatabaseValue("OPINION_WEIGHT_LEAGUE_ALIGNMENT_CONFIDANT",m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_CONFIDANT);
	getDatabaseValue("OPINION_WEIGHT_LEAGUE_ALIGNMENT_ALLY",m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_ALLY);
	getDatabaseValue("OPINION_WEIGHT_LEAGUE_ALIGNMENT_LIBERATOR",m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_LIBERATOR);
	getDatabaseValue("OPINION_WEIGHT_PRIME_LEAGUE_COMPETITOR_DIPLOMAT",m_iOPINION_WEIGHT_PRIME_LEAGUE_COMPETITOR_DIPLOMAT);
	getDatabaseValue("OPINION_WEIGHT_LEAGUE_ALIGNMENT_ENEMY_DIPLOMAT",m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_ENEMY_DIPLOMAT);
	getDatabaseValue("OPINION_WEIGHT_LEAGUE_ALIGNMENT_HATRED_DIPLOMAT",m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_HATRED_DIPLOMAT);
	getDatabaseValue("OPINION_WEIGHT_LEAGUE_ALIGNMENT_RIVAL_DIPLOMAT",m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_RIVAL_DIPLOMAT);
	getDatabaseValue("OPINION_WEIGHT_LEAGUE_ALIGNMENT_FRIEND_DIPLOMAT",m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_FRIEND_DIPLOMAT);
	getDatabaseValue("OPINION_WEIGHT_LEAGUE_ALIGNMENT_CONFIDANT_DIPLOMAT",m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_CONFIDANT_DIPLOMAT);
	getDatabaseValue("OPINION_WEIGHT_LEAGUE_ALIGNMENT_ALLY_DIPLOMAT",m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_ALLY_DIPLOMAT);
	getDatabaseValue("OPINION_WEIGHT_LEAGUE_ALIGNMENT_LIBERATOR_DIPLOMAT",m_iOPINION_WEIGHT_LEAGUE_ALIGNMENT_LIBERATOR_DIPLOMAT);
	getDatabaseValue("OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL",m_iOPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL);
	getDatabaseValue("OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_STRONG",m_iOPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_STRONG);
	getDatabaseValue("OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_OVERWHELMING",m_iOPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_OVERWHELMING);
	getDatabaseValue("OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_DIPLOMAT_MULTIPLIER",m_iOPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_DIPLOMAT_MULTIPLIER);
	getDatabaseValue("OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_NUM_TURNS",m_iOPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_NUM_TURNS);
	getDatabaseValue("OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL",m_iOPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL);
	getDatabaseValue("OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_STRONG",m_iOPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_STRONG);
	getDatabaseValue("OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_OVERWHELMING",m_iOPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_OVERWHELMING);
	getDatabaseValue("OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_DIPLOMAT_MULTIPLIER",m_iOPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_DIPLOMAT_MULTIPLIER);
	getDatabaseValue("OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_NUM_TURNS",m_iOPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_NUM_TURNS);
	getDatabaseValue("OPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL",m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL);
	getDatabaseValue("OPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_MAX",m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_MAX);
	getDatabaseValue("OPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_DIPLOMAT_MULTIPLIER",m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_DIPLOMAT_MULTIPLIER);
	getDatabaseValue("OPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_NUM_TURNS",m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_NUM_TURNS);
	getDatabaseValue("OPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL",m_iOPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL);
	getDatabaseValue("OPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_MAX",m_iOPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_MAX);
	getDatabaseValue("OPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_DIPLOMAT_MULTIPLIER",m_iOPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_DIPLOMAT_MULTIPLIER);
	getDatabaseValue("OPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_NUM_TURNS",m_iOPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_NUM_TURNS);
	getDatabaseValue("OPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING",m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING);
	getDatabaseValue("OPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_MAX",m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_MAX);
	getDatabaseValue("OPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_DIPLOMAT_MULTIPLIER",m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_DIPLOMAT_MULTIPLIER);
	getDatabaseValue("OPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_NUM_TURNS",m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_NUM_TURNS);
	getDatabaseValue("OPINION_WEIGHT_PER_VOTE_PERCENT",m_iOPINION_WEIGHT_PER_VOTE_PERCENT);
	getDatabaseValue("OPINION_THRESHOLD_UNFORGIVABLE",m_iOPINION_THRESHOLD_UNFORGIVABLE);
	getDatabaseValue("OPINION_THRESHOLD_ENEMY",m_iOPINION_THRESHOLD_ENEMY);
	getDatabaseValue("OPINION_THRESHOLD_COMPETITOR",m_iOPINION_THRESHOLD_COMPETITOR);
	getDatabaseValue("OPINION_THRESHOLD_FAVORABLE",m_iOPINION_THRESHOLD_FAVORABLE);
	getDatabaseValue("OPINION_THRESHOLD_FRIEND",m_iOPINION_THRESHOLD_FRIEND);
	getDatabaseValue("OPINION_THRESHOLD_ALLY",m_iOPINION_THRESHOLD_ALLY);
	getDatabaseValue("APPROACH_NEUTRAL_HUMAN",m_iAPPROACH_NEUTRAL_HUMAN);
	getDatabaseValue("APPROACH_FRIENDLY_HUMAN",m_iAPPROACH_FRIENDLY_HUMAN);
	getDatabaseValue("APPROACH_AFRAID_HUMAN",m_iAPPROACH_AFRAID_HUMAN);
	getDatabaseValue("APPROACH_GUARDED_HUMAN",m_iAPPROACH_GUARDED_HUMAN);
	getDatabaseValue("APPROACH_DECEPTIVE_HUMAN",m_iAPPROACH_DECEPTIVE_HUMAN);
	getDatabaseValue("APPROACH_HOSTILE_HUMAN",m_iAPPROACH_HOSTILE_HUMAN);
	getDatabaseValue("APPROACH_WAR_HUMAN",m_iAPPROACH_WAR_HUMAN);
	getDatabaseValue("APPROACH_NEUTRAL_HUMAN_PERCENT",m_iAPPROACH_NEUTRAL_HUMAN_PERCENT);
	getDatabaseValue("APPROACH_FRIENDLY_HUMAN_PERCENT",m_iAPPROACH_FRIENDLY_HUMAN_PERCENT);
	getDatabaseValue("APPROACH_AFRAID_HUMAN_PERCENT",m_iAPPROACH_AFRAID_HUMAN_PERCENT);
	getDatabaseValue("APPROACH_GUARDED_HUMAN_PERCENT",m_iAPPROACH_GUARDED_HUMAN_PERCENT);
	getDatabaseValue("APPROACH_DECEPTIVE_HUMAN_PERCENT",m_iAPPROACH_DECEPTIVE_HUMAN_PERCENT);
	getDatabaseValue("APPROACH_HOSTILE_HUMAN_PERCENT",m_iAPPROACH_HOSTILE_HUMAN_PERCENT);
	getDatabaseValue("APPROACH_WAR_HUMAN_PERCENT",m_iAPPROACH_WAR_HUMAN_PERCENT);
	getDatabaseValue("APPROACH_NEUTRAL_AI",m_iAPPROACH_NEUTRAL_AI);
	getDatabaseValue("APPROACH_FRIENDLY_AI",m_iAPPROACH_FRIENDLY_AI);
	getDatabaseValue("APPROACH_AFRAID_AI",m_iAPPROACH_AFRAID_AI);
	getDatabaseValue("APPROACH_GUARDED_AI",m_iAPPROACH_GUARDED_AI);
	getDatabaseValue("APPROACH_DECEPTIVE_AI",m_iAPPROACH_DECEPTIVE_AI);
	getDatabaseValue("APPROACH_HOSTILE_AI",m_iAPPROACH_HOSTILE_AI);
	getDatabaseValue("APPROACH_WAR_AI",m_iAPPROACH_WAR_AI);
	getDatabaseValue("APPROACH_NEUTRAL_AI_PERCENT",m_iAPPROACH_NEUTRAL_AI_PERCENT);
	getDatabaseValue("APPROACH_FRIENDLY_AI_PERCENT",m_iAPPROACH_FRIENDLY_AI_PERCENT);
	getDatabaseValue("APPROACH_AFRAID_AI_PERCENT",m_iAPPROACH_AFRAID_AI_PERCENT);
	getDatabaseValue("APPROACH_GUARDED_AI_PERCENT",m_iAPPROACH_GUARDED_AI_PERCENT);
	getDatabaseValue("APPROACH_DECEPTIVE_AI_PERCENT",m_iAPPROACH_DECEPTIVE_AI_PERCENT);
	getDatabaseValue("APPROACH_HOSTILE_AI_PERCENT",m_iAPPROACH_HOSTILE_AI_PERCENT);
	getDatabaseValue("APPROACH_WAR_AI_PERCENT",m_iAPPROACH_WAR_AI_PERCENT);
	getDatabaseValue("MAJOR_WAR_MULTIPLIER_TARGET_SOFT",m_iMAJOR_WAR_MULTIPLIER_TARGET_SOFT);
	getDatabaseValue("MAJOR_WAR_MULTIPLIER_TARGET_FAVORABLE",m_iMAJOR_WAR_MULTIPLIER_TARGET_FAVORABLE);
	getDatabaseValue("MAJOR_WAR_MULTIPLIER_TARGET_AVERAGE",m_iMAJOR_WAR_MULTIPLIER_TARGET_AVERAGE);
	getDatabaseValue("MAJOR_WAR_MULTIPLIER_TARGET_BAD",m_iMAJOR_WAR_MULTIPLIER_TARGET_BAD);
	getDatabaseValue("MAJOR_WAR_MULTIPLIER_TARGET_IMPOSSIBLE",m_iMAJOR_WAR_MULTIPLIER_TARGET_IMPOSSIBLE);
	getDatabaseValue("CONQUEST_WAR_MULTIPLIER_TARGET_SOFT",m_iCONQUEST_WAR_MULTIPLIER_TARGET_SOFT);
	getDatabaseValue("CONQUEST_WAR_MULTIPLIER_TARGET_FAVORABLE",m_iCONQUEST_WAR_MULTIPLIER_TARGET_FAVORABLE);
	getDatabaseValue("CONQUEST_WAR_MULTIPLIER_TARGET_AVERAGE",m_iCONQUEST_WAR_MULTIPLIER_TARGET_AVERAGE);
	getDatabaseValue("CONQUEST_WAR_MULTIPLIER_TARGET_BAD",m_iCONQUEST_WAR_MULTIPLIER_TARGET_BAD);
	getDatabaseValue("CONQUEST_WAR_MULTIPLIER_TARGET_IMPOSSIBLE",m_iCONQUEST_WAR_MULTIPLIER_TARGET_IMPOSSIBLE);
	getDatabaseValue("APPROACH_MULTIPLIER_PROXIMITY_NEIGHBORS",m_iAPPROACH_MULTIPLIER_PROXIMITY_NEIGHBORS);
	getDatabaseValue("APPROACH_MULTIPLIER_PROXIMITY_CLOSE",m_iAPPROACH_MULTIPLIER_PROXIMITY_CLOSE);
	getDatabaseValue("APPROACH_MULTIPLIER_PROXIMITY_FAR",m_iAPPROACH_MULTIPLIER_PROXIMITY_FAR);
	getDatabaseValue("APPROACH_MULTIPLIER_PROXIMITY_DISTANT",m_iAPPROACH_MULTIPLIER_PROXIMITY_DISTANT);
	getDatabaseValue("APPROACH_NEUTRAL_DEFAULT",m_iAPPROACH_NEUTRAL_DEFAULT);
	getDatabaseValue("APPROACH_BIAS_FOR_CURRENT",m_iAPPROACH_BIAS_FOR_CURRENT);
	getDatabaseValue("APPROACH_WAR_CURRENTLY_DECEPTIVE",m_iAPPROACH_WAR_CURRENTLY_DECEPTIVE);
	getDatabaseValue("APPROACH_HOSTILE_CURRENTLY_HOSTILE",m_iAPPROACH_HOSTILE_CURRENTLY_HOSTILE);
	getDatabaseValue("APPROACH_WAR_CURRENTLY_WAR",m_iAPPROACH_WAR_CURRENTLY_WAR);
	getDatabaseValue("APPROACH_RANDOM_PERCENT",m_iAPPROACH_RANDOM_PERCENT);
	getDatabaseValue("APPROACH_WAR_CONQUEST_GRAND_STRATEGY",m_iAPPROACH_WAR_CONQUEST_GRAND_STRATEGY);
	getDatabaseValue("APPROACH_OPINION_UNFORGIVABLE_WAR",m_iAPPROACH_OPINION_UNFORGIVABLE_WAR);
	getDatabaseValue("APPROACH_OPINION_UNFORGIVABLE_HOSTILE",m_iAPPROACH_OPINION_UNFORGIVABLE_HOSTILE);
	getDatabaseValue("APPROACH_OPINION_UNFORGIVABLE_DECEPTIVE",m_iAPPROACH_OPINION_UNFORGIVABLE_DECEPTIVE);
	getDatabaseValue("APPROACH_OPINION_UNFORGIVABLE_GUARDED",m_iAPPROACH_OPINION_UNFORGIVABLE_GUARDED);
	getDatabaseValue("APPROACH_OPINION_ENEMY_WAR",m_iAPPROACH_OPINION_ENEMY_WAR);
	getDatabaseValue("APPROACH_OPINION_ENEMY_HOSTILE",m_iAPPROACH_OPINION_ENEMY_HOSTILE);
	getDatabaseValue("APPROACH_OPINION_ENEMY_DECEPTIVE",m_iAPPROACH_OPINION_ENEMY_DECEPTIVE);
	getDatabaseValue("APPROACH_OPINION_ENEMY_GUARDED",m_iAPPROACH_OPINION_ENEMY_GUARDED);
	getDatabaseValue("APPROACH_OPINION_COMPETITOR_WAR",m_iAPPROACH_OPINION_COMPETITOR_WAR);
	getDatabaseValue("APPROACH_OPINION_COMPETITOR_HOSTILE",m_iAPPROACH_OPINION_COMPETITOR_HOSTILE);
	getDatabaseValue("APPROACH_OPINION_COMPETITOR_DECEPTIVE",m_iAPPROACH_OPINION_COMPETITOR_DECEPTIVE);
	getDatabaseValue("APPROACH_OPINION_COMPETITOR_GUARDED",m_iAPPROACH_OPINION_COMPETITOR_GUARDED);
	getDatabaseValue("APPROACH_OPINION_NEUTRAL_DECEPTIVE",m_iAPPROACH_OPINION_NEUTRAL_DECEPTIVE);
	getDatabaseValue("APPROACH_OPINION_NEUTRAL_FRIENDLY",m_iAPPROACH_OPINION_NEUTRAL_FRIENDLY);
	getDatabaseValue("APPROACH_OPINION_FAVORABLE_HOSTILE",m_iAPPROACH_OPINION_FAVORABLE_HOSTILE);
	getDatabaseValue("APPROACH_OPINION_FAVORABLE_DECEPTIVE",m_iAPPROACH_OPINION_FAVORABLE_DECEPTIVE);
	getDatabaseValue("APPROACH_OPINION_FAVORABLE_FRIENDLY",m_iAPPROACH_OPINION_FAVORABLE_FRIENDLY);
	getDatabaseValue("APPROACH_OPINION_FRIEND_HOSTILE",m_iAPPROACH_OPINION_FRIEND_HOSTILE);
	getDatabaseValue("APPROACH_OPINION_FRIEND_FRIENDLY",m_iAPPROACH_OPINION_FRIEND_FRIENDLY);
	getDatabaseValue("APPROACH_OPINION_ALLY_FRIENDLY",m_iAPPROACH_OPINION_ALLY_FRIENDLY);
	getDatabaseValue("APPROACH_DECEPTIVE_WORKING_WITH_PLAYER",m_iAPPROACH_DECEPTIVE_WORKING_WITH_PLAYER);
	getDatabaseValue("APPROACH_FRIENDLY_WORKING_WITH_PLAYER",m_iAPPROACH_FRIENDLY_WORKING_WITH_PLAYER);
	getDatabaseValue("APPROACH_HOSTILE_WORKING_WITH_PLAYER",m_iAPPROACH_HOSTILE_WORKING_WITH_PLAYER);
	getDatabaseValue("APPROACH_GUARDED_WORKING_WITH_PLAYER",m_iAPPROACH_GUARDED_WORKING_WITH_PLAYER);
	getDatabaseValue("APPROACH_DECEPTIVE_WORKING_AGAINST_PLAYER",m_iAPPROACH_DECEPTIVE_WORKING_AGAINST_PLAYER);
	getDatabaseValue("APPROACH_HOSTILE_WORKING_AGAINST_PLAYER",m_iAPPROACH_HOSTILE_WORKING_AGAINST_PLAYER);
	getDatabaseValue("APPROACH_WAR_WORKING_AGAINST_PLAYER",m_iAPPROACH_WAR_WORKING_AGAINST_PLAYER);
	getDatabaseValue("APPROACH_WAR_DENOUNCED",m_iAPPROACH_WAR_DENOUNCED);
	getDatabaseValue("APPROACH_HOSTILE_DENOUNCED",m_iAPPROACH_HOSTILE_DENOUNCED);
	getDatabaseValue("APPROACH_GUARDED_DENOUNCED",m_iAPPROACH_GUARDED_DENOUNCED);
	getDatabaseValue("APPROACH_FRIENDLY_DENOUNCED",m_iAPPROACH_FRIENDLY_DENOUNCED);
	getDatabaseValue("APPROACH_DECEPTIVE_DENOUNCED",m_iAPPROACH_DECEPTIVE_DENOUNCED);
	getDatabaseValue("APPROACH_ATTACKED_PROTECTED_MINOR_WAR",m_iAPPROACH_ATTACKED_PROTECTED_MINOR_WAR);
	getDatabaseValue("APPROACH_ATTACKED_PROTECTED_MINOR_HOSTILE",m_iAPPROACH_ATTACKED_PROTECTED_MINOR_HOSTILE);
	getDatabaseValue("APPROACH_ATTACKED_PROTECTED_MINOR_GUARDED",m_iAPPROACH_ATTACKED_PROTECTED_MINOR_GUARDED);
	getDatabaseValue("APPROACH_ATTACKED_PROTECTED_MINOR_PAST_WAR",m_iAPPROACH_ATTACKED_PROTECTED_MINOR_PAST_WAR);
	getDatabaseValue("APPROACH_ATTACKED_PROTECTED_MINOR_PAST_HOSTILE",m_iAPPROACH_ATTACKED_PROTECTED_MINOR_PAST_HOSTILE);
	getDatabaseValue("APPROACH_ATTACKED_PROTECTED_MINOR_PAST_GUARDED",m_iAPPROACH_ATTACKED_PROTECTED_MINOR_PAST_GUARDED);
	getDatabaseValue("APPROACH_DECEPTIVE_MILITARY_THREAT_CRITICAL",m_iAPPROACH_DECEPTIVE_MILITARY_THREAT_CRITICAL);
	getDatabaseValue("APPROACH_GUARDED_MILITARY_THREAT_CRITICAL",m_iAPPROACH_GUARDED_MILITARY_THREAT_CRITICAL);
	getDatabaseValue("APPROACH_AFRAID_MILITARY_THREAT_CRITICAL",m_iAPPROACH_AFRAID_MILITARY_THREAT_CRITICAL);
	getDatabaseValue("APPROACH_DECEPTIVE_DEMAND",m_iAPPROACH_DECEPTIVE_DEMAND);
	getDatabaseValue("APPROACH_FRIENDLY_DEMAND",m_iAPPROACH_FRIENDLY_DEMAND);
	getDatabaseValue("APPROACH_WAR_BROKEN_MILITARY_PROMISE",m_iAPPROACH_WAR_BROKEN_MILITARY_PROMISE);
	getDatabaseValue("APPROACH_DECEPTIVE_BROKEN_MILITARY_PROMISE",m_iAPPROACH_DECEPTIVE_BROKEN_MILITARY_PROMISE);
	getDatabaseValue("APPROACH_FRIENDLY_BROKEN_MILITARY_PROMISE",m_iAPPROACH_FRIENDLY_BROKEN_MILITARY_PROMISE);
	getDatabaseValue("APPROACH_WAR_BROKEN_MILITARY_PROMISE_WORLD",m_iAPPROACH_WAR_BROKEN_MILITARY_PROMISE_WORLD);
	getDatabaseValue("APPROACH_DECEPTIVE_BROKEN_MILITARY_PROMISE_WORLD",m_iAPPROACH_DECEPTIVE_BROKEN_MILITARY_PROMISE_WORLD);
	getDatabaseValue("APPROACH_FRIENDLY_BROKEN_MILITARY_PROMISE_WORLD",m_iAPPROACH_FRIENDLY_BROKEN_MILITARY_PROMISE_WORLD);
	getDatabaseValue("APPROACH_DECEPTIVE_IGNORED_MILITARY_PROMISE",m_iAPPROACH_DECEPTIVE_IGNORED_MILITARY_PROMISE);
	getDatabaseValue("APPROACH_FRIENDLY_IGNORED_MILITARY_PROMISE",m_iAPPROACH_FRIENDLY_IGNORED_MILITARY_PROMISE);
	getDatabaseValue("APPROACH_WAR_BROKEN_EXPANSION_PROMISE",m_iAPPROACH_WAR_BROKEN_EXPANSION_PROMISE);
	getDatabaseValue("APPROACH_DECEPTIVE_BROKEN_EXPANSION_PROMISE",m_iAPPROACH_DECEPTIVE_BROKEN_EXPANSION_PROMISE);
	getDatabaseValue("APPROACH_FRIENDLY_BROKEN_EXPANSION_PROMISE",m_iAPPROACH_FRIENDLY_BROKEN_EXPANSION_PROMISE);
	getDatabaseValue("APPROACH_WAR_IGNORED_EXPANSION_PROMISE",m_iAPPROACH_WAR_IGNORED_EXPANSION_PROMISE);
	getDatabaseValue("APPROACH_DECEPTIVE_IGNORED_EXPANSION_PROMISE",m_iAPPROACH_DECEPTIVE_IGNORED_EXPANSION_PROMISE);
	getDatabaseValue("APPROACH_FRIENDLY_IGNORED_EXPANSION_PROMISE",m_iAPPROACH_FRIENDLY_IGNORED_EXPANSION_PROMISE);
	getDatabaseValue("APPROACH_WAR_BROKEN_BORDER_PROMISE",m_iAPPROACH_WAR_BROKEN_BORDER_PROMISE);
	getDatabaseValue("APPROACH_DECEPTIVE_BROKEN_BORDER_PROMISE",m_iAPPROACH_DECEPTIVE_BROKEN_BORDER_PROMISE);
	getDatabaseValue("APPROACH_FRIENDLY_BROKEN_BORDER_PROMISE",m_iAPPROACH_FRIENDLY_BROKEN_BORDER_PROMISE);
	getDatabaseValue("APPROACH_WAR_IGNORED_BORDER_PROMISE",m_iAPPROACH_WAR_IGNORED_BORDER_PROMISE);
	getDatabaseValue("APPROACH_DECEPTIVE_IGNORED_BORDER_PROMISE",m_iAPPROACH_DECEPTIVE_IGNORED_BORDER_PROMISE);
	getDatabaseValue("APPROACH_FRIENDLY_IGNORED_BORDER_PROMISE",m_iAPPROACH_FRIENDLY_IGNORED_BORDER_PROMISE);
	getDatabaseValue("APPROACH_WAR_BROKEN_CITY_STATE_PROMISE",m_iAPPROACH_WAR_BROKEN_CITY_STATE_PROMISE);
	getDatabaseValue("APPROACH_DECEPTIVE_BROKEN_CITY_STATE_PROMISE",m_iAPPROACH_DECEPTIVE_BROKEN_CITY_STATE_PROMISE);
	getDatabaseValue("APPROACH_FRIENDLY_BROKEN_CITY_STATE_PROMISE",m_iAPPROACH_FRIENDLY_BROKEN_CITY_STATE_PROMISE);
	getDatabaseValue("APPROACH_WAR_BROKEN_CITY_STATE_PROMISE_WORLD",m_iAPPROACH_WAR_BROKEN_CITY_STATE_PROMISE_WORLD);
	getDatabaseValue("APPROACH_DECEPTIVE_BROKEN_CITY_STATE_PROMISE_WORLD",m_iAPPROACH_DECEPTIVE_BROKEN_CITY_STATE_PROMISE_WORLD);
	getDatabaseValue("APPROACH_FRIENDLY_BROKEN_CITY_STATE_PROMISE_WORLD",m_iAPPROACH_FRIENDLY_BROKEN_CITY_STATE_PROMISE_WORLD);
	getDatabaseValue("APPROACH_WAR_IGNORED_CITY_STATE_PROMISE",m_iAPPROACH_WAR_IGNORED_CITY_STATE_PROMISE);
	getDatabaseValue("APPROACH_DECEPTIVE_IGNORED_CITY_STATE_PROMISE",m_iAPPROACH_DECEPTIVE_IGNORED_CITY_STATE_PROMISE);
	getDatabaseValue("APPROACH_FRIENDLY_IGNORED_CITY_STATE_PROMISE",m_iAPPROACH_FRIENDLY_IGNORED_CITY_STATE_PROMISE);
	getDatabaseValue("APPROACH_FRIENDLY_MILITARY_THREAT_CRITICAL",m_iAPPROACH_FRIENDLY_MILITARY_THREAT_CRITICAL);
	getDatabaseValue("APPROACH_DECEPTIVE_MILITARY_THREAT_SEVERE",m_iAPPROACH_DECEPTIVE_MILITARY_THREAT_SEVERE);
	getDatabaseValue("APPROACH_GUARDED_MILITARY_THREAT_SEVERE",m_iAPPROACH_GUARDED_MILITARY_THREAT_SEVERE);
	getDatabaseValue("APPROACH_AFRAID_MILITARY_THREAT_SEVERE",m_iAPPROACH_AFRAID_MILITARY_THREAT_SEVERE);
	getDatabaseValue("APPROACH_FRIENDLY_MILITARY_THREAT_SEVERE",m_iAPPROACH_FRIENDLY_MILITARY_THREAT_SEVERE);
	getDatabaseValue("APPROACH_DECEPTIVE_MILITARY_THREAT_MAJOR",m_iAPPROACH_DECEPTIVE_MILITARY_THREAT_MAJOR);
	getDatabaseValue("APPROACH_GUARDED_MILITARY_THREAT_MAJOR",m_iAPPROACH_GUARDED_MILITARY_THREAT_MAJOR);
	getDatabaseValue("APPROACH_AFRAID_MILITARY_THREAT_MAJOR",m_iAPPROACH_AFRAID_MILITARY_THREAT_MAJOR);
	getDatabaseValue("APPROACH_FRIENDLY_MILITARY_THREAT_MAJOR",m_iAPPROACH_FRIENDLY_MILITARY_THREAT_MAJOR);
	getDatabaseValue("APPROACH_DECEPTIVE_MILITARY_THREAT_MINOR",m_iAPPROACH_DECEPTIVE_MILITARY_THREAT_MINOR);
	getDatabaseValue("APPROACH_GUARDED_MILITARY_THREAT_MINOR",m_iAPPROACH_GUARDED_MILITARY_THREAT_MINOR);
	getDatabaseValue("APPROACH_AFRAID_MILITARY_THREAT_MINOR",m_iAPPROACH_AFRAID_MILITARY_THREAT_MINOR);
	getDatabaseValue("APPROACH_FRIENDLY_MILITARY_THREAT_MINOR",m_iAPPROACH_FRIENDLY_MILITARY_THREAT_MINOR);
	getDatabaseValue("APPROACH_HOSTILE_MILITARY_THREAT_NONE",m_iAPPROACH_HOSTILE_MILITARY_THREAT_NONE);
	getDatabaseValue("APPROACH_WAR_AT_WAR_WITH_PLAYER_WARS_NEUTRAL",m_iAPPROACH_WAR_AT_WAR_WITH_PLAYER_WARS_NEUTRAL);
	getDatabaseValue("APPROACH_WAR_AT_WAR_WITH_PLAYER_WARS_WINNING",m_iAPPROACH_WAR_AT_WAR_WITH_PLAYER_WARS_WINNING);
	getDatabaseValue("APPROACH_WAR_AT_WAR_WITH_PLAYER_WARS_LOSING",m_iAPPROACH_WAR_AT_WAR_WITH_PLAYER_WARS_LOSING);
	getDatabaseValue("APPROACH_HOSTILE_AT_WAR_WITH_PLAYER",m_iAPPROACH_HOSTILE_AT_WAR_WITH_PLAYER);
	getDatabaseValue("APPROACH_DECEPTIVE_AT_WAR_WITH_PLAYER",m_iAPPROACH_DECEPTIVE_AT_WAR_WITH_PLAYER);
	getDatabaseValue("APPROACH_GUARDED_AT_WAR_WITH_PLAYER",m_iAPPROACH_GUARDED_AT_WAR_WITH_PLAYER);
	getDatabaseValue("APPROACH_FRIENDLY_AT_WAR_WITH_PLAYER",m_iAPPROACH_FRIENDLY_AT_WAR_WITH_PLAYER);
	getDatabaseValue("APPROACH_WAR_PLANNING_WAR_WITH_ANOTHER_PLAYER",m_iAPPROACH_WAR_PLANNING_WAR_WITH_ANOTHER_PLAYER);
	getDatabaseValue("APPROACH_HOSTILE_PLANNING_WAR_WITH_ANOTHER_PLAYER",m_iAPPROACH_HOSTILE_PLANNING_WAR_WITH_ANOTHER_PLAYER);
	getDatabaseValue("APPROACH_DECEPTIVE_PLANNING_WAR_WITH_ANOTHER_PLAYER",m_iAPPROACH_DECEPTIVE_PLANNING_WAR_WITH_ANOTHER_PLAYER);
	getDatabaseValue("APPROACH_GUARDED_PLANNING_WAR_WITH_ANOTHER_PLAYER",m_iAPPROACH_GUARDED_PLANNING_WAR_WITH_ANOTHER_PLAYER);
	getDatabaseValue("APPROACH_FRIENDLY_PLANNING_WAR_WITH_ANOTHER_PLAYER",m_iAPPROACH_FRIENDLY_PLANNING_WAR_WITH_ANOTHER_PLAYER);
	getDatabaseValue("APPROACH_WAR_HOSTILE_WITH_ANOTHER_PLAYER",m_iAPPROACH_WAR_HOSTILE_WITH_ANOTHER_PLAYER);
	getDatabaseValue("APPROACH_HOSTILE_HOSTILE_WITH_ANOTHER_PLAYER",m_iAPPROACH_HOSTILE_HOSTILE_WITH_ANOTHER_PLAYER);
	getDatabaseValue("APPROACH_DECEPTIVE_HOSTILE_WITH_ANOTHER_PLAYER",m_iAPPROACH_DECEPTIVE_HOSTILE_WITH_ANOTHER_PLAYER);
	getDatabaseValue("APPROACH_FRIENDLY_HOSTILE_WITH_ANOTHER_PLAYER",m_iAPPROACH_FRIENDLY_HOSTILE_WITH_ANOTHER_PLAYER);
	getDatabaseValue("APPROACH_WAR_AFRAID_WITH_ANOTHER_PLAYER",m_iAPPROACH_WAR_AFRAID_WITH_ANOTHER_PLAYER);
	getDatabaseValue("APPROACH_HOSTILE_AFRAID_WITH_ANOTHER_PLAYER",m_iAPPROACH_HOSTILE_AFRAID_WITH_ANOTHER_PLAYER);
	getDatabaseValue("APPROACH_DECEPTIVE_AFRAID_WITH_ANOTHER_PLAYER",m_iAPPROACH_DECEPTIVE_AFRAID_WITH_ANOTHER_PLAYER);
	getDatabaseValue("APPROACH_FRIENDLY_AFRAID_WITH_ANOTHER_PLAYER",m_iAPPROACH_FRIENDLY_AFRAID_WITH_ANOTHER_PLAYER);
	getDatabaseValue("APPROACH_WAR_PROJECTION_DESTRUCTION_PERCENT",m_iAPPROACH_WAR_PROJECTION_DESTRUCTION_PERCENT);
	getDatabaseValue("APPROACH_WAR_PROJECTION_DEFEAT_PERCENT",m_iAPPROACH_WAR_PROJECTION_DEFEAT_PERCENT);
	getDatabaseValue("APPROACH_WAR_PROJECTION_STALEMATE_PERCENT",m_iAPPROACH_WAR_PROJECTION_STALEMATE_PERCENT);
	getDatabaseValue("APPROACH_WAR_PROJECTION_UNKNOWN_PERCENT",m_iAPPROACH_WAR_PROJECTION_UNKNOWN_PERCENT);
	getDatabaseValue("APPROACH_WAR_PROJECTION_GOOD_PERCENT",m_iAPPROACH_WAR_PROJECTION_GOOD_PERCENT);
	getDatabaseValue("APPROACH_WAR_PROJECTION_VERY_GOOD_PERCENT",m_iAPPROACH_WAR_PROJECTION_VERY_GOOD_PERCENT);
	getDatabaseValue("APPROACH_GUARDED_PROJECTION_DESTRUCTION_PERCENT",m_iAPPROACH_GUARDED_PROJECTION_DESTRUCTION_PERCENT);
	getDatabaseValue("APPROACH_GUARDED_PROJECTION_DEFEAT_PERCENT",m_iAPPROACH_GUARDED_PROJECTION_DEFEAT_PERCENT);
	getDatabaseValue("APPROACH_GUARDED_PROJECTION_STALEMATE_PERCENT",m_iAPPROACH_GUARDED_PROJECTION_STALEMATE_PERCENT);
	getDatabaseValue("APPROACH_GUARDED_PROJECTION_UNKNOWN_PERCENT",m_iAPPROACH_GUARDED_PROJECTION_UNKNOWN_PERCENT);
	getDatabaseValue("APPROACH_GUARDED_PROJECTION_GOOD_PERCENT",m_iAPPROACH_GUARDED_PROJECTION_GOOD_PERCENT);
	getDatabaseValue("APPROACH_GUARDED_PROJECTION_VERY_GOOD_PERCENT",m_iAPPROACH_GUARDED_PROJECTION_VERY_GOOD_PERCENT);
	getDatabaseValue("TURNS_SINCE_PEACE_WEIGHT_DAMPENER",m_iTURNS_SINCE_PEACE_WEIGHT_DAMPENER);
	getDatabaseValue("APPROACH_WAR_HAS_MADE_PEACE_BEFORE_PERCENT",m_iAPPROACH_WAR_HAS_MADE_PEACE_BEFORE_PERCENT);
	getDatabaseValue("APPROACH_WAR_RECKLESS_EXPANDER",m_iAPPROACH_WAR_RECKLESS_EXPANDER);
	getDatabaseValue("APPROACH_WAR_PROXIMITY_NEIGHBORS",m_iAPPROACH_WAR_PROXIMITY_NEIGHBORS);
	getDatabaseValue("APPROACH_WAR_PROXIMITY_NEIGHBORS_EARLY_GAME",m_iAPPROACH_WAR_PROXIMITY_NEIGHBORS_EARLY_GAME);
	getDatabaseValue("APPROACH_WAR_PROXIMITY_CLOSE",m_iAPPROACH_WAR_PROXIMITY_CLOSE);
	getDatabaseValue("APPROACH_WAR_PROXIMITY_CLOSE_EARLY_GAME",m_iAPPROACH_WAR_PROXIMITY_CLOSE_EARLY_GAME);
	getDatabaseValue("APPROACH_WAR_PROXIMITY_FAR",m_iAPPROACH_WAR_PROXIMITY_FAR);
	getDatabaseValue("APPROACH_WAR_PROXIMITY_DISTANT",m_iAPPROACH_WAR_PROXIMITY_DISTANT);
	getDatabaseValue("MINOR_APPROACH_IGNORE_DEFAULT",m_iMINOR_APPROACH_IGNORE_DEFAULT);
	getDatabaseValue("MINOR_APPROACH_BIAS_FOR_CURRENT",m_iMINOR_APPROACH_BIAS_FOR_CURRENT);
	getDatabaseValue("MINOR_APPROACH_IGNORE_CURRENTLY_WAR",m_iMINOR_APPROACH_IGNORE_CURRENTLY_WAR);
	getDatabaseValue("MINOR_APPROACH_WAR_CONQUEST_GRAND_STRATEGY",m_iMINOR_APPROACH_WAR_CONQUEST_GRAND_STRATEGY);
	getDatabaseValue("MINOR_APPROACH_PROTECTIVE_CONQUEST_GRAND_STRATEGY",m_iMINOR_APPROACH_PROTECTIVE_CONQUEST_GRAND_STRATEGY);
	getDatabaseValue("MINOR_APPROACH_FRIENDLY_CONQUEST_GRAND_STRATEGY",m_iMINOR_APPROACH_FRIENDLY_CONQUEST_GRAND_STRATEGY);
	getDatabaseValue("MINOR_APPROACH_WAR_CONQUEST_GRAND_STRATEGY_NEIGHBORS",m_iMINOR_APPROACH_WAR_CONQUEST_GRAND_STRATEGY_NEIGHBORS);
	getDatabaseValue("MINOR_APPROACH_WAR_DIPLO_GRAND_STRATEGY",m_iMINOR_APPROACH_WAR_DIPLO_GRAND_STRATEGY);
	getDatabaseValue("MINOR_APPROACH_IGNORE_DIPLO_GRAND_STRATEGY",m_iMINOR_APPROACH_IGNORE_DIPLO_GRAND_STRATEGY);
	getDatabaseValue("MINOR_APPROACH_PROTECTIVE_DIPLO_GRAND_STRATEGY_NEIGHBORS",m_iMINOR_APPROACH_PROTECTIVE_DIPLO_GRAND_STRATEGY_NEIGHBORS);
	getDatabaseValue("MINOR_APPROACH_WAR_CULTURE_GRAND_STRATEGY",m_iMINOR_APPROACH_WAR_CULTURE_GRAND_STRATEGY);
	getDatabaseValue("MINOR_APPROACH_IGNORE_CULTURE_GRAND_STRATEGY",m_iMINOR_APPROACH_IGNORE_CULTURE_GRAND_STRATEGY);
	getDatabaseValue("MINOR_APPROACH_PROTECTIVE_CULTURE_GRAND_STRATEGY_CST",m_iMINOR_APPROACH_PROTECTIVE_CULTURE_GRAND_STRATEGY_CST);
	getDatabaseValue("MINOR_APPROACH_WAR_CURRENTLY_PROTECTIVE",m_iMINOR_APPROACH_WAR_CURRENTLY_PROTECTIVE);
	getDatabaseValue("MINOR_APPROACH_PROTECTIVE_CURRENTLY_PROTECTIVE",m_iMINOR_APPROACH_PROTECTIVE_CURRENTLY_PROTECTIVE);
	getDatabaseValue("MINOR_APPROACH_PROTECTIVE_CURRENTLY_WAR",m_iMINOR_APPROACH_PROTECTIVE_CURRENTLY_WAR);
	getDatabaseValue("MINOR_APPROACH_FRIENDLY_CURRENTLY_WAR",m_iMINOR_APPROACH_FRIENDLY_CURRENTLY_WAR);
	getDatabaseValue("MINOR_APPROACH_FRIENDLY_RESOURCES",m_iMINOR_APPROACH_FRIENDLY_RESOURCES);
	getDatabaseValue("MINOR_APPROACH_PROTECTIVE_RESOURCES",m_iMINOR_APPROACH_PROTECTIVE_RESOURCES);
	getDatabaseValue("MINOR_APPROACH_WAR_FRIENDS",m_iMINOR_APPROACH_WAR_FRIENDS);
	getDatabaseValue("MINOR_APPROACH_FRIENDLY_FRIENDS",m_iMINOR_APPROACH_FRIENDLY_FRIENDS);
	getDatabaseValue("MINOR_APPROACH_PROTECTIVE_FRIENDS",m_iMINOR_APPROACH_PROTECTIVE_FRIENDS);
	getDatabaseValue("MINOR_APPROACH_IGNORE_PROXIMITY_NEIGHBORS",m_iMINOR_APPROACH_IGNORE_PROXIMITY_NEIGHBORS);
	getDatabaseValue("MINOR_APPROACH_FRIENDLY_PROXIMITY_NEIGHBORS",m_iMINOR_APPROACH_FRIENDLY_PROXIMITY_NEIGHBORS);
	getDatabaseValue("MINOR_APPROACH_PROTECTIVE_PROXIMITY_NEIGHBORS",m_iMINOR_APPROACH_PROTECTIVE_PROXIMITY_NEIGHBORS);
	getDatabaseValue("MINOR_APPROACH_CONQUEST_PROXIMITY_NEIGHBORS",m_iMINOR_APPROACH_CONQUEST_PROXIMITY_NEIGHBORS);
	getDatabaseValue("MINOR_APPROACH_IGNORE_PROXIMITY_CLOSE",m_iMINOR_APPROACH_IGNORE_PROXIMITY_CLOSE);
	getDatabaseValue("MINOR_APPROACH_PROTECTIVE_PROXIMITY_CLOSE",m_iMINOR_APPROACH_PROTECTIVE_PROXIMITY_CLOSE);
	getDatabaseValue("MINOR_APPROACH_CONQUEST_PROXIMITY_CLOSE",m_iMINOR_APPROACH_CONQUEST_PROXIMITY_CLOSE);
	getDatabaseValue("MINOR_APPROACH_FRIENDLY_PROXIMITY_FAR",m_iMINOR_APPROACH_FRIENDLY_PROXIMITY_FAR);
	getDatabaseValue("MINOR_APPROACH_CONQUEST_PROXIMITY_FAR",m_iMINOR_APPROACH_CONQUEST_PROXIMITY_FAR);
	getDatabaseValue("MINOR_APPROACH_FRIENDLY_PROXIMITY_DISTANT",m_iMINOR_APPROACH_FRIENDLY_PROXIMITY_DISTANT);
	getDatabaseValue("MINOR_APPROACH_CONQUEST_PROXIMITY_DISTANT",m_iMINOR_APPROACH_CONQUEST_PROXIMITY_DISTANT);
	getDatabaseValue("MINOR_APPROACH_FRIENDLY_PERSONALITY_FRIENDLY",m_iMINOR_APPROACH_FRIENDLY_PERSONALITY_FRIENDLY);
	getDatabaseValue("MINOR_APPROACH_PROTECTIVE_PERSONALITY_PROTECTIVE",m_iMINOR_APPROACH_PROTECTIVE_PERSONALITY_PROTECTIVE);
	getDatabaseValue("MINOR_APPROACH_FRIENDLY_PERSONALITY_NEUTRAL",m_iMINOR_APPROACH_FRIENDLY_PERSONALITY_NEUTRAL);
	getDatabaseValue("MINOR_APPROACH_PROTECTIVE_PERSONALITY_NEUTRAL",m_iMINOR_APPROACH_PROTECTIVE_PERSONALITY_NEUTRAL);
	getDatabaseValue("MINOR_APPROACH_FRIENDLY_PERSONALITY_HOSTILE",m_iMINOR_APPROACH_FRIENDLY_PERSONALITY_HOSTILE);
	getDatabaseValue("MINOR_APPROACH_PROTECTIVE_PERSONALITY_HOSTILE",m_iMINOR_APPROACH_PROTECTIVE_PERSONALITY_HOSTILE);
	getDatabaseValue("MINOR_APPROACH_CONQUEST_PERSONALITY_HOSTILE",m_iMINOR_APPROACH_CONQUEST_PERSONALITY_HOSTILE);
	getDatabaseValue("MINOR_APPROACH_FRIENDLY_PERSONALITY_IRRATIONAL",m_iMINOR_APPROACH_FRIENDLY_PERSONALITY_IRRATIONAL);
	getDatabaseValue("MINOR_APPROACH_PROTECTIVE_PERSONALITY_IRRATIONAL",m_iMINOR_APPROACH_PROTECTIVE_PERSONALITY_IRRATIONAL);
	getDatabaseValue("MINOR_APPROACH_WAR_PLANNING_WAR_WITH_ANOTHER_PLAYER",m_iMINOR_APPROACH_WAR_PLANNING_WAR_WITH_ANOTHER_PLAYER);
	getDatabaseValue("MINOR_APPROACH_PROTECTIVE_WITH_ANOTHER_PLAYER",m_iMINOR_APPROACH_PROTECTIVE_WITH_ANOTHER_PLAYER);
	getDatabaseValue("MINOR_APPROACH_WAR_TARGET_IMPOSSIBLE",m_iMINOR_APPROACH_WAR_TARGET_IMPOSSIBLE);
	getDatabaseValue("MINOR_APPROACH_WAR_TARGET_BAD",m_iMINOR_APPROACH_WAR_TARGET_BAD);
	getDatabaseValue("MINOR_APPROACH_WAR_TARGET_AVERAGE",m_iMINOR_APPROACH_WAR_TARGET_AVERAGE);
	getDatabaseValue("MINOR_APPROACH_WAR_TARGET_FAVORABLE",m_iMINOR_APPROACH_WAR_TARGET_FAVORABLE);
	getDatabaseValue("MINOR_APPROACH_WAR_TARGET_SOFT",m_iMINOR_APPROACH_WAR_TARGET_SOFT);
	getDatabaseValue("COOP_WAR_DESIRE_THRESHOLD",m_iCOOP_WAR_DESIRE_THRESHOLD);
	getDatabaseValue("COOPERATION_DESIRE_THRESHOLD_EAGER",m_iCOOPERATION_DESIRE_THRESHOLD_EAGER);
	getDatabaseValue("COOPERATION_DESIRE_THRESHOLD_STRONG",m_iCOOPERATION_DESIRE_THRESHOLD_STRONG);
	getDatabaseValue("COOPERATION_DESIRE_THRESHOLD_DECENT",m_iCOOPERATION_DESIRE_THRESHOLD_DECENT);
	getDatabaseValue("COOPERATION_DESIRE_THRESHOLD_WEAK",m_iCOOPERATION_DESIRE_THRESHOLD_WEAK);
	getDatabaseValue("COOPERATION_DESIRE_WAR_STATE_CALM",m_iCOOPERATION_DESIRE_WAR_STATE_CALM);
	getDatabaseValue("COOPERATION_DESIRE_WAR_STATE_NEARLY_WON",m_iCOOPERATION_DESIRE_WAR_STATE_NEARLY_WON);
	getDatabaseValue("COOPERATION_DESIRE_WAR_STATE_OFFENSIVE",m_iCOOPERATION_DESIRE_WAR_STATE_OFFENSIVE);
	getDatabaseValue("COOPERATION_DESIRE_WAR_STATE_STALEMATE",m_iCOOPERATION_DESIRE_WAR_STATE_STALEMATE);
	getDatabaseValue("COOPERATION_DESIRE_WAR_STATE_DEFENSIVE",m_iCOOPERATION_DESIRE_WAR_STATE_DEFENSIVE);
	getDatabaseValue("COOPERATION_DESIRE_WAR_STATE_NEARLY_DEFEATED",m_iCOOPERATION_DESIRE_WAR_STATE_NEARLY_DEFEATED);
	getDatabaseValue("COOPERATION_DESIRE_MILITARY_STRENGTH_IMMENSE",m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_IMMENSE);
	getDatabaseValue("COOPERATION_DESIRE_MILITARY_STRENGTH_POWERFUL",m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_POWERFUL);
	getDatabaseValue("COOPERATION_DESIRE_MILITARY_STRENGTH_STRONG",m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_STRONG);
	getDatabaseValue("COOPERATION_DESIRE_MILITARY_STRENGTH_AVERAGE",m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_AVERAGE);
	getDatabaseValue("COOPERATION_DESIRE_MILITARY_STRENGTH_POOR",m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_POOR);
	getDatabaseValue("COOPERATION_DESIRE_MILITARY_STRENGTH_WEAK",m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_WEAK);
	getDatabaseValue("COOPERATION_DESIRE_MILITARY_STRENGTH_PATHETIC",m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_PATHETIC);
	getDatabaseValue("COOPERATION_DESIRE_OPINION_ALLY",m_iCOOPERATION_DESIRE_OPINION_ALLY);
	getDatabaseValue("COOPERATION_DESIRE_OPINION_FRIEND",m_iCOOPERATION_DESIRE_OPINION_FRIEND);
	getDatabaseValue("COOPERATION_DESIRE_OPINION_NEUTRAL",m_iCOOPERATION_DESIRE_OPINION_NEUTRAL);
	getDatabaseValue("COOPERATION_DESIRE_OPINION_COMPETITOR",m_iCOOPERATION_DESIRE_OPINION_COMPETITOR);
	getDatabaseValue("COOPERATION_DESIRE_OPINION_ENEMY",m_iCOOPERATION_DESIRE_OPINION_ENEMY);
	getDatabaseValue("COOPERATION_DESIRE_GAME_THREAT_CRITICAL",m_iCOOPERATION_DESIRE_GAME_THREAT_CRITICAL);
	getDatabaseValue("COOPERATION_DESIRE_GAME_THREAT_SEVERE",m_iCOOPERATION_DESIRE_GAME_THREAT_SEVERE);
	getDatabaseValue("COOPERATION_DESIRE_GAME_THREAT_MAJOR",m_iCOOPERATION_DESIRE_GAME_THREAT_MAJOR);
	getDatabaseValue("COOPERATION_DESIRE_GAME_THREAT_MINOR",m_iCOOPERATION_DESIRE_GAME_THREAT_MINOR);
	getDatabaseValue("COOPERATION_DESIRE_GAME_THREAT_NONE",m_iCOOPERATION_DESIRE_GAME_THREAT_NONE);
	getDatabaseValue("COOPERATION_DESIRE_THEM_US_SAME_COMPETITOR",m_iCOOPERATION_DESIRE_THEM_US_SAME_COMPETITOR);
	getDatabaseValue("COOPERATION_DESIRE_THEM_US_COMPETITOR_ENEMY",m_iCOOPERATION_DESIRE_THEM_US_COMPETITOR_ENEMY);
	getDatabaseValue("COOPERATION_DESIRE_THEM_US_ENEMY_COMPETITOR",m_iCOOPERATION_DESIRE_THEM_US_ENEMY_COMPETITOR);
	getDatabaseValue("COOPERATION_DESIRE_THEM_US_SAME_ENEMY",m_iCOOPERATION_DESIRE_THEM_US_SAME_ENEMY);
	getDatabaseValue("EVALUATE_WAR_PLAYER_THRESHOLD",m_iEVALUATE_WAR_PLAYER_THRESHOLD);
	getDatabaseValue("EVALUATE_WAR_WILLING_TO_DECLARE_THRESHOLD",m_iEVALUATE_WAR_WILLING_TO_DECLARE_THRESHOLD);
	getDatabaseValue("EVALUATE_WAR_CONQUEST_GRAND_STRATEGY",m_iEVALUATE_WAR_CONQUEST_GRAND_STRATEGY);
	getDatabaseValue("EVALUATE_WAR_NOT_PREPARED",m_iEVALUATE_WAR_NOT_PREPARED);
	getDatabaseValue("EVALUATE_WAR_ALREADY_FIGHTING",m_iEVALUATE_WAR_ALREADY_FIGHTING);
	getDatabaseValue("EVALUATE_WAR_GAME_THREAT_CRITICAL",m_iEVALUATE_WAR_GAME_THREAT_CRITICAL);
	getDatabaseValue("EVALUATE_WAR_GAME_THREAT_SEVERE",m_iEVALUATE_WAR_GAME_THREAT_SEVERE);
	getDatabaseValue("EVALUATE_WAR_GAME_THREAT_MAJOR",m_iEVALUATE_WAR_GAME_THREAT_MAJOR);
	getDatabaseValue("EVALUATE_WAR_GAME_THREAT_MINOR",m_iEVALUATE_WAR_GAME_THREAT_MINOR);
	getDatabaseValue("EVALUATE_WAR_GAME_THREAT_NONE",m_iEVALUATE_WAR_GAME_THREAT_NONE);
	getDatabaseValue("EVALUATE_WAR_SOFT_TARGET",m_iEVALUATE_WAR_SOFT_TARGET);
	getDatabaseValue("EVALUATE_WAR_FAVORABLE_TARGET",m_iEVALUATE_WAR_FAVORABLE_TARGET);
	getDatabaseValue("EVALUATE_WAR_AVERAGE_TARGET",m_iEVALUATE_WAR_AVERAGE_TARGET);
	getDatabaseValue("EVALUATE_WAR_BAD_TARGET",m_iEVALUATE_WAR_BAD_TARGET);
	getDatabaseValue("EVALUATE_WAR_IMPOSSIBLE_TARGET",m_iEVALUATE_WAR_IMPOSSIBLE_TARGET);
	getDatabaseValue("REQUEST_PEACE_TURN_THRESHOLD",m_iREQUEST_PEACE_TURN_THRESHOLD);
	GD_INT_CACHE(WAR_MAJOR_MINIMUM_TURNS);
	GD_INT_CACHE(WAR_MINOR_MINIMUM_TURNS);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_PROJECTION_DESTRUCTION",m_iPEACE_WILLINGNESS_OFFER_PROJECTION_DESTRUCTION);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_PROJECTION_DEFEAT",m_iPEACE_WILLINGNESS_OFFER_PROJECTION_DEFEAT);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_PROJECTION_STALEMATE",m_iPEACE_WILLINGNESS_OFFER_PROJECTION_STALEMATE);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_PROJECTION_UNKNOWN",m_iPEACE_WILLINGNESS_OFFER_PROJECTION_UNKNOWN);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_PROJECTION_GOOD",m_iPEACE_WILLINGNESS_OFFER_PROJECTION_GOOD);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_PROJECTION_VERY_GOOD",m_iPEACE_WILLINGNESS_OFFER_PROJECTION_VERY_GOOD);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_WAR_DAMAGE_NONE",m_iPEACE_WILLINGNESS_OFFER_WAR_DAMAGE_NONE);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_WAR_DAMAGE_MINOR",m_iPEACE_WILLINGNESS_OFFER_WAR_DAMAGE_MINOR);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_WAR_DAMAGE_MAJOR",m_iPEACE_WILLINGNESS_OFFER_WAR_DAMAGE_MAJOR);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_WAR_DAMAGE_SERIOUS",m_iPEACE_WILLINGNESS_OFFER_WAR_DAMAGE_SERIOUS);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_WAR_DAMAGE_CRIPPLED",m_iPEACE_WILLINGNESS_OFFER_WAR_DAMAGE_CRIPPLED);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_THRESHOLD_UN_SURRENDER",m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_UN_SURRENDER);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_THRESHOLD_CAPITULATION",m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_CAPITULATION);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_THRESHOLD_CESSION",m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_CESSION);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_THRESHOLD_SURRENDER",m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_SURRENDER);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_THRESHOLD_SUBMISSION",m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_SUBMISSION);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_THRESHOLD_BACKDOWN",m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_BACKDOWN);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_THRESHOLD_SETTLEMENT",m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_SETTLEMENT);
	getDatabaseValue("PEACE_WILLINGNESS_OFFER_THRESHOLD_ARMISTICE",m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_ARMISTICE);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_PROJECTION_DESTRUCTION",m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_DESTRUCTION);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_PROJECTION_DEFEAT",m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_DEFEAT);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_PROJECTION_STALEMATE",m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_STALEMATE);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_PROJECTION_UNKNOWN",m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_UNKNOWN);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_PROJECTION_GOOD",m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_GOOD);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_PROJECTION_VERY_GOOD",m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_VERY_GOOD);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_TARGET_IMPOSSIBLE",m_iPEACE_WILLINGNESS_ACCEPT_TARGET_IMPOSSIBLE);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_TARGET_BAD",m_iPEACE_WILLINGNESS_ACCEPT_TARGET_BAD);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_TARGET_AVERAGE",m_iPEACE_WILLINGNESS_ACCEPT_TARGET_AVERAGE);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_TARGET_FAVORABLE",m_iPEACE_WILLINGNESS_ACCEPT_TARGET_FAVORABLE);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_TARGET_SOFT",m_iPEACE_WILLINGNESS_ACCEPT_TARGET_SOFT);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_THRESHOLD_UN_SURRENDER",m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_UN_SURRENDER);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_THRESHOLD_CAPITULATION",m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_CAPITULATION);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_THRESHOLD_CESSION",m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_CESSION);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_THRESHOLD_SURRENDER",m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_SURRENDER);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_THRESHOLD_SUBMISSION",m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_SUBMISSION);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_THRESHOLD_BACKDOWN",m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_BACKDOWN);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_THRESHOLD_SETTLEMENT",m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_SETTLEMENT);
	getDatabaseValue("PEACE_WILLINGNESS_ACCEPT_THRESHOLD_ARMISTICE",m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_ARMISTICE);
	getDatabaseValue("ARMISTICE_GPT_DIVISOR",m_iARMISTICE_GPT_DIVISOR);
	getDatabaseValue("ARMISTICE_MIN_GOLD",m_iARMISTICE_MIN_GOLD);
	getDatabaseValue("WAR_GOAL_THRESHOLD_CONQUEST",m_iWAR_GOAL_THRESHOLD_CONQUEST);
	getDatabaseValue("WAR_GOAL_THRESHOLD_DAMAGE",m_iWAR_GOAL_THRESHOLD_DAMAGE);
	getDatabaseValue("WAR_GOAL_THRESHOLD_PEACE",m_iWAR_GOAL_THRESHOLD_PEACE);
	getDatabaseValue("WAR_GOAL_STATE_CALM",m_iWAR_GOAL_STATE_CALM);
	getDatabaseValue("WAR_GOAL_STATE_NEARLY_WON",m_iWAR_GOAL_STATE_NEARLY_WON);
	getDatabaseValue("WAR_GOAL_STATE_OFFENSIVE",m_iWAR_GOAL_STATE_OFFENSIVE);
	getDatabaseValue("WAR_GOAL_STATE_STALEMATE",m_iWAR_GOAL_STATE_STALEMATE);
	getDatabaseValue("WAR_GOAL_STATE_DEFENSIVE",m_iWAR_GOAL_STATE_DEFENSIVE);
	getDatabaseValue("WAR_GOAL_STATE_NEARLY_DEFEATED",m_iWAR_GOAL_STATE_NEARLY_DEFEATED);
	getDatabaseValue("WAR_GOAL_ANOTHER_PLAYER_STATE_CALM",m_iWAR_GOAL_ANOTHER_PLAYER_STATE_CALM);
	getDatabaseValue("WAR_GOAL_ANOTHER_PLAYER_STATE_NEARLY_WON",m_iWAR_GOAL_ANOTHER_PLAYER_STATE_NEARLY_WON);
	getDatabaseValue("WAR_GOAL_ANOTHER_PLAYER_STATE_OFFENSIVE",m_iWAR_GOAL_ANOTHER_PLAYER_STATE_OFFENSIVE);
	getDatabaseValue("WAR_GOAL_ANOTHER_PLAYER_STATE_STALEMATE",m_iWAR_GOAL_ANOTHER_PLAYER_STATE_STALEMATE);
	getDatabaseValue("WAR_GOAL_ANOTHER_PLAYER_STATE_DEFENSIVE",m_iWAR_GOAL_ANOTHER_PLAYER_STATE_DEFENSIVE);
	getDatabaseValue("WAR_GOAL_ANOTHER_PLAYER_STATE_NEARLY_DEFEATED",m_iWAR_GOAL_ANOTHER_PLAYER_STATE_NEARLY_DEFEATED);
	getDatabaseValue("WAR_GOAL_DAMAGE_CRIPPLED",m_iWAR_GOAL_DAMAGE_CRIPPLED);
	getDatabaseValue("WAR_GOAL_DAMAGE_SERIOUS",m_iWAR_GOAL_DAMAGE_SERIOUS);
	getDatabaseValue("WAR_GOAL_DAMAGE_MAJOR",m_iWAR_GOAL_DAMAGE_MAJOR);
	getDatabaseValue("WAR_GOAL_DAMAGE_MINOR",m_iWAR_GOAL_DAMAGE_MINOR);
	getDatabaseValue("WAR_GOAL_DAMAGE_NONE",m_iWAR_GOAL_DAMAGE_NONE);
	getDatabaseValue("WAR_GOAL_GAME_THREAT_CRITICAL",m_iWAR_GOAL_GAME_THREAT_CRITICAL);
	getDatabaseValue("WAR_GOAL_GAME_THREAT_SEVERE",m_iWAR_GOAL_GAME_THREAT_SEVERE);
	getDatabaseValue("WAR_GOAL_GAME_THREAT_MAJOR",m_iWAR_GOAL_GAME_THREAT_MAJOR);
	getDatabaseValue("WAR_GOAL_GAME_THREAT_MINOR",m_iWAR_GOAL_GAME_THREAT_MINOR);
	getDatabaseValue("WAR_GOAL_GAME_THREAT_NONE",m_iWAR_GOAL_GAME_THREAT_NONE);
	getDatabaseValue("WAR_GOAL_TARGET_SOFT",m_iWAR_GOAL_TARGET_SOFT);
	getDatabaseValue("WAR_GOAL_TARGET_FAVORABLE",m_iWAR_GOAL_TARGET_FAVORABLE);
	getDatabaseValue("WAR_GOAL_TARGET_AVERAGE",m_iWAR_GOAL_TARGET_AVERAGE);
	getDatabaseValue("WAR_GOAL_TARGET_BAD",m_iWAR_GOAL_TARGET_BAD);
	getDatabaseValue("WAR_GOAL_TARGET_IMPOSSIBLE",m_iWAR_GOAL_TARGET_IMPOSSIBLE);
	getDatabaseValue("WAR_PROJECTION_THRESHOLD_VERY_GOOD",m_iWAR_PROJECTION_THRESHOLD_VERY_GOOD);
	getDatabaseValue("WAR_PROJECTION_THRESHOLD_GOOD",m_iWAR_PROJECTION_THRESHOLD_GOOD);
	getDatabaseValue("WAR_PROJECTION_THRESHOLD_DESTRUCTION",m_iWAR_PROJECTION_THRESHOLD_DESTRUCTION);
	getDatabaseValue("WAR_PROJECTION_THRESHOLD_DEFEAT",m_iWAR_PROJECTION_THRESHOLD_DEFEAT);
	getDatabaseValue("WAR_PROJECTION_THRESHOLD_STALEMATE",m_iWAR_PROJECTION_THRESHOLD_STALEMATE);
	getDatabaseValue("WAR_PROJECTION_THEIR_MILITARY_STRENGTH_PATHETIC",m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_PATHETIC);
	getDatabaseValue("WAR_PROJECTION_THEIR_MILITARY_STRENGTH_WEAK",m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_WEAK);
	getDatabaseValue("WAR_PROJECTION_RECKLESS_EXPANDER",m_iWAR_PROJECTION_RECKLESS_EXPANDER);
	getDatabaseValue("WAR_PROJECTION_THEIR_MILITARY_STRENGTH_POOR",m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_POOR);
	getDatabaseValue("WAR_PROJECTION_THEIR_MILITARY_STRENGTH_AVERAGE",m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_AVERAGE);
	getDatabaseValue("WAR_PROJECTION_THEIR_MILITARY_STRENGTH_STRONG",m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_STRONG);
	getDatabaseValue("WAR_PROJECTION_THEIR_MILITARY_STRENGTH_POWERFUL",m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_POWERFUL);
	getDatabaseValue("WAR_PROJECTION_THEIR_MILITARY_STRENGTH_IMMENSE",m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_IMMENSE);
	getDatabaseValue("WAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_PATHETIC",m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_PATHETIC);
	getDatabaseValue("WAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_WEAK",m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_WEAK);
	getDatabaseValue("WAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_POOR",m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_POOR);
	getDatabaseValue("WAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_AVERAGE",m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_AVERAGE);
	getDatabaseValue("WAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_STRONG",m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_STRONG);
	getDatabaseValue("WAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_POWERFUL",m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_POWERFUL);
	getDatabaseValue("WAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_IMMENSE",m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_IMMENSE);
	getDatabaseValue("WAR_PROJECTION_WAR_DAMAGE_US_NONE",m_iWAR_PROJECTION_WAR_DAMAGE_US_NONE);
	getDatabaseValue("WAR_PROJECTION_WAR_DAMAGE_US_MINOR",m_iWAR_PROJECTION_WAR_DAMAGE_US_MINOR);
	getDatabaseValue("WAR_PROJECTION_WAR_DAMAGE_US_MAJOR",m_iWAR_PROJECTION_WAR_DAMAGE_US_MAJOR);
	getDatabaseValue("WAR_PROJECTION_WAR_DAMAGE_US_SERIOUS",m_iWAR_PROJECTION_WAR_DAMAGE_US_SERIOUS);
	getDatabaseValue("WAR_PROJECTION_WAR_DAMAGE_US_CRIPPLED",m_iWAR_PROJECTION_WAR_DAMAGE_US_CRIPPLED);
	getDatabaseValue("WAR_PROJECTION_WAR_DAMAGE_THEM_NONE",m_iWAR_PROJECTION_WAR_DAMAGE_THEM_NONE);
	getDatabaseValue("WAR_PROJECTION_WAR_DAMAGE_THEM_MINOR",m_iWAR_PROJECTION_WAR_DAMAGE_THEM_MINOR);
	getDatabaseValue("WAR_PROJECTION_WAR_DAMAGE_THEM_MAJOR",m_iWAR_PROJECTION_WAR_DAMAGE_THEM_MAJOR);
	getDatabaseValue("WAR_PROJECTION_WAR_DAMAGE_THEM_SERIOUS",m_iWAR_PROJECTION_WAR_DAMAGE_THEM_SERIOUS);
	getDatabaseValue("WAR_PROJECTION_WAR_DAMAGE_THEM_CRIPPLED",m_iWAR_PROJECTION_WAR_DAMAGE_THEM_CRIPPLED);
	getDatabaseValue("WAR_PROJECTION_WAR_DURATION_SCORE_CAP",m_iWAR_PROJECTION_WAR_DURATION_SCORE_CAP);
	getDatabaseValue("WAR_STATE_CALM_THRESHOLD_FOREIGN_FORCES",m_iWAR_STATE_CALM_THRESHOLD_FOREIGN_FORCES);
	getDatabaseValue("WAR_STATE_THRESHOLD_NEARLY_WON",m_iWAR_STATE_THRESHOLD_NEARLY_WON);
	getDatabaseValue("WAR_STATE_THRESHOLD_OFFENSIVE",m_iWAR_STATE_THRESHOLD_OFFENSIVE);
	getDatabaseValue("WAR_STATE_THRESHOLD_STALEMATE",m_iWAR_STATE_THRESHOLD_STALEMATE);
	getDatabaseValue("WAR_STATE_THRESHOLD_DEFENSIVE",m_iWAR_STATE_THRESHOLD_DEFENSIVE);
	getDatabaseValue("WAR_DAMAGE_LEVEL_THRESHOLD_CRIPPLED",m_iWAR_DAMAGE_LEVEL_THRESHOLD_CRIPPLED);
	getDatabaseValue("WAR_DAMAGE_LEVEL_THRESHOLD_SERIOUS",m_iWAR_DAMAGE_LEVEL_THRESHOLD_SERIOUS);
	getDatabaseValue("WAR_DAMAGE_LEVEL_THRESHOLD_MAJOR",m_iWAR_DAMAGE_LEVEL_THRESHOLD_MAJOR);
	getDatabaseValue("WAR_DAMAGE_LEVEL_THRESHOLD_MINOR",m_iWAR_DAMAGE_LEVEL_THRESHOLD_MINOR);
	getDatabaseValue("WAR_DAMAGE_LEVEL_CITY_WEIGHT",m_iWAR_DAMAGE_LEVEL_CITY_WEIGHT);
	getDatabaseValue("WAR_DAMAGE_LEVEL_INVOLVED_CITY_POP_MULTIPLIER",m_iWAR_DAMAGE_LEVEL_INVOLVED_CITY_POP_MULTIPLIER);
	getDatabaseValue("WAR_DAMAGE_LEVEL_WORLD_WONDER_MULTIPLIER",m_iWAR_DAMAGE_LEVEL_WORLD_WONDER_MULTIPLIER);
	getDatabaseValue("WAR_DAMAGE_LEVEL_UNINVOLVED_CITY_POP_MULTIPLIER",m_iWAR_DAMAGE_LEVEL_UNINVOLVED_CITY_POP_MULTIPLIER);
	getDatabaseValue("MILITARY_AGGRESSIVE_POSTURE_THRESHOLD_INCREDIBLE",m_iMILITARY_AGGRESSIVE_POSTURE_THRESHOLD_INCREDIBLE);
	getDatabaseValue("MILITARY_AGGRESSIVE_POSTURE_THRESHOLD_HIGH",m_iMILITARY_AGGRESSIVE_POSTURE_THRESHOLD_HIGH);
	getDatabaseValue("MILITARY_AGGRESSIVE_POSTURE_THRESHOLD_MEDIUM",m_iMILITARY_AGGRESSIVE_POSTURE_THRESHOLD_MEDIUM);
	getDatabaseValue("MILITARY_AGGRESSIVE_POSTURE_THRESHOLD_LOW",m_iMILITARY_AGGRESSIVE_POSTURE_THRESHOLD_LOW);
	getDatabaseValue("EXPANSION_CAPITAL_DISTANCE_AGGRESSIVE_POSTURE_HIGH",m_iEXPANSION_CAPITAL_DISTANCE_AGGRESSIVE_POSTURE_HIGH);
	getDatabaseValue("EXPANSION_CAPITAL_DISTANCE_AGGRESSIVE_POSTURE_MEDIUM",m_iEXPANSION_CAPITAL_DISTANCE_AGGRESSIVE_POSTURE_MEDIUM);
	getDatabaseValue("EXPANSION_CAPITAL_DISTANCE_AGGRESSIVE_POSTURE_LOW",m_iEXPANSION_CAPITAL_DISTANCE_AGGRESSIVE_POSTURE_LOW);
	getDatabaseValue("PLOT_BUYING_POSTURE_INCREDIBLE_THRESHOLD",m_iPLOT_BUYING_POSTURE_INCREDIBLE_THRESHOLD);
	getDatabaseValue("PLOT_BUYING_POSTURE_HIGH_THRESHOLD",m_iPLOT_BUYING_POSTURE_HIGH_THRESHOLD);
	getDatabaseValue("PLOT_BUYING_POSTURE_MEDIUM_THRESHOLD",m_iPLOT_BUYING_POSTURE_MEDIUM_THRESHOLD);
	getDatabaseValue("PLOT_BUYING_POSTURE_LOW_THRESHOLD",m_iPLOT_BUYING_POSTURE_LOW_THRESHOLD);
	getDatabaseValue("MILITARY_STRENGTH_BASE",m_iMILITARY_STRENGTH_BASE);
	getDatabaseValue("MILITARY_STRENGTH_RATIO_MULTIPLIER",m_iMILITARY_STRENGTH_RATIO_MULTIPLIER);
	getDatabaseValue("MILITARY_STRENGTH_CITY_MOD",m_iMILITARY_STRENGTH_CITY_MOD);
	getDatabaseValue("MILITARY_STRENGTH_IMMENSE_THRESHOLD",m_iMILITARY_STRENGTH_IMMENSE_THRESHOLD);
	getDatabaseValue("MILITARY_STRENGTH_POWERFUL_THRESHOLD",m_iMILITARY_STRENGTH_POWERFUL_THRESHOLD);
	getDatabaseValue("MILITARY_STRENGTH_STRONG_THRESHOLD",m_iMILITARY_STRENGTH_STRONG_THRESHOLD);
	getDatabaseValue("MILITARY_STRENGTH_AVERAGE_THRESHOLD",m_iMILITARY_STRENGTH_AVERAGE_THRESHOLD);
	getDatabaseValue("MILITARY_STRENGTH_POOR_THRESHOLD",m_iMILITARY_STRENGTH_POOR_THRESHOLD);
	getDatabaseValue("MILITARY_STRENGTH_WEAK_THRESHOLD",m_iMILITARY_STRENGTH_WEAK_THRESHOLD);
	getDatabaseValue("ECONOMIC_STRENGTH_RATIO_MULTIPLIER",m_iECONOMIC_STRENGTH_RATIO_MULTIPLIER);
	getDatabaseValue("ECONOMIC_STRENGTH_IMMENSE_THRESHOLD",m_iECONOMIC_STRENGTH_IMMENSE_THRESHOLD);
	getDatabaseValue("ECONOMIC_STRENGTH_POWERFUL_THRESHOLD",m_iECONOMIC_STRENGTH_POWERFUL_THRESHOLD);
	getDatabaseValue("ECONOMIC_STRENGTH_STRONG_THRESHOLD",m_iECONOMIC_STRENGTH_STRONG_THRESHOLD);
	getDatabaseValue("ECONOMIC_STRENGTH_AVERAGE_THRESHOLD",m_iECONOMIC_STRENGTH_AVERAGE_THRESHOLD);
	getDatabaseValue("ECONOMIC_STRENGTH_POOR_THRESHOLD",m_iECONOMIC_STRENGTH_POOR_THRESHOLD);
	getDatabaseValue("ECONOMIC_STRENGTH_WEAK_THRESHOLD",m_iECONOMIC_STRENGTH_WEAK_THRESHOLD);
	getDatabaseValue("TARGET_IMPOSSIBLE_THRESHOLD",m_iTARGET_IMPOSSIBLE_THRESHOLD);
	getDatabaseValue("TARGET_BAD_THRESHOLD",m_iTARGET_BAD_THRESHOLD);
	getDatabaseValue("TARGET_AVERAGE_THRESHOLD",m_iTARGET_AVERAGE_THRESHOLD);
	getDatabaseValue("TARGET_FAVORABLE_THRESHOLD",m_iTARGET_FAVORABLE_THRESHOLD);
	getDatabaseValue("TARGET_INCREASE_WAR_TURNS",m_iTARGET_INCREASE_WAR_TURNS);
	getDatabaseValue("TARGET_MILITARY_STRENGTH_IMMENSE",m_iTARGET_MILITARY_STRENGTH_IMMENSE);
	getDatabaseValue("TARGET_MILITARY_STRENGTH_POWERFUL",m_iTARGET_MILITARY_STRENGTH_POWERFUL);
	getDatabaseValue("TARGET_MILITARY_STRENGTH_STRONG",m_iTARGET_MILITARY_STRENGTH_STRONG);
	getDatabaseValue("TARGET_MILITARY_STRENGTH_AVERAGE",m_iTARGET_MILITARY_STRENGTH_AVERAGE);
	getDatabaseValue("TARGET_MILITARY_STRENGTH_POOR",m_iTARGET_MILITARY_STRENGTH_POOR);
	getDatabaseValue("TARGET_MILITARY_STRENGTH_WEAK",m_iTARGET_MILITARY_STRENGTH_WEAK);
	getDatabaseValue("TARGET_MILITARY_STRENGTH_PATHETIC",m_iTARGET_MILITARY_STRENGTH_PATHETIC);
	getDatabaseValue("TARGET_ALREADY_WAR_EACH_PLAYER",m_iTARGET_ALREADY_WAR_EACH_PLAYER);
	getDatabaseValue("TARGET_NEIGHBORS",m_iTARGET_NEIGHBORS);
	getDatabaseValue("TARGET_CLOSE",m_iTARGET_CLOSE);
	getDatabaseValue("TARGET_FAR",m_iTARGET_FAR);
	getDatabaseValue("TARGET_DISTANT",m_iTARGET_DISTANT);
	getDatabaseValue("TARGET_MINOR_BACKUP_PATHETIC",m_iTARGET_MINOR_BACKUP_PATHETIC);
	getDatabaseValue("TARGET_MINOR_BACKUP_WEAK",m_iTARGET_MINOR_BACKUP_WEAK);
	getDatabaseValue("TARGET_MINOR_BACKUP_POOR",m_iTARGET_MINOR_BACKUP_POOR);
	getDatabaseValue("TARGET_MINOR_BACKUP_AVERAGE",m_iTARGET_MINOR_BACKUP_AVERAGE);
	getDatabaseValue("TARGET_MINOR_BACKUP_STRONG",m_iTARGET_MINOR_BACKUP_STRONG);
	getDatabaseValue("TARGET_MINOR_BACKUP_POWERFUL",m_iTARGET_MINOR_BACKUP_POWERFUL);
	getDatabaseValue("TARGET_MINOR_BACKUP_IMMENSE",m_iTARGET_MINOR_BACKUP_IMMENSE);
	getDatabaseValue("TARGET_MINOR_BACKUP_DISTANT",m_iTARGET_MINOR_BACKUP_DISTANT);
	getDatabaseValue("TARGET_MINOR_BACKUP_FAR",m_iTARGET_MINOR_BACKUP_FAR);
	getDatabaseValue("TARGET_MINOR_BACKUP_CLOSE",m_iTARGET_MINOR_BACKUP_CLOSE);
	getDatabaseValue("TARGET_MINOR_BACKUP_NEIGHBORS",m_iTARGET_MINOR_BACKUP_NEIGHBORS);
	getDatabaseValue("TARGET_MAJOR_BACKUP_PATHETIC",m_iTARGET_MAJOR_BACKUP_PATHETIC);
	getDatabaseValue("TARGET_MAJOR_BACKUP_WEAK",m_iTARGET_MAJOR_BACKUP_WEAK);
	getDatabaseValue("TARGET_MAJOR_BACKUP_POOR",m_iTARGET_MAJOR_BACKUP_POOR);
	getDatabaseValue("TARGET_MAJOR_BACKUP_AVERAGE",m_iTARGET_MAJOR_BACKUP_AVERAGE);
	getDatabaseValue("TARGET_MAJOR_BACKUP_STRONG",m_iTARGET_MAJOR_BACKUP_STRONG);
	getDatabaseValue("TARGET_MAJOR_BACKUP_POWERFUL",m_iTARGET_MAJOR_BACKUP_POWERFUL);
	getDatabaseValue("TARGET_MAJOR_BACKUP_IMMENSE",m_iTARGET_MAJOR_BACKUP_IMMENSE);
	getDatabaseValue("TARGET_MAJOR_BACKUP_DISTANT",m_iTARGET_MAJOR_BACKUP_DISTANT);
	getDatabaseValue("TARGET_MAJOR_BACKUP_FAR",m_iTARGET_MAJOR_BACKUP_FAR);
	getDatabaseValue("TARGET_MAJOR_BACKUP_CLOSE",m_iTARGET_MAJOR_BACKUP_CLOSE);
	getDatabaseValue("TARGET_MAJOR_BACKUP_NEIGHBORS",m_iTARGET_MAJOR_BACKUP_NEIGHBORS);
	getDatabaseValue("GAME_THREAT_CRITICAL_THRESHOLD",m_iGAME_THREAT_CRITICAL_THRESHOLD);
	getDatabaseValue("GAME_THREAT_SEVERE_THRESHOLD",m_iGAME_THREAT_SEVERE_THRESHOLD);
	getDatabaseValue("GAME_THREAT_MAJOR_THRESHOLD",m_iGAME_THREAT_MAJOR_THRESHOLD);
	getDatabaseValue("GAME_THREAT_MINOR_THRESHOLD",m_iGAME_THREAT_MINOR_THRESHOLD);
	getDatabaseValue("GAME_THREAT_AT_WAR_STALEMATE",m_iGAME_THREAT_AT_WAR_STALEMATE);
	getDatabaseValue("GAME_THREAT_AT_WAR_DEFENSIVE",m_iGAME_THREAT_AT_WAR_DEFENSIVE);
	getDatabaseValue("GAME_THREAT_AT_WAR_NEARLY_DEFEATED",m_iGAME_THREAT_AT_WAR_NEARLY_DEFEATED);
	getDatabaseValue("GAME_THREAT_AT_WAR_MILITARY_STRENGTH_IMMENSE",m_iGAME_THREAT_AT_WAR_MILITARY_STRENGTH_IMMENSE);
	getDatabaseValue("GAME_THREAT_AT_WAR_MILITARY_STRENGTH_POWERFUL",m_iGAME_THREAT_AT_WAR_MILITARY_STRENGTH_POWERFUL);
	getDatabaseValue("GAME_THREAT_AT_WAR_MILITARY_STRENGTH_STRONG",m_iGAME_THREAT_AT_WAR_MILITARY_STRENGTH_STRONG);
	getDatabaseValue("GAME_THREAT_AT_WAR_MILITARY_STRENGTH_AVERAGE",m_iGAME_THREAT_AT_WAR_MILITARY_STRENGTH_AVERAGE);
	getDatabaseValue("GAME_THREAT_GUESS_AT_WAR",m_iGAME_THREAT_GUESS_AT_WAR);
	getDatabaseValue("GAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_IMMENSE",m_iGAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_IMMENSE);
	getDatabaseValue("GAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_POWERFUL",m_iGAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_POWERFUL);
	getDatabaseValue("GAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_STRONG",m_iGAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_STRONG);
	getDatabaseValue("GAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_AVERAGE",m_iGAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_AVERAGE);
	getDatabaseValue("MILITARY_THREAT_CRITICAL_THRESHOLD",m_iMILITARY_THREAT_CRITICAL_THRESHOLD);
	getDatabaseValue("MILITARY_THREAT_SEVERE_THRESHOLD",m_iMILITARY_THREAT_SEVERE_THRESHOLD);
	getDatabaseValue("MILITARY_THREAT_MAJOR_THRESHOLD",m_iMILITARY_THREAT_MAJOR_THRESHOLD);
	getDatabaseValue("MILITARY_THREAT_MINOR_THRESHOLD",m_iMILITARY_THREAT_MINOR_THRESHOLD);
	getDatabaseValue("MILITARY_THREAT_STRENGTH_IMMENSE",m_iMILITARY_THREAT_STRENGTH_IMMENSE);
	getDatabaseValue("MILITARY_THREAT_STRENGTH_POWERFUL",m_iMILITARY_THREAT_STRENGTH_POWERFUL);
	getDatabaseValue("MILITARY_THREAT_STRENGTH_STRONG",m_iMILITARY_THREAT_STRENGTH_STRONG);
	getDatabaseValue("MILITARY_THREAT_STRENGTH_AVERAGE",m_iMILITARY_THREAT_STRENGTH_AVERAGE);
	getDatabaseValue("MILITARY_THREAT_STRENGTH_POOR",m_iMILITARY_THREAT_STRENGTH_POOR);
	getDatabaseValue("MILITARY_THREAT_STRENGTH_WEAK",m_iMILITARY_THREAT_STRENGTH_WEAK);
	getDatabaseValue("MILITARY_THREAT_STRENGTH_PATHETIC",m_iMILITARY_THREAT_STRENGTH_PATHETIC);
	getDatabaseValue("MILITARY_THREAT_WAR_STATE_CALM",m_iMILITARY_THREAT_WAR_STATE_CALM);
	getDatabaseValue("MILITARY_THREAT_WAR_STATE_NEARLY_WON",m_iMILITARY_THREAT_WAR_STATE_NEARLY_WON);
	getDatabaseValue("MILITARY_THREAT_WAR_STATE_OFFENSIVE",m_iMILITARY_THREAT_WAR_STATE_OFFENSIVE);
	getDatabaseValue("MILITARY_THREAT_WAR_STATE_STALEMATE",m_iMILITARY_THREAT_WAR_STATE_STALEMATE);
	getDatabaseValue("MILITARY_THREAT_WAR_STATE_DEFENSIVE",m_iMILITARY_THREAT_WAR_STATE_DEFENSIVE);
	getDatabaseValue("MILITARY_THREAT_WAR_STATE_NEARLY_DEFEATED",m_iMILITARY_THREAT_WAR_STATE_NEARLY_DEFEATED);
	getDatabaseValue("MILITARY_THREAT_NEIGHBORS",m_iMILITARY_THREAT_NEIGHBORS);
	getDatabaseValue("MILITARY_THREAT_CLOSE",m_iMILITARY_THREAT_CLOSE);
	getDatabaseValue("MILITARY_THREAT_FAR",m_iMILITARY_THREAT_FAR);
	getDatabaseValue("MILITARY_THREAT_DISTANT",m_iMILITARY_THREAT_DISTANT);
	getDatabaseValue("MILITARY_THREAT_PER_MINOR_ATTACKED",m_iMILITARY_THREAT_PER_MINOR_ATTACKED);
	getDatabaseValue("MILITARY_THREAT_PER_MINOR_CONQUERED",m_iMILITARY_THREAT_PER_MINOR_CONQUERED);
	getDatabaseValue("MILITARY_THREAT_PER_MAJOR_ATTACKED",m_iMILITARY_THREAT_PER_MAJOR_ATTACKED);
	getDatabaseValue("MILITARY_THREAT_PER_MAJOR_CONQUERED",m_iMILITARY_THREAT_PER_MAJOR_CONQUERED);
	getDatabaseValue("MILITARY_THREAT_ALREADY_WAR_EACH_PLAYER_MULTIPLIER",m_iMILITARY_THREAT_ALREADY_WAR_EACH_PLAYER_MULTIPLIER);
	getDatabaseValue("WARMONGER_THREAT_CRITICAL_THRESHOLD",m_iWARMONGER_THREAT_CRITICAL_THRESHOLD);
	getDatabaseValue("WARMONGER_THREAT_SEVERE_THRESHOLD",m_iWARMONGER_THREAT_SEVERE_THRESHOLD);
	getDatabaseValue("WARMONGER_THREAT_MAJOR_THRESHOLD",m_iWARMONGER_THREAT_MAJOR_THRESHOLD);
	getDatabaseValue("WARMONGER_THREAT_MINOR_THRESHOLD",m_iWARMONGER_THREAT_MINOR_THRESHOLD);
	getDatabaseValue("WARMONGER_THREAT_MINOR_ATTACKED_WEIGHT",m_iWARMONGER_THREAT_MINOR_ATTACKED_WEIGHT);
	getDatabaseValue("WARMONGER_THREAT_MINOR_CONQUERED_WEIGHT",m_iWARMONGER_THREAT_MINOR_CONQUERED_WEIGHT);
	getDatabaseValue("WARMONGER_THREAT_MAJOR_ATTACKED_WEIGHT",m_iWARMONGER_THREAT_MAJOR_ATTACKED_WEIGHT);
	getDatabaseValue("WARMONGER_THREAT_MAJOR_CONQUERED_WEIGHT",m_iWARMONGER_THREAT_MAJOR_CONQUERED_WEIGHT);
	GD_INT_CACHE(WARMONGER_THREAT_CAPITAL_CITY_PERCENT);
	GD_INT_CACHE(WARMONGER_THREAT_KNOWS_ATTACKER_PERCENT);
	GD_INT_CACHE(WARMONGER_THREAT_COOP_WAR_PERCENT);
	GD_INT_CACHE(WARMONGER_THREAT_MODIFIER_NEGATIVE_MEDIUM);
	GD_INT_CACHE(WARMONGER_THREAT_MODIFIER_MEDIUM);
	GD_INT_CACHE(WARMONGER_THREAT_MODIFIER_LARGE);
	GD_INT_CACHE(WARMONGER_THREAT_MODIFIER_SMALL);
	GD_INT_CACHE(WARMONGER_THREAT_MODIFIER_NEGATIVE_SMALL);
	GD_INT_CACHE(WARMONGER_THREAT_APPROACH_DECAY_LARGE);
	GD_INT_CACHE(WARMONGER_THREAT_APPROACH_DECAY_SMALL);
	GD_INT_CACHE(WARMONGER_THREAT_APPROACH_DECAY_MEDIUM);
	getDatabaseValue("WARMONGER_THREAT_PER_TURN_DECAY",m_iWARMONGER_THREAT_PER_TURN_DECAY);
	getDatabaseValue("WARMONGER_THREAT_PERSONALITY_MOD",m_iWARMONGER_THREAT_PERSONALITY_MOD);
	getDatabaseValue("WARMONGER_THREAT_CRITICAL_PERCENT_THRESHOLD",m_iWARMONGER_THREAT_CRITICAL_PERCENT_THRESHOLD);
	getDatabaseValue("WARMONGER_THREAT_SEVERE_PERCENT_THRESHOLD",m_iWARMONGER_THREAT_SEVERE_PERCENT_THRESHOLD);
	getDatabaseValue("WARMONGER_ON_CITY_STATE_MULTIPLIER",m_iWARMONGER_ON_CITY_STATE_MULTIPLIER);
	getDatabaseValue("LAND_DISPUTE_FIERCE_THRESHOLD",m_iLAND_DISPUTE_FIERCE_THRESHOLD);
	getDatabaseValue("LAND_DISPUTE_STRONG_THRESHOLD",m_iLAND_DISPUTE_STRONG_THRESHOLD);
	getDatabaseValue("LAND_DISPUTE_WEAK_THRESHOLD",m_iLAND_DISPUTE_WEAK_THRESHOLD);
	getDatabaseValue("VICTORY_DISPUTE_FIERCE_THRESHOLD",m_iVICTORY_DISPUTE_FIERCE_THRESHOLD);
	getDatabaseValue("VICTORY_DISPUTE_STRONG_THRESHOLD",m_iVICTORY_DISPUTE_STRONG_THRESHOLD);
	getDatabaseValue("VICTORY_DISPUTE_WEAK_THRESHOLD",m_iVICTORY_DISPUTE_WEAK_THRESHOLD);
	getDatabaseValue("VICTORY_BLOCK_FIERCE_THRESHOLD",m_iVICTORY_BLOCK_FIERCE_THRESHOLD);
	getDatabaseValue("VICTORY_BLOCK_STRONG_THRESHOLD",m_iVICTORY_BLOCK_STRONG_THRESHOLD);
	getDatabaseValue("VICTORY_BLOCK_WEAK_THRESHOLD",m_iVICTORY_BLOCK_WEAK_THRESHOLD);
	getDatabaseValue("TECH_BLOCK_FIERCE_THRESHOLD",m_iTECH_BLOCK_FIERCE_THRESHOLD);
	getDatabaseValue("TECH_BLOCK_STRONG_THRESHOLD",m_iTECH_BLOCK_STRONG_THRESHOLD);
	getDatabaseValue("TECH_BLOCK_WEAK_THRESHOLD",m_iTECH_BLOCK_WEAK_THRESHOLD);
	getDatabaseValue("POLICY_BLOCK_FIERCE_THRESHOLD",m_iPOLICY_BLOCK_FIERCE_THRESHOLD);
	getDatabaseValue("POLICY_BLOCK_STRONG_THRESHOLD",m_iPOLICY_BLOCK_STRONG_THRESHOLD);
	getDatabaseValue("POLICY_BLOCK_WEAK_THRESHOLD",m_iPOLICY_BLOCK_WEAK_THRESHOLD);
	getDatabaseValue("WONDER_DISPUTE_FIERCE_THRESHOLD",m_iWONDER_DISPUTE_FIERCE_THRESHOLD);
	getDatabaseValue("WONDER_DISPUTE_STRONG_THRESHOLD",m_iWONDER_DISPUTE_STRONG_THRESHOLD);
	getDatabaseValue("WONDER_DISPUTE_WEAK_THRESHOLD",m_iWONDER_DISPUTE_WEAK_THRESHOLD);
	getDatabaseValue("MINOR_CIV_DISPUTE_FIERCE_THRESHOLD",m_iMINOR_CIV_DISPUTE_FIERCE_THRESHOLD);
	getDatabaseValue("MINOR_CIV_DISPUTE_STRONG_THRESHOLD",m_iMINOR_CIV_DISPUTE_STRONG_THRESHOLD);
	getDatabaseValue("MINOR_CIV_DISPUTE_WEAK_THRESHOLD",m_iMINOR_CIV_DISPUTE_WEAK_THRESHOLD);
	getDatabaseValue("MINOR_CIV_DISPUTE_ALLIES_WEIGHT",m_iMINOR_CIV_DISPUTE_ALLIES_WEIGHT);
	getDatabaseValue("MINOR_CIV_DISPUTE_FRIENDS_WEIGHT",m_iMINOR_CIV_DISPUTE_FRIENDS_WEIGHT);
	getDatabaseValue("LAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_NONE",m_iLAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_NONE);
	getDatabaseValue("LAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_LOW",m_iLAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_LOW);
	getDatabaseValue("LAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_MEDIUM",m_iLAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_MEDIUM);
	getDatabaseValue("LAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_HIGH",m_iLAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_HIGH);
	getDatabaseValue("LAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_INCREDIBLE",m_iLAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_INCREDIBLE);
	getDatabaseValue("LAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_NONE",m_iLAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_NONE);
	getDatabaseValue("LAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_LOW",m_iLAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_LOW);
	getDatabaseValue("LAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_MEDIUM",m_iLAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_MEDIUM);
	getDatabaseValue("LAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_HIGH",m_iLAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_HIGH);
	getDatabaseValue("LAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_INCREDIBLE",m_iLAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_INCREDIBLE);
	getDatabaseValue("LAND_DISPUTE_DISTANT",m_iLAND_DISPUTE_DISTANT);
	getDatabaseValue("LAND_DISPUTE_FAR",m_iLAND_DISPUTE_FAR);
	getDatabaseValue("LAND_DISPUTE_CLOSE",m_iLAND_DISPUTE_CLOSE);
	getDatabaseValue("LAND_DISPUTE_NEIGHBORS",m_iLAND_DISPUTE_NEIGHBORS);
	getDatabaseValue("LAND_DISPUTE_CRAMPED_MULTIPLIER",m_iLAND_DISPUTE_CRAMPED_MULTIPLIER);
	getDatabaseValue("LAND_DISPUTE_NO_EXPANSION_STRATEGY",m_iLAND_DISPUTE_NO_EXPANSION_STRATEGY);
	getDatabaseValue("VICTORY_DISPUTE_GRAND_STRATEGY_MATCH_POSITIVE",m_iVICTORY_DISPUTE_GRAND_STRATEGY_MATCH_POSITIVE);
	getDatabaseValue("VICTORY_DISPUTE_GRAND_STRATEGY_MATCH_LIKELY",m_iVICTORY_DISPUTE_GRAND_STRATEGY_MATCH_LIKELY);
	getDatabaseValue("VICTORY_DISPUTE_GRAND_STRATEGY_MATCH_UNSURE",m_iVICTORY_DISPUTE_GRAND_STRATEGY_MATCH_UNSURE);
	getDatabaseValue("VICTORY_BLOCK_GRAND_STRATEGY_DIFFERENCE_POSITIVE",m_iVICTORY_BLOCK_GRAND_STRATEGY_DIFFERENCE_POSITIVE);
	getDatabaseValue("VICTORY_BLOCK_GRAND_STRATEGY_DIFFERENCE_LIKELY",m_iVICTORY_BLOCK_GRAND_STRATEGY_DIFFERENCE_LIKELY);
	getDatabaseValue("VICTORY_BLOCK_GRAND_STRATEGY_DIFFERENCE_UNSURE",m_iVICTORY_BLOCK_GRAND_STRATEGY_DIFFERENCE_UNSURE);
	getDatabaseValue("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_10",m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_10);
	getDatabaseValue("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_9",m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_9);
	getDatabaseValue("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_8",m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_8);
	getDatabaseValue("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_7",m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_7);
	getDatabaseValue("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_6",m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_6);
	getDatabaseValue("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_5",m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_5);
	getDatabaseValue("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_4",m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_4);
	getDatabaseValue("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_3",m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_3);
	getDatabaseValue("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_2",m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_2);
	getDatabaseValue("VICTORY_DISPUTE_OTHER_PLAYER_FIERCE_THRESHOLD",m_iVICTORY_DISPUTE_OTHER_PLAYER_FIERCE_THRESHOLD);
	getDatabaseValue("VICTORY_DISPUTE_OTHER_PLAYER_STRONG_THRESHOLD",m_iVICTORY_DISPUTE_OTHER_PLAYER_STRONG_THRESHOLD);
	getDatabaseValue("VICTORY_DISPUTE_OTHER_PLAYER_WEAK_THRESHOLD",m_iVICTORY_DISPUTE_OTHER_PLAYER_WEAK_THRESHOLD);
	getDatabaseValue("VICTORY_DISPUTE_OTHER_PLAYER_GRAND_STRATEGY_MATCH_POSITIVE",m_iVICTORY_DISPUTE_OTHER_PLAYER_GRAND_STRATEGY_MATCH_POSITIVE);
	getDatabaseValue("VICTORY_DISPUTE_OTHER_PLAYER_GRAND_STRATEGY_MATCH_LIKELY",m_iVICTORY_DISPUTE_OTHER_PLAYER_GRAND_STRATEGY_MATCH_LIKELY);
	getDatabaseValue("VICTORY_DISPUTE_OTHER_PLAYER_GRAND_STRATEGY_MATCH_UNSURE",m_iVICTORY_DISPUTE_OTHER_PLAYER_GRAND_STRATEGY_MATCH_UNSURE);
	getDatabaseValue("IC_MEMORY_TURN_EXPIRATION",m_iIC_MEMORY_TURN_EXPIRATION);
	getDatabaseValue("STOP_SPYING_MEMORY_TURN_EXPIRATION",m_iSTOP_SPYING_MEMORY_TURN_EXPIRATION);
	getDatabaseValue("COOP_WAR_SOON_COUNTER",m_iCOOP_WAR_SOON_COUNTER);
	getDatabaseValue("COOP_WAR_LOCKED_TURNS",m_iCOOP_WAR_LOCKED_TURNS);
	getDatabaseValue("COOP_WAR_LOCKED_TURNS_WAR_WEIGHT",m_iCOOP_WAR_LOCKED_TURNS_WAR_WEIGHT);
	getDatabaseValue("DEMAND_TURN_LIMIT_MIN",m_iDEMAND_TURN_LIMIT_MIN);
	getDatabaseValue("DEMAND_TURN_LIMIT_RAND",m_iDEMAND_TURN_LIMIT_RAND);
	getDatabaseValue("DONT_SETTLE_RAND",m_iDONT_SETTLE_RAND);
	getDatabaseValue("DONT_SETTLE_FLAVOR_BASE",m_iDONT_SETTLE_FLAVOR_BASE);
	getDatabaseValue("DONT_SETTLE_FLAVOR_MULTIPLIER",m_iDONT_SETTLE_FLAVOR_MULTIPLIER);
	getDatabaseValue("DONT_SETTLE_FRIENDLY",m_iDONT_SETTLE_FRIENDLY);
	getDatabaseValue("DONT_SETTLE_STRENGTH_PATHETIC",m_iDONT_SETTLE_STRENGTH_PATHETIC);
	getDatabaseValue("DONT_SETTLE_STRENGTH_WEAK",m_iDONT_SETTLE_STRENGTH_WEAK);
	getDatabaseValue("DONT_SETTLE_STRENGTH_POOR",m_iDONT_SETTLE_STRENGTH_POOR);
	getDatabaseValue("DONT_SETTLE_STRENGTH_AVERAGE",m_iDONT_SETTLE_STRENGTH_AVERAGE);
	getDatabaseValue("DONT_SETTLE_STRENGTH_STRONG",m_iDONT_SETTLE_STRENGTH_STRONG);
	getDatabaseValue("DONT_SETTLE_STRENGTH_POWERFUL",m_iDONT_SETTLE_STRENGTH_POWERFUL);
	getDatabaseValue("DONT_SETTLE_STRENGTH_IMMENSE",m_iDONT_SETTLE_STRENGTH_IMMENSE);
	getDatabaseValue("DONT_SETTLE_MOD_MILITARY_POSTURE_NONE",m_iDONT_SETTLE_MOD_MILITARY_POSTURE_NONE);
	getDatabaseValue("DONT_SETTLE_MOD_MILITARY_POSTURE_LOW",m_iDONT_SETTLE_MOD_MILITARY_POSTURE_LOW);
	getDatabaseValue("DONT_SETTLE_MOD_MILITARY_POSTURE_MEDIUM",m_iDONT_SETTLE_MOD_MILITARY_POSTURE_MEDIUM);
	getDatabaseValue("DONT_SETTLE_MOD_MILITARY_POSTURE_HIGH",m_iDONT_SETTLE_MOD_MILITARY_POSTURE_HIGH);
	getDatabaseValue("DONT_SETTLE_MOD_MILITARY_POSTURE_INCREDIBLE",m_iDONT_SETTLE_MOD_MILITARY_POSTURE_INCREDIBLE);
	getDatabaseValue("DOF_TURN_BUFFER",m_iDOF_TURN_BUFFER);
	getDatabaseValue("DOF_TURN_BUFFER_REDUCTION_PER_ERA",m_iDOF_TURN_BUFFER_REDUCTION_PER_ERA);
	getDatabaseValue("JUST_MET_TURN_BUFFER",m_iJUST_MET_TURN_BUFFER);
	getDatabaseValue("DOF_THRESHOLD",m_iDOF_THRESHOLD);
	getDatabaseValue("DENUNCIATION_EXPIRATION_TIME",m_iDENUNCIATION_EXPIRATION_TIME);
	getDatabaseValue("DOF_EXPIRATION_TIME",m_iDOF_EXPIRATION_TIME);
	getDatabaseValue("EACH_GOLD_VALUE_PERCENT",m_iEACH_GOLD_VALUE_PERCENT);
	getDatabaseValue("EACH_GOLD_PER_TURN_VALUE_PERCENT",m_iEACH_GOLD_PER_TURN_VALUE_PERCENT);

	getDatabaseValue("MOVE_TROOPS_MEMORY_TURN_EXPIRATION",m_iMOVE_TROOPS_MEMORY_TURN_EXPIRATION);
	getDatabaseValue("MILITARY_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN",m_iMILITARY_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("MILITARY_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN",m_iMILITARY_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("EXPANSION_BICKER_TIMEOUT",m_iEXPANSION_BICKER_TIMEOUT);
	getDatabaseValue("EXPANSION_PROMISE_TURNS_EFFECTIVE",m_iEXPANSION_PROMISE_TURNS_EFFECTIVE);
	getDatabaseValue("EXPANSION_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN",m_iEXPANSION_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("EXPANSION_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN",m_iEXPANSION_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("BORDER_PROMISE_TURNS_EFFECTIVE",m_iBORDER_PROMISE_TURNS_EFFECTIVE);
	getDatabaseValue("BORDER_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN",m_iBORDER_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("BORDER_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN",m_iBORDER_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("BULLY_CS_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN",m_iBULLY_CS_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("BULLY_CS_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN",m_iBULLY_CS_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("ATTACK_CS_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN",m_iATTACK_CS_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("ATTACK_CS_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN",m_iATTACK_CS_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("SPY_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN",m_iSPY_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("SPY_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN",m_iSPY_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("CONVERT_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN",m_iCONVERT_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("CONVERT_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN",m_iCONVERT_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("DIGGING_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN",m_iDIGGING_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("DIGGING_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN",m_iDIGGING_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("COOP_WAR_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN",m_iCOOP_WAR_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);

	getDatabaseValue("DOF_BROKEN_TURNS_UNTIL_FORGIVEN",m_iDOF_BROKEN_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("DOF_BROKEN_TURNS_UNTIL_FORGIVEN_FRIENDS",m_iDOF_BROKEN_TURNS_UNTIL_FORGIVEN_FRIENDS);
	getDatabaseValue("FRIEND_DENOUNCED_US_TURNS_UNTIL_FORGIVEN",m_iFRIEND_DENOUNCED_US_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("FRIEND_DECLARED_WAR_ON_US_TURNS_UNTIL_FORGIVEN",m_iFRIEND_DECLARED_WAR_ON_US_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("MASTER_DECLARED_WAR_ON_US_TURNS_UNTIL_FORGIVEN",m_iMASTER_DECLARED_WAR_ON_US_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("DOF_BROKEN_BACKSTAB_TIMER",m_iDOF_BROKEN_BACKSTAB_TIMER);

	getDatabaseValue("PLUNDERED_TRADE_ROUTE_TURNS_UNTIL_FORGIVEN",m_iPLUNDERED_TRADE_ROUTE_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("RETURNED_CIVILIAN_TURNS_UNTIL_FORGOTTEN",m_iRETURNED_CIVILIAN_TURNS_UNTIL_FORGOTTEN);
	getDatabaseValue("BUILT_LANDMARK_TURNS_UNTIL_FORGOTTEN",m_iBUILT_LANDMARK_TURNS_UNTIL_FORGOTTEN);
	getDatabaseValue("LIBERATED_CITY_TURNS_UNTIL_FORGOTTEN",m_iLIBERATED_CITY_TURNS_UNTIL_FORGOTTEN);
	getDatabaseValue("FORGAVE_FOR_SPYING_TURNS_UNTIL_FORGOTTEN",m_iFORGAVE_FOR_SPYING_TURNS_UNTIL_FORGOTTEN);
	getDatabaseValue("SHARED_INTRIGUE_TURNS_UNTIL_FORGOTTEN",m_iSHARED_INTRIGUE_TURNS_UNTIL_FORGOTTEN);
	getDatabaseValue("ROBBED_US_TURNS_UNTIL_FORGIVEN",m_iROBBED_US_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("PLOTTED_AGAINST_US_TURNS_UNTIL_FORGIVEN",m_iPLOTTED_AGAINST_US_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("PERFORMED_COUP_TURNS_UNTIL_FORGIVEN",m_iPERFORMED_COUP_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("EXCAVATED_ARTIFACT_TURNS_UNTIL_FORGIVEN",m_iEXCAVATED_ARTIFACT_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("MADE_DEMAND_TURNS_UNTIL_FORGIVEN",m_iMADE_DEMAND_TURNS_UNTIL_FORGIVEN);
	getDatabaseValue("RELIGIOUS_CONVERSION_TURNS_UNTIL_FORGIVEN",m_iRELIGIOUS_CONVERSION_TURNS_UNTIL_FORGIVEN);

	getDatabaseValue("OPINION_WEIGHT_EXPANSION_PROMISE_BROKE_MAX",m_iOPINION_WEIGHT_EXPANSION_PROMISE_BROKE_MAX);
	getDatabaseValue("OPINION_WEIGHT_EXPANSION_PROMISE_IGNORED_MAX",m_iOPINION_WEIGHT_EXPANSION_PROMISE_IGNORED_MAX);
	getDatabaseValue("BORDER_PROMISE_BROKEN_PER_TURN_DECAY",m_iBORDER_PROMISE_BROKEN_PER_TURN_DECAY);
	getDatabaseValue("BROKEN_BORDER_PROMISE_PER_OPINION_WEIGHT",m_iBROKEN_BORDER_PROMISE_PER_OPINION_WEIGHT);
	getDatabaseValue("OPINION_WEIGHT_BORDER_PROMISE_BROKE_MAX",m_iOPINION_WEIGHT_BORDER_PROMISE_BROKE_MAX);
	getDatabaseValue("BORDER_PROMISE_IGNORED_PER_TURN_DECAY",m_iBORDER_PROMISE_IGNORED_PER_TURN_DECAY);
	getDatabaseValue("IGNORED_BORDER_PROMISE_PER_OPINION_WEIGHT",m_iIGNORED_BORDER_PROMISE_PER_OPINION_WEIGHT);
	getDatabaseValue("OPINION_WEIGHT_BORDER_PROMISE_IGNORED_MAX",m_iOPINION_WEIGHT_BORDER_PROMISE_IGNORED_MAX);
	getDatabaseValue("DECLARED_WAR_ON_FRIEND_PER_TURN_DECAY",m_iDECLARED_WAR_ON_FRIEND_PER_TURN_DECAY);
	getDatabaseValue("DECLARED_WAR_ON_FRIEND_PER_OPINION_WEIGHT",m_iDECLARED_WAR_ON_FRIEND_PER_OPINION_WEIGHT);

	getDatabaseValue("DEAL_VALUE_PER_TURN_DECAY",m_iDEAL_VALUE_PER_TURN_DECAY);
	getDatabaseValue("DEAL_VALUE_PER_OPINION_WEIGHT",m_iDEAL_VALUE_PER_OPINION_WEIGHT);
	getDatabaseValue("COMMON_FOE_VALUE_PER_TURN_DECAY",m_iCOMMON_FOE_VALUE_PER_TURN_DECAY);
	getDatabaseValue("COMMON_FOE_VALUE_PER_OPINION_WEIGHT",m_iCOMMON_FOE_VALUE_PER_OPINION_WEIGHT);
	getDatabaseValue("ASSIST_VALUE_PER_TURN_DECAY",m_iASSIST_VALUE_PER_TURN_DECAY);
	getDatabaseValue("ASSIST_VALUE_PER_OPINION_WEIGHT",m_iASSIST_VALUE_PER_OPINION_WEIGHT);
	getDatabaseValue("WANT_RESEARCH_AGREEMENT_RAND",m_iWANT_RESEARCH_AGREEMENT_RAND);
	getDatabaseValue("DEMAND_RAND",m_iDEMAND_RAND);
	getDatabaseValue("CAN_WORK_WATER_FROM_GAME_START",m_iCAN_WORK_WATER_FROM_GAME_START);
	getDatabaseValue("NAVAL_PLOT_BLOCKADE_RANGE",m_iNAVAL_PLOT_BLOCKADE_RANGE);
	getDatabaseValue("EVENT_MESSAGE_TIME",m_iEVENT_MESSAGE_TIME);
	getDatabaseValue("START_YEAR",m_iSTART_YEAR);
	getDatabaseValue("WEEKS_PER_MONTHS",m_iWEEKS_PER_MONTHS);
	getDatabaseValue("HIDDEN_START_TURN_OFFSET",m_iHIDDEN_START_TURN_OFFSET);
	getDatabaseValue("RECON_VISIBILITY_RANGE",m_iRECON_VISIBILITY_RANGE);
	getDatabaseValue("PLOT_VISIBILITY_RANGE",m_iPLOT_VISIBILITY_RANGE);
	getDatabaseValue("UNIT_VISIBILITY_RANGE",m_iUNIT_VISIBILITY_RANGE);
	getDatabaseValue("AIR_UNIT_REBASE_RANGE_MULTIPLIER",m_iAIR_UNIT_REBASE_RANGE_MULTIPLIER);
	getDatabaseValue("MOUNTAIN_SEE_FROM_CHANGE",m_iMOUNTAIN_SEE_FROM_CHANGE);
	getDatabaseValue("MOUNTAIN_SEE_THROUGH_CHANGE",m_iMOUNTAIN_SEE_THROUGH_CHANGE);
	getDatabaseValue("HILLS_SEE_FROM_CHANGE",m_iHILLS_SEE_FROM_CHANGE);
	getDatabaseValue("HILLS_SEE_THROUGH_CHANGE",m_iHILLS_SEE_THROUGH_CHANGE);
	getDatabaseValue("SEAWATER_SEE_FROM_CHANGE",m_iSEAWATER_SEE_FROM_CHANGE);
	getDatabaseValue("SEAWATER_SEE_THROUGH_CHANGE",m_iSEAWATER_SEE_THROUGH_CHANGE);
	getDatabaseValue("MAX_YIELD_STACK",m_iMAX_YIELD_STACK);
	getDatabaseValue("MOVE_DENOMINATOR",m_iMOVE_DENOMINATOR);
	getDatabaseValue("STARTING_DISTANCE_PERCENT",m_iSTARTING_DISTANCE_PERCENT);
	getDatabaseValue("MIN_CIV_STARTING_DISTANCE",m_iMIN_CIV_STARTING_DISTANCE);
	getDatabaseValue("MIN_CITY_RANGE",m_iMIN_CITY_RANGE);
	GD_INT_CACHE(CITY_STARTING_RINGS);
	getDatabaseValue("OWNERSHIP_SCORE_DURATION_THRESHOLD",m_iOWNERSHIP_SCORE_DURATION_THRESHOLD);
	getDatabaseValue("NUM_POLICY_BRANCHES_ALLOWED",m_iNUM_POLICY_BRANCHES_ALLOWED);
	getDatabaseValue("VICTORY_POINTS_NEEDED_TO_WIN",m_iVICTORY_POINTS_NEEDED_TO_WIN);
	getDatabaseValue("NUM_VICTORY_POINT_AWARDS",m_iNUM_VICTORY_POINT_AWARDS);
	getDatabaseValue("NUM_OR_TECH_PREREQS",m_iNUM_OR_TECH_PREREQS);
	getDatabaseValue("NUM_AND_TECH_PREREQS",m_iNUM_AND_TECH_PREREQS);
	getDatabaseValue("NUM_UNIT_AND_TECH_PREREQS",m_iNUM_UNIT_AND_TECH_PREREQS);
	getDatabaseValue("NUM_BUILDING_AND_TECH_PREREQS",m_iNUM_BUILDING_AND_TECH_PREREQS);
	getDatabaseValue("NUM_BUILDING_RESOURCE_PREREQS",m_iNUM_BUILDING_RESOURCE_PREREQS);
	getDatabaseValue("BASE_RESEARCH_RATE",m_iBASE_RESEARCH_RATE);
	getDatabaseValue("MAX_WORLD_WONDERS_PER_CITY",m_iMAX_WORLD_WONDERS_PER_CITY);
	getDatabaseValue("MAX_TEAM_WONDERS_PER_CITY",m_iMAX_TEAM_WONDERS_PER_CITY);
	getDatabaseValue("MAX_NATIONAL_WONDERS_PER_CITY",m_iMAX_NATIONAL_WONDERS_PER_CITY);
	getDatabaseValue("MAX_NATIONAL_WONDERS_PER_CITY_FOR_OCC",m_iMAX_NATIONAL_WONDERS_PER_CITY_FOR_OCC);
	getDatabaseValue("MAX_BUILDINGS_PER_CITY",m_iMAX_BUILDINGS_PER_CITY);
	getDatabaseValue("INITIAL_CITY_POPULATION",m_iINITIAL_CITY_POPULATION);
	getDatabaseValue("BASE_CITY_AIR_STACKING",m_iBASE_CITY_AIR_STACKING);
	getDatabaseValue("CITY_CAPTURE_POPULATION_PERCENT",m_iCITY_CAPTURE_POPULATION_PERCENT);
	getDatabaseValue("BASE_CITY_GROWTH_THRESHOLD",m_iBASE_CITY_GROWTH_THRESHOLD);
	getDatabaseValue("FOOD_CONSUMPTION_PER_POPULATION",m_iFOOD_CONSUMPTION_PER_POPULATION);
	getDatabaseValue("HAPPINESS_PER_CITY_WITH_STATE_RELIGION",m_iHAPPINESS_PER_CITY_WITH_STATE_RELIGION);
	getDatabaseValue("HAPPINESS_PER_NATURAL_WONDER",m_iHAPPINESS_PER_NATURAL_WONDER);
	getDatabaseValue("HAPPINESS_PER_EXTRA_LUXURY",m_iHAPPINESS_PER_EXTRA_LUXURY);
	getDatabaseValue("UNHAPPINESS_PER_POPULATION",m_iUNHAPPINESS_PER_POPULATION);
	getDatabaseValue("UNHAPPINESS_PER_POPULATION_FLOAT",m_fUNHAPPINESS_PER_POPULATION_FLOAT);
	getDatabaseValue("UNHAPPINESS_PER_OCCUPIED_POPULATION",m_fUNHAPPINESS_PER_OCCUPIED_POPULATION);
	getDatabaseValue("UNHAPPINESS_PER_CITY",m_iUNHAPPINESS_PER_CITY);
	getDatabaseValue("UNHAPPINESS_PER_CAPTURED_CITY",m_iUNHAPPINESS_PER_CAPTURED_CITY);
	getDatabaseValue("UNHAPPY_GROWTH_PENALTY",m_iUNHAPPY_GROWTH_PENALTY);
	getDatabaseValue("VERY_UNHAPPY_GROWTH_PENALTY",m_iVERY_UNHAPPY_GROWTH_PENALTY);
	getDatabaseValue("UNHAPPY_PRODUCTION_PENALTY",m_iUNHAPPY_PRODUCTION_PENALTY);
	getDatabaseValue("VERY_UNHAPPY_PRODUCTION_PENALTY",m_iVERY_UNHAPPY_PRODUCTION_PENALTY);
	getDatabaseValue("BALANCE_WAR_WEARINESS_POPULATION_CAP",m_iBALANCE_WAR_WEARINESS_POPULATION_CAP);
	getDatabaseValue("VERY_UNHAPPY_CANT_TRAIN_SETTLERS",m_iVERY_UNHAPPY_CANT_TRAIN_SETTLERS);
	getDatabaseValue("UNHAPPY_THRESHOLD",m_iUNHAPPY_THRESHOLD);
	getDatabaseValue("VERY_UNHAPPY_THRESHOLD",m_iVERY_UNHAPPY_THRESHOLD);
	getDatabaseValue("SUPER_UNHAPPY_THRESHOLD",m_iSUPER_UNHAPPY_THRESHOLD);
	getDatabaseValue("UPRISING_COUNTER_MIN",m_iUPRISING_COUNTER_MIN);
	getDatabaseValue("UPRISING_COUNTER_POSSIBLE",m_iUPRISING_COUNTER_POSSIBLE);
	getDatabaseValue("UPRISING_NUM_BASE",m_iUPRISING_NUM_BASE);
	getDatabaseValue("UPRISING_NUM_CITY_COUNT",m_iUPRISING_NUM_CITY_COUNT);
	getDatabaseValue("REVOLT_COUNTER_MIN",m_iREVOLT_COUNTER_MIN);
	getDatabaseValue("VERY_UNHAPPY_COMBAT_PENALTY_PER_UNHAPPY",m_iVERY_UNHAPPY_COMBAT_PENALTY_PER_UNHAPPY);
	getDatabaseValue("VERY_UNHAPPY_MAX_COMBAT_PENALTY",m_iVERY_UNHAPPY_MAX_COMBAT_PENALTY);
	getDatabaseValue("STRATEGIC_RESOURCE_EXHAUSTED_PENALTY",m_iSTRATEGIC_RESOURCE_EXHAUSTED_PENALTY);
	getDatabaseValue("VERY_UNHAPPY_PRODUCTION_PENALTY_PER_UNHAPPY",m_iVERY_UNHAPPY_PRODUCTION_PENALTY_PER_UNHAPPY);
	getDatabaseValue("VERY_UNHAPPY_MAX_PRODUCTION_PENALTY",m_iVERY_UNHAPPY_MAX_PRODUCTION_PENALTY);
	getDatabaseValue("VERY_UNHAPPY_GOLD_PENALTY_PER_UNHAPPY",m_iVERY_UNHAPPY_GOLD_PENALTY_PER_UNHAPPY);
	getDatabaseValue("VERY_UNHAPPY_MAX_GOLD_PENALTY",m_iVERY_UNHAPPY_MAX_GOLD_PENALTY);
	getDatabaseValue("WLTKD_GROWTH_MULTIPLIER",m_iWLTKD_GROWTH_MULTIPLIER);
	getDatabaseValue("INDUSTRIAL_ROUTE_PRODUCTION_MOD",m_iINDUSTRIAL_ROUTE_PRODUCTION_MOD);
	getDatabaseValue("RESOURCE_DEMAND_COUNTDOWN_BASE",m_iRESOURCE_DEMAND_COUNTDOWN_BASE);
	getDatabaseValue("RESOURCE_DEMAND_COUNTDOWN_CAPITAL_ADD",m_iRESOURCE_DEMAND_COUNTDOWN_CAPITAL_ADD);
	getDatabaseValue("RESOURCE_DEMAND_COUNTDOWN_RAND",m_iRESOURCE_DEMAND_COUNTDOWN_RAND);
	getDatabaseValue("NEW_HURRY_MODIFIER",m_iNEW_HURRY_MODIFIER);
	getDatabaseValue("GREAT_GENERAL_RANGE",m_iGREAT_GENERAL_RANGE);
	getDatabaseValue("GREAT_GENERAL_STRENGTH_MOD",m_iGREAT_GENERAL_STRENGTH_MOD);
	getDatabaseValue("BONUS_PER_ADJACENT_FRIEND",m_iBONUS_PER_ADJACENT_FRIEND);
	getDatabaseValue("POLICY_ATTACK_BONUS_MOD",m_iPOLICY_ATTACK_BONUS_MOD);
	getDatabaseValue("CONSCRIPT_MIN_CITY_POPULATION",m_iCONSCRIPT_MIN_CITY_POPULATION);
	getDatabaseValue("CONSCRIPT_POPULATION_PER_COST",m_iCONSCRIPT_POPULATION_PER_COST);
	getDatabaseValue("MIN_TIMER_UNIT_DOUBLE_MOVES",m_iMIN_TIMER_UNIT_DOUBLE_MOVES);
	getDatabaseValue("COMBAT_DAMAGE",m_iCOMBAT_DAMAGE);
	getDatabaseValue("NONCOMBAT_UNIT_RANGED_DAMAGE",m_iNONCOMBAT_UNIT_RANGED_DAMAGE);
	getDatabaseValue("NAVAL_COMBAT_DEFENDER_STRENGTH_MULTIPLIER",m_iNAVAL_COMBAT_DEFENDER_STRENGTH_MULTIPLIER);
	getDatabaseValue("LAKE_PLOT_RAND",m_iLAKE_PLOT_RAND);
	getDatabaseValue("PLOTS_PER_RIVER_EDGE",m_iPLOTS_PER_RIVER_EDGE);
	getDatabaseValue("RIVER_SOURCE_MIN_RIVER_RANGE",m_iRIVER_SOURCE_MIN_RIVER_RANGE);
	getDatabaseValue("RIVER_SOURCE_MIN_SEAWATER_RANGE",m_iRIVER_SOURCE_MIN_SEAWATER_RANGE);
	getDatabaseValue("LAKE_MAX_AREA_SIZE",m_iLAKE_MAX_AREA_SIZE);
	getDatabaseValue("INITIAL_GOLD_PER_UNIT_TIMES_100",m_iINITIAL_GOLD_PER_UNIT_TIMES_100);
	getDatabaseValue("INITIAL_FREE_OUTSIDE_UNITS",m_iINITIAL_FREE_OUTSIDE_UNITS);
	getDatabaseValue("INITIAL_OUTSIDE_UNIT_GOLD_PERCENT",m_iINITIAL_OUTSIDE_UNIT_GOLD_PERCENT);
	getDatabaseValue("UNIT_MAINTENANCE_GAME_MULTIPLIER",m_iUNIT_MAINTENANCE_GAME_MULTIPLIER);
	getDatabaseValue("UNIT_MAINTENANCE_GAME_EXPONENT_DIVISOR",m_iUNIT_MAINTENANCE_GAME_EXPONENT_DIVISOR);
	getDatabaseValue("FREE_UNIT_HAPPINESS",m_iFREE_UNIT_HAPPINESS);
	getDatabaseValue("TRADE_ROUTE_BASE_GOLD",m_iTRADE_ROUTE_BASE_GOLD);
#if defined(MOD_TRADE_ROUTE_SCALING)
	GD_INT_CACHE(TRADE_ROUTE_BASE_TARGET_TURNS)
	GD_INT_CACHE(TRADE_ROUTE_BASE_LAND_DISTANCE)
	GD_INT_CACHE(TRADE_ROUTE_BASE_LAND_MODIFIER)
	GD_INT_CACHE(TRADE_ROUTE_BASE_SEA_DISTANCE)
	GD_INT_CACHE(TRADE_ROUTE_BASE_SEA_MODIFIER)
	GD_INT_CACHE(TRADE_ROUTE_BASE_FOOD_VALUE)
	GD_INT_CACHE(TRADE_ROUTE_BASE_PRODUCTION_VALUE)
	GD_INT_CACHE(TRADE_ROUTE_SCIENCE_DIVISOR_TIMES100)
	GD_INT_CACHE(TRADE_ROUTE_CULTURE_DIVISOR_TIMES100)
	GD_INT_CACHE(TRADE_ROUTE_DIFFERENT_RESOURCE_VALUE)
	GD_INT_CACHE(TRADE_ROUTE_RIVER_CITY_MODIFIER)
	GD_INT_CACHE(TRADE_ROUTE_BASE_PLUNDER_GOLD)
	GD_INT_CACHE(TRADE_ROUTE_PLUNDER_TURNS_COUNTER)
	GD_INT_CACHE(TRADE_ROUTE_CS_ALLY_SCIENCE_DELTA)
	GD_INT_CACHE(TRADE_ROUTE_CS_FRIEND_SCIENCE_DELTA)
	GD_INT_CACHE(TRADE_ROUTE_CS_ALLY_CULTURE_DELTA)
	GD_INT_CACHE(TRADE_ROUTE_CS_FRIEND_CULTURE_DELTA)
	GD_INT_CACHE(TRADE_ROUTE_CS_ALLY_GOLD)
	GD_INT_CACHE(TRADE_ROUTE_CS_FRIEND_GOLD)
#endif
#if defined(MOD_CIV6_ROADS)
	GD_INT_CACHE(TRADE_ROUTE_CREATE_RAILROADS_ERA)
	GD_INT_CACHE(TRADE_ROUTE_CREATE_RAILROADS_TECH_ID)
#endif
#if defined(MOD_CITY_STATE_SCALE)
	GD_INT_CACHE(CITY_STATE_SCALE_PER_CITY_MOD)
#endif
	getDatabaseValue("TRADE_ROUTE_CAPITAL_POP_GOLD_MULTIPLIER",m_iTRADE_ROUTE_CAPITAL_POP_GOLD_MULTIPLIER);
	getDatabaseValue("TRADE_ROUTE_CITY_POP_GOLD_MULTIPLIER",m_iTRADE_ROUTE_CITY_POP_GOLD_MULTIPLIER);
	getDatabaseValue("DEFICIT_UNIT_DISBANDING_THRESHOLD",m_iDEFICIT_UNIT_DISBANDING_THRESHOLD);
	getDatabaseValue("GOLDEN_AGE_BASE_THRESHOLD_HAPPINESS",m_iGOLDEN_AGE_BASE_THRESHOLD_HAPPINESS);
	getDatabaseValue("GOLDEN_AGE_THRESHOLD_CITY_MULTIPLIER",m_fGOLDEN_AGE_THRESHOLD_CITY_MULTIPLIER);
	getDatabaseValue("GOLDEN_AGE_EACH_GA_ADDITIONAL_HAPPINESS",m_iGOLDEN_AGE_EACH_GA_ADDITIONAL_HAPPINESS);
	getDatabaseValue("GOLDEN_AGE_VISIBLE_THRESHOLD_DIVISOR",m_iGOLDEN_AGE_VISIBLE_THRESHOLD_DIVISOR);
	getDatabaseValue("BASE_GOLDEN_AGE_UNITS",m_iBASE_GOLDEN_AGE_UNITS);
	getDatabaseValue("GOLDEN_AGE_UNITS_MULTIPLIER",m_iGOLDEN_AGE_UNITS_MULTIPLIER);
	getDatabaseValue("GOLDEN_AGE_LENGTH",m_iGOLDEN_AGE_LENGTH);
	getDatabaseValue("GOLDEN_AGE_GREAT_PEOPLE_MODIFIER",m_iGOLDEN_AGE_GREAT_PEOPLE_MODIFIER);
	getDatabaseValue("MIN_UNIT_GOLDEN_AGE_TURNS",m_iMIN_UNIT_GOLDEN_AGE_TURNS);
	getDatabaseValue("GOLDEN_AGE_CULTURE_MODIFIER",m_iGOLDEN_AGE_CULTURE_MODIFIER);
	getDatabaseValue("HILLS_EXTRA_MOVEMENT",m_iHILLS_EXTRA_MOVEMENT);
	getDatabaseValue("RIVER_EXTRA_MOVEMENT",m_iRIVER_EXTRA_MOVEMENT);
	getDatabaseValue("FEATURE_GROWTH_MODIFIER",m_iFEATURE_GROWTH_MODIFIER);
	getDatabaseValue("ROUTE_FEATURE_GROWTH_MODIFIER",m_iROUTE_FEATURE_GROWTH_MODIFIER);
	getDatabaseValue("EXTRA_YIELD",m_iEXTRA_YIELD);
	getDatabaseValue("FORTIFY_MODIFIER_PER_TURN",m_iFORTIFY_MODIFIER_PER_TURN);
	getDatabaseValue("MAX_FORTIFY_TURNS",m_iMAX_FORTIFY_TURNS);
	getDatabaseValue("NUKE_FALLOUT_PROB",m_iNUKE_FALLOUT_PROB);
	getDatabaseValue("NUKE_UNIT_DAMAGE_BASE",m_iNUKE_UNIT_DAMAGE_BASE);
	getDatabaseValue("NUKE_UNIT_DAMAGE_RAND_1",m_iNUKE_UNIT_DAMAGE_RAND_1);
	getDatabaseValue("NUKE_UNIT_DAMAGE_RAND_2",m_iNUKE_UNIT_DAMAGE_RAND_2);
	getDatabaseValue("NUKE_NON_COMBAT_DEATH_THRESHOLD",m_iNUKE_NON_COMBAT_DEATH_THRESHOLD);
	getDatabaseValue("NUKE_LEVEL1_POPULATION_DEATH_BASE",m_iNUKE_LEVEL1_POPULATION_DEATH_BASE);
	getDatabaseValue("NUKE_LEVEL1_POPULATION_DEATH_RAND_1",m_iNUKE_LEVEL1_POPULATION_DEATH_RAND_1);
	getDatabaseValue("NUKE_LEVEL1_POPULATION_DEATH_RAND_2",m_iNUKE_LEVEL1_POPULATION_DEATH_RAND_2);
	getDatabaseValue("NUKE_LEVEL2_POPULATION_DEATH_BASE",m_iNUKE_LEVEL2_POPULATION_DEATH_BASE);
	getDatabaseValue("NUKE_LEVEL2_POPULATION_DEATH_RAND_1",m_iNUKE_LEVEL2_POPULATION_DEATH_RAND_1);
	getDatabaseValue("NUKE_LEVEL2_POPULATION_DEATH_RAND_2",m_iNUKE_LEVEL2_POPULATION_DEATH_RAND_2);
	getDatabaseValue("NUKE_LEVEL2_ELIM_POPULATION_THRESHOLD",m_iNUKE_LEVEL2_ELIM_POPULATION_THRESHOLD);
	getDatabaseValue("NUKE_CITY_HIT_POINT_DAMAGE",m_iNUKE_CITY_HIT_POINT_DAMAGE);
	getDatabaseValue("NUKE_BLAST_RADIUS",m_iNUKE_BLAST_RADIUS);
	getDatabaseValue("TECH_COST_EXTRA_TEAM_MEMBER_MODIFIER",m_iTECH_COST_EXTRA_TEAM_MEMBER_MODIFIER);
	getDatabaseValue("TECH_COST_TOTAL_KNOWN_TEAM_MODIFIER",m_iTECH_COST_TOTAL_KNOWN_TEAM_MODIFIER);
	getDatabaseValue("TECH_COST_KNOWN_PREREQ_MODIFIER",m_iTECH_COST_KNOWN_PREREQ_MODIFIER);
	getDatabaseValue("PEACE_TREATY_LENGTH",m_iPEACE_TREATY_LENGTH);
	getDatabaseValue("COOP_WAR_LOCKED_LENGTH",m_iCOOP_WAR_LOCKED_LENGTH);
	getDatabaseValue("BASE_FEATURE_PRODUCTION_PERCENT",m_iBASE_FEATURE_PRODUCTION_PERCENT);
	getDatabaseValue("FEATURE_PRODUCTION_PERCENT_MULTIPLIER",m_iFEATURE_PRODUCTION_PERCENT_MULTIPLIER);
	getDatabaseValue("DIFFERENT_TEAM_FEATURE_PRODUCTION_PERCENT",m_iDIFFERENT_TEAM_FEATURE_PRODUCTION_PERCENT);
	getDatabaseValue("DEFAULT_WAR_VALUE_FOR_UNIT",m_iDEFAULT_WAR_VALUE_FOR_UNIT);
	getDatabaseValue("PILLAGED_TILE_BASE_WAR_VALUE",m_iPILLAGED_TILE_BASE_WAR_VALUE);
	getDatabaseValue("STOLEN_TILE_BASE_WAR_VALUE",m_iSTOLEN_TILE_BASE_WAR_VALUE);
	getDatabaseValue("UNIT_PRODUCTION_PERCENT",m_iUNIT_PRODUCTION_PERCENT);
	getDatabaseValue("MAX_UNIT_SUPPLY_PRODMOD",m_iMAX_UNIT_SUPPLY_PRODMOD);
	getDatabaseValue("BUILDING_PRODUCTION_PERCENT",m_iBUILDING_PRODUCTION_PERCENT);
	getDatabaseValue("PROJECT_PRODUCTION_PERCENT",m_iPROJECT_PRODUCTION_PERCENT);
	getDatabaseValue("MAXED_UNIT_GOLD_PERCENT",m_iMAXED_UNIT_GOLD_PERCENT);
	getDatabaseValue("MAXED_BUILDING_GOLD_PERCENT",m_iMAXED_BUILDING_GOLD_PERCENT);
	getDatabaseValue("MAXED_PROJECT_GOLD_PERCENT",m_iMAXED_PROJECT_GOLD_PERCENT);
	getDatabaseValue("MAX_CITY_DEFENSE_DAMAGE",m_iMAX_CITY_DEFENSE_DAMAGE);
	getDatabaseValue("CIRCUMNAVIGATE_FREE_MOVES",m_iCIRCUMNAVIGATE_FREE_MOVES);
	getDatabaseValue("BASE_CAPTURE_GOLD",m_iBASE_CAPTURE_GOLD);
	getDatabaseValue("CAPTURE_GOLD_PER_POPULATION",m_iCAPTURE_GOLD_PER_POPULATION);
	getDatabaseValue("CAPTURE_GOLD_RAND1",m_iCAPTURE_GOLD_RAND1);
	getDatabaseValue("CAPTURE_GOLD_RAND2",m_iCAPTURE_GOLD_RAND2);
	getDatabaseValue("CAPTURE_GOLD_MAX_TURNS",m_iCAPTURE_GOLD_MAX_TURNS);
	getDatabaseValue("BARBARIAN_CITY_ATTACK_MODIFIER",m_iBARBARIAN_CITY_ATTACK_MODIFIER);
	getDatabaseValue("BUILDING_PRODUCTION_DECAY_TIME",m_iBUILDING_PRODUCTION_DECAY_TIME);
	getDatabaseValue("BUILDING_PRODUCTION_DECAY_PERCENT",m_iBUILDING_PRODUCTION_DECAY_PERCENT);
	getDatabaseValue("UNIT_PRODUCTION_DECAY_TIME",m_iUNIT_PRODUCTION_DECAY_TIME);
	getDatabaseValue("UNIT_PRODUCTION_DECAY_PERCENT",m_iUNIT_PRODUCTION_DECAY_PERCENT);
	getDatabaseValue("BASE_UNIT_UPGRADE_COST",m_iBASE_UNIT_UPGRADE_COST);
	getDatabaseValue("UNIT_UPGRADE_COST_PER_PRODUCTION",m_iUNIT_UPGRADE_COST_PER_PRODUCTION);
	getDatabaseValue("UNIT_UPGRADE_COST_VISIBLE_DIVISOR",m_iUNIT_UPGRADE_COST_VISIBLE_DIVISOR);
	getDatabaseValue("UNIT_UPGRADE_COST_DISCOUNT_MAX",m_iUNIT_UPGRADE_COST_DISCOUNT_MAX);
	getDatabaseValue("WAR_SUCCESS_UNIT_CAPTURING",m_iWAR_SUCCESS_UNIT_CAPTURING);
	getDatabaseValue("WAR_SUCCESS_CITY_CAPTURING",m_iWAR_SUCCESS_CITY_CAPTURING);
	getDatabaseValue("DIPLO_VOTE_SECRETARY_GENERAL_INTERVAL",m_iDIPLO_VOTE_SECRETARY_GENERAL_INTERVAL);
	getDatabaseValue("TEAM_VOTE_MIN_CANDIDATES",m_iTEAM_VOTE_MIN_CANDIDATES);
	getDatabaseValue("RESEARCH_AGREEMENT_TIMER",m_iRESEARCH_AGREEMENT_TIMER);
	getDatabaseValue("RESEARCH_AGREEMENT_BOOST_DIVISOR",m_iRESEARCH_AGREEMENT_BOOST_DIVISOR);
	getDatabaseValue("SCORE_POPULATION_FACTOR",m_iSCORE_POPULATION_FACTOR);
	getDatabaseValue("SCORE_LAND_FACTOR",m_iSCORE_LAND_FACTOR);
	getDatabaseValue("SCORE_WONDER_FACTOR",m_iSCORE_WONDER_FACTOR);
	getDatabaseValue("SCORE_TECH_FACTOR",m_iSCORE_TECH_FACTOR);
	getDatabaseValue("SCORE_FREE_PERCENT",m_iSCORE_FREE_PERCENT);
	getDatabaseValue("SCORE_VICTORY_PERCENT",m_iSCORE_VICTORY_PERCENT);
	getDatabaseValue("SCORE_HANDICAP_PERCENT_OFFSET",m_iSCORE_HANDICAP_PERCENT_OFFSET);
	getDatabaseValue("SCORE_HANDICAP_PERCENT_PER",m_iSCORE_HANDICAP_PERCENT_PER);
	getDatabaseValue("MINIMAP_RENDER_SIZE",m_iMINIMAP_RENDER_SIZE);
	getDatabaseValue("MAX_INTERCEPTION_PROBABILITY",m_iMAX_INTERCEPTION_PROBABILITY);
	getDatabaseValue("MAX_EVASION_PROBABILITY",m_iMAX_EVASION_PROBABILITY);
	getDatabaseValue("PLAYER_ALWAYS_RAZES_CITIES",m_iPLAYER_ALWAYS_RAZES_CITIES);
	getDatabaseValue("MIN_WATER_SIZE_FOR_OCEAN",m_iMIN_WATER_SIZE_FOR_OCEAN);
	getDatabaseValue("CITY_SCREEN_CLICK_WILL_EXIT",m_iCITY_SCREEN_CLICK_WILL_EXIT);
	getDatabaseValue("WATER_POTENTIAL_CITY_WORK_FOR_AREA",m_iWATER_POTENTIAL_CITY_WORK_FOR_AREA);
	getDatabaseValue("LAND_UNITS_CAN_ATTACK_WATER_CITIES",m_iLAND_UNITS_CAN_ATTACK_WATER_CITIES);
	getDatabaseValue("CITY_MAX_NUM_BUILDINGS",m_iCITY_MAX_NUM_BUILDINGS);
	getDatabaseValue("CITY_MIN_SIZE_FOR_SETTLERS",m_iCITY_MIN_SIZE_FOR_SETTLERS);
	getDatabaseValue("ADVANCED_START_ALLOW_UNITS_OUTSIDE_CITIES",m_iADVANCED_START_ALLOW_UNITS_OUTSIDE_CITIES);
	getDatabaseValue("ADVANCED_START_MAX_UNITS_PER_CITY",m_iADVANCED_START_MAX_UNITS_PER_CITY);
	getDatabaseValue("ADVANCED_START_CITY_COST",m_iADVANCED_START_CITY_COST);
	getDatabaseValue("ADVANCED_START_CITY_COST_INCREASE",m_iADVANCED_START_CITY_COST_INCREASE);
	getDatabaseValue("ADVANCED_START_POPULATION_COST",m_iADVANCED_START_POPULATION_COST);
	getDatabaseValue("ADVANCED_START_POPULATION_COST_INCREASE",m_iADVANCED_START_POPULATION_COST_INCREASE);
	getDatabaseValue("ADVANCED_START_VISIBILITY_COST",m_iADVANCED_START_VISIBILITY_COST);
	getDatabaseValue("ADVANCED_START_VISIBILITY_COST_INCREASE",m_iADVANCED_START_VISIBILITY_COST_INCREASE);
	getDatabaseValue("ADVANCED_START_CITY_PLACEMENT_MAX_RANGE",m_iADVANCED_START_CITY_PLACEMENT_MAX_RANGE);
	getDatabaseValue("NEW_CITY_BUILDING_VALUE_MODIFIER",m_iNEW_CITY_BUILDING_VALUE_MODIFIER);
	getDatabaseValue("PATH_DAMAGE_WEIGHT",m_iPATH_DAMAGE_WEIGHT);
	getDatabaseValue("PUPPET_SCIENCE_MODIFIER",m_iPUPPET_SCIENCE_MODIFIER);
	getDatabaseValue("PUPPET_CULTURE_MODIFIER",m_iPUPPET_CULTURE_MODIFIER);
	getDatabaseValue("PUPPET_GOLD_MODIFIER",m_iPUPPET_GOLD_MODIFIER);
	getDatabaseValue("PUPPET_FAITH_MODIFIER",m_iPUPPET_FAITH_MODIFIER);
	getDatabaseValue("PUPPET_GROWTH_MODIFIER",m_iPUPPET_GROWTH_MODIFIER);
	getDatabaseValue("PUPPET_PRODUCTION_MODIFIER",m_iPUPPET_PRODUCTION_MODIFIER);
	getDatabaseValue("BLOCKADE_GOLD_PENALTY",m_iBLOCKADE_GOLD_PENALTY);
#if defined(MOD_API_UNIFIED_YIELDS_TOURISM)
	getDatabaseValue("PUPPET_TOURISM_MODIFIER",m_iPUPPET_TOURISM_MODIFIER);
#endif
#if defined(MOD_API_UNIFIED_YIELDS_GOLDEN_AGE)
	getDatabaseValue("PUPPET_GOLDEN_AGE_MODIFIER",m_iPUPPET_GOLDEN_AGE_MODIFIER);
#endif
	getDatabaseValue("BASE_POLICY_COST",m_iBASE_POLICY_COST);
	getDatabaseValue("POLICY_COST_INCREASE_TO_BE_EXPONENTED",m_iPOLICY_COST_INCREASE_TO_BE_EXPONENTED);
	getDatabaseValue("POLICY_COST_VISIBLE_DIVISOR",m_iPOLICY_COST_VISIBLE_DIVISOR);
	getDatabaseValue("SWITCH_POLICY_BRANCHES_ANARCHY_TURNS",m_iSWITCH_POLICY_BRANCHES_ANARCHY_TURNS);
	getDatabaseValue("SWITCH_POLICY_BRANCHES_TENETS_LOST",m_iSWITCH_POLICY_BRANCHES_TENETS_LOST);
	getDatabaseValue("POLICY_COST_DISCOUNT_MAX",m_iPOLICY_COST_DISCOUNT_MAX);
	getDatabaseValue("GOLD_PURCHASE_GOLD_PER_PRODUCTION",m_iGOLD_PURCHASE_GOLD_PER_PRODUCTION);
	getDatabaseValue("GOLD_PURCHASE_VISIBLE_DIVISOR",m_iGOLD_PURCHASE_VISIBLE_DIVISOR);
	getDatabaseValue("PROJECT_PURCHASING_DISABLED",m_iPROJECT_PURCHASING_DISABLED);
	getDatabaseValue("INFLUENCE_MOUNTAIN_COST",m_iINFLUENCE_MOUNTAIN_COST);
	getDatabaseValue("INFLUENCE_HILL_COST",m_iINFLUENCE_HILL_COST);
	getDatabaseValue("INFLUENCE_RIVER_COST",m_iINFLUENCE_RIVER_COST);
	getDatabaseValue("USE_FIRST_RING_INFLUENCE_TERRAIN_COST",m_iUSE_FIRST_RING_INFLUENCE_TERRAIN_COST);
	getDatabaseValue("NUM_RESOURCE_QUANTITY_TYPES",m_iNUM_RESOURCE_QUANTITY_TYPES);
	getDatabaseValue("SPECIALISTS_DIVERT_POPULATION_ENABLED",m_iSPECIALISTS_DIVERT_POPULATION_ENABLED);
	getDatabaseValue("SCIENCE_PER_POPULATION",m_iSCIENCE_PER_POPULATION);
	getDatabaseValue("RESEARCH_AGREEMENT_MOD",m_iRESEARCH_AGREEMENT_MOD);
	getDatabaseValue("BARBARIAN_CAMP_FIRST_TURN_PERCENT_OF_TARGET_TO_ADD",m_iBARBARIAN_CAMP_FIRST_TURN_PERCENT_OF_TARGET_TO_ADD);
	getDatabaseValue("BARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING",m_iBARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING);
	getDatabaseValue("BARBARIAN_CAMP_MINIMUM_DISTANCE_CAPITAL",m_iBARBARIAN_CAMP_MINIMUM_DISTANCE_CAPITAL);
	getDatabaseValue("BARBARIAN_CAMP_MINIMUM_DISTANCE_ANOTHER_CAMP",m_iBARBARIAN_CAMP_MINIMUM_DISTANCE_ANOTHER_CAMP);
	getDatabaseValue("BARBARIAN_CAMP_COASTAL_SPAWN_ROLL",m_iBARBARIAN_CAMP_COASTAL_SPAWN_ROLL);
	getDatabaseValue("BARBARIAN_EXTRA_RAGING_UNIT_SPAWN_CHANCE",m_iBARBARIAN_EXTRA_RAGING_UNIT_SPAWN_CHANCE);
	getDatabaseValue("BARBARIAN_NAVAL_UNIT_START_TURN_SPAWN",m_iBARBARIAN_NAVAL_UNIT_START_TURN_SPAWN);
	getDatabaseValue("MAX_BARBARIANS_FROM_CAMP_NEARBY",m_iMAX_BARBARIANS_FROM_CAMP_NEARBY);
	getDatabaseValue("MAX_BARBARIANS_FROM_CAMP_NEARBY_RANGE",m_iMAX_BARBARIANS_FROM_CAMP_NEARBY_RANGE);
	getDatabaseValue("GOLD_FROM_BARBARIAN_CONVERSION",m_iGOLD_FROM_BARBARIAN_CONVERSION);
	getDatabaseValue("BARBARIAN_CITY_GOLD_RANSOM",m_iBARBARIAN_CITY_GOLD_RANSOM);
	getDatabaseValue("BARBARIAN_UNIT_GOLD_RANSOM",m_iBARBARIAN_UNIT_GOLD_RANSOM);
	getDatabaseValue("EMBARKED_UNIT_MOVEMENT",m_iEMBARKED_UNIT_MOVEMENT);
	getDatabaseValue("EMBARKED_VISIBILITY_RANGE",m_iEMBARKED_VISIBILITY_RANGE);
	getDatabaseValue("DEFAULT_MAX_NUM_BUILDERS",m_iDEFAULT_MAX_NUM_BUILDERS);
	getDatabaseValue("BARBARIAN_TECH_PERCENT",m_iBARBARIAN_TECH_PERCENT);
	getDatabaseValue("CITY_RESOURCE_WLTKD_TURNS",m_iCITY_RESOURCE_WLTKD_TURNS);
	getDatabaseValue("MAX_SPECIALISTS_FROM_BUILDING",m_iMAX_SPECIALISTS_FROM_BUILDING);
	getDatabaseValue("GREAT_PERSON_THRESHOLD_BASE",m_iGREAT_PERSON_THRESHOLD_BASE);
	getDatabaseValue("GREAT_PERSON_THRESHOLD_INCREASE",m_iGREAT_PERSON_THRESHOLD_INCREASE);
	getDatabaseValue("CULTURE_BOMB_COOLDOWN",m_iCULTURE_BOMB_COOLDOWN);
	getDatabaseValue("CULTURE_BOMB_MINOR_FRIENDSHIP_CHANGE",m_iCULTURE_BOMB_MINOR_FRIENDSHIP_CHANGE);
	getDatabaseValue("LANDMARK_MINOR_FRIENDSHIP_CHANGE",m_iLANDMARK_MINOR_FRIENDSHIP_CHANGE);
	getDatabaseValue("UNIT_AUTO_EXPLORE_DISABLED",m_iUNIT_AUTO_EXPLORE_DISABLED);
	getDatabaseValue("UNIT_AUTO_EXPLORE_FULL_DISABLED",m_iUNIT_AUTO_EXPLORE_FULL_DISABLED);
	getDatabaseValue("UNIT_WORKER_AUTOMATION_DISABLED",m_iUNIT_WORKER_AUTOMATION_DISABLED);
	getDatabaseValue("UNIT_DELETE_DISABLED",m_iUNIT_DELETE_DISABLED);
	getDatabaseValue("MIN_START_AREA_TILES",m_iMIN_START_AREA_TILES);
	getDatabaseValue("MIN_DISTANCE_OTHER_AREA_PERCENT",m_iMIN_DISTANCE_OTHER_AREA_PERCENT);
	getDatabaseValue("MINOR_CIV_FOOD_REQUIREMENT",m_iMINOR_CIV_FOOD_REQUIREMENT);
	getDatabaseValue("MAJOR_CIV_FOOD_REQUIREMENT",m_iMAJOR_CIV_FOOD_REQUIREMENT);
	getDatabaseValue("MIN_START_FOUND_VALUE_AS_PERCENT_OF_BEST",m_iMIN_START_FOUND_VALUE_AS_PERCENT_OF_BEST);
	getDatabaseValue("START_AREA_FOOD_MULTIPLIER",m_iSTART_AREA_FOOD_MULTIPLIER);
	getDatabaseValue("START_AREA_HAPPINESS_MULTIPLIER",m_iSTART_AREA_HAPPINESS_MULTIPLIER);
	getDatabaseValue("START_AREA_PRODUCTION_MULTIPLIER",m_iSTART_AREA_PRODUCTION_MULTIPLIER);
	getDatabaseValue("START_AREA_GOLD_MULTIPLIER",m_iSTART_AREA_GOLD_MULTIPLIER);
	getDatabaseValue("START_AREA_SCIENCE_MULTIPLIER",m_iSTART_AREA_SCIENCE_MULTIPLIER);
	getDatabaseValue("START_AREA_FAITH_MULTIPLIER",m_iSTART_AREA_FAITH_MULTIPLIER);
	getDatabaseValue("START_AREA_RESOURCE_MULTIPLIER",m_iSTART_AREA_RESOURCE_MULTIPLIER);
	getDatabaseValue("START_AREA_STRATEGIC_MULTIPLIER",m_iSTART_AREA_STRATEGIC_MULTIPLIER);
	getDatabaseValue("START_AREA_BUILD_ON_COAST_PERCENT",m_iSTART_AREA_BUILD_ON_COAST_PERCENT);
	getDatabaseValue("SETTLER_FOOD_MULTIPLIER",m_iSETTLER_FOOD_MULTIPLIER);
	getDatabaseValue("SETTLER_HAPPINESS_MULTIPLIER",m_iSETTLER_HAPPINESS_MULTIPLIER);
	getDatabaseValue("SETTLER_PRODUCTION_MULTIPLIER",m_iSETTLER_PRODUCTION_MULTIPLIER);
	getDatabaseValue("SETTLER_GOLD_MULTIPLIER",m_iSETTLER_GOLD_MULTIPLIER);
	getDatabaseValue("SETTLER_SCIENCE_MULTIPLIER",m_iSETTLER_SCIENCE_MULTIPLIER);
	getDatabaseValue("SETTLER_FAITH_MULTIPLIER",m_iSETTLER_FAITH_MULTIPLIER);
	getDatabaseValue("SETTLER_RESOURCE_MULTIPLIER",m_iSETTLER_RESOURCE_MULTIPLIER);
	getDatabaseValue("SETTLER_STRATEGIC_MULTIPLIER",m_iSETTLER_STRATEGIC_MULTIPLIER);
	getDatabaseValue("SETTLER_BUILD_ON_COAST_PERCENT",m_iSETTLER_BUILD_ON_COAST_PERCENT);
	getDatabaseValue("CITY_RING_1_MULTIPLIER",m_iCITY_RING_1_MULTIPLIER);
	getDatabaseValue("CITY_RING_2_MULTIPLIER",m_iCITY_RING_2_MULTIPLIER);
	getDatabaseValue("CITY_RING_3_MULTIPLIER",m_iCITY_RING_3_MULTIPLIER);
	getDatabaseValue("CITY_RING_4_MULTIPLIER",m_iCITY_RING_4_MULTIPLIER);
	getDatabaseValue("CITY_RING_5_MULTIPLIER",m_iCITY_RING_5_MULTIPLIER);
	getDatabaseValue("SETTLER_EVALUATION_DISTANCE",m_iSETTLER_EVALUATION_DISTANCE);
	getDatabaseValue("SETTLER_DISTANCE_DROPOFF_MODIFIER",m_iSETTLER_DISTANCE_DROPOFF_MODIFIER);
	getDatabaseValue("BUILD_ON_RESOURCE_PERCENT",m_iBUILD_ON_RESOURCE_PERCENT);
	getDatabaseValue("BUILD_ON_RIVER_PERCENT",m_iBUILD_ON_RIVER_PERCENT);
	getDatabaseValue("CHOKEPOINT_STRATEGIC_VALUE",m_iCHOKEPOINT_STRATEGIC_VALUE);
	getDatabaseValue("HILL_STRATEGIC_VALUE",m_iHILL_STRATEGIC_VALUE);
	getDatabaseValue("ALREADY_OWNED_STRATEGIC_VALUE",m_iALREADY_OWNED_STRATEGIC_VALUE);
	getDatabaseValue("MINOR_CIV_CONTACT_GOLD_FIRST",m_iMINOR_CIV_CONTACT_GOLD_FIRST);
	getDatabaseValue("MINOR_CIV_CONTACT_GOLD_OTHER",m_iMINOR_CIV_CONTACT_GOLD_OTHER);
	GD_INT_CACHE(COMBAT_AI_OFFENSE_DAMAGEWEIGHT);
	GD_INT_CACHE(COMBAT_AI_OFFENSE_DANGERWEIGHT);
	GD_INT_CACHE(COMBAT_AI_OFFENSE_SCORE_BIAS);
	GD_INT_CACHE(COMBAT_AI_DEFENSE_DANGERWEIGHT);
	GD_INT_CACHE(COMBAT_AI_DEFENSE_SCORE_BIAS);

	GD_INT_CACHE(DIPLOAI_DISABLE_VICTORY_COMPETITION);
	GD_INT_CACHE(DIPLOAI_DISABLE_ENDGAME_AGGRESSION);
	GD_INT_CACHE(DIPLOAI_ENABLE_NUCLEAR_GANDHI);
	GD_INT_CACHE(DIPLOAI_DISABLE_WAR_BRIBES);
	GD_INT_CACHE(DIPLOAI_DISABLE_CITY_TRADING);
	GD_INT_CACHE(DIPLOAI_DISABLE_INSULT_MESSAGES);
	GD_INT_CACHE(DIPLOAI_DISABLE_COMPLIMENT_MESSAGES);
	GD_INT_CACHE(DIPLOAI_SHOW_ALL_OPINION_MODIFIERS);
	GD_INT_CACHE(DIPLOAI_SHOW_ALL_OPINION_VALUES);
	GD_INT_CACHE(DIPLOAI_SHOW_BASE_HUMAN_OPINION);
	GD_INT_CACHE(DIPLOAI_NO_FLAVOR_RANDOMIZATION);
	GD_INT_CACHE(DIPLOAI_ENABLE_LUMP_GOLD_TRADES);
	GD_INT_CACHE(DIPLOAI_DISABLE_FRIENDSHIP_REQUESTS);
	GD_INT_CACHE(DIPLOAI_DISABLE_GIFT_OFFERS);
	GD_INT_CACHE(DIPLOAI_DISABLE_COOP_WAR_REQUESTS);
	GD_INT_CACHE(DIPLOAI_DISABLE_HELP_REQUESTS);
	GD_INT_CACHE(DIPLOAI_DISABLE_TRADE_OFFERS);
	GD_INT_CACHE(DIPLOAI_DISABLE_PEACE_OFFERS);
	GD_INT_CACHE(DIPLOAI_DISABLE_ALL_STATEMENTS);
	GD_INT_CACHE(DIPLOAI_PASSIVE_MODE);
	GD_INT_CACHE(DIPLOAI_AGGRESSIVE_MODE);
	GD_INT_CACHE(DIPLOAI_DISABLE_DOMINATION_ONLY_AGGRESSION);
	GD_INT_CACHE(DIPLOAI_ENABLE_DEBUG_MODE);

#if defined(MOD_GLOBAL_CS_GIFTS)
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_BONUS_FRIENDSHIP);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_BONUS_CULTURE);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_BONUS_FAITH);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_BONUS_GOLD);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_BONUS_FOOD);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_BONUS_UNIT);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_XP_PER_ERA);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_XP_RANDOM);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_PLAYER_MULTIPLIER);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_PLAYER_DIVISOR);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_SUBSEQUENT_TEAM_MULTIPLIER);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_SUBSEQUENT_TEAM_DIVISOR);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_FRIENDLY_BONUS_MULTIPLIER);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_FRIENDLY_BONUS_DIVISOR);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_FRIENDLY_UNIT_MULTIPLIER);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_FRIENDLY_UNIT_DIVISOR);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_HOSTILE_BONUS_MULTIPLIER);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_HOSTILE_BONUS_DIVISOR);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_HOSTILE_UNIT_MULTIPLIER);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_HOSTILE_UNIT_DIVISOR);
#endif
	getDatabaseValue("MINOR_CIV_GROWTH_PERCENT",m_iMINOR_CIV_GROWTH_PERCENT);
	getDatabaseValue("MINOR_CIV_PRODUCTION_PERCENT",m_iMINOR_CIV_PRODUCTION_PERCENT);
	getDatabaseValue("MINOR_CIV_GOLD_PERCENT",m_iMINOR_CIV_GOLD_PERCENT);
	getDatabaseValue("MINOR_CIV_TECH_PERCENT",m_iMINOR_CIV_TECH_PERCENT);
	getDatabaseValue("MINOR_POLICY_RESOURCE_MULTIPLIER",m_iMINOR_POLICY_RESOURCE_MULTIPLIER);
	getDatabaseValue("MINOR_POLICY_RESOURCE_HAPPINESS_MULTIPLIER",m_iMINOR_POLICY_RESOURCE_HAPPINESS_MULTIPLIER);
	getDatabaseValue("MINOR_GOLD_GIFT_LARGE",m_iMINOR_GOLD_GIFT_LARGE);
	getDatabaseValue("MINOR_GOLD_GIFT_MEDIUM",m_iMINOR_GOLD_GIFT_MEDIUM);
	getDatabaseValue("MINOR_GOLD_GIFT_SMALL",m_iMINOR_GOLD_GIFT_SMALL);
	getDatabaseValue("MINOR_CIV_TILE_IMPROVEMENT_GIFT_COST",m_iMINOR_CIV_TILE_IMPROVEMENT_GIFT_COST);
	getDatabaseValue("MINOR_CIV_BUYOUT_COST",m_iMINOR_CIV_BUYOUT_COST);
	getDatabaseValue("MINOR_CIV_BUYOUT_TURNS",m_iMINOR_CIV_BUYOUT_TURNS);
	getDatabaseValue("MINOR_FRIENDSHIP_FROM_TRADE_MISSION",m_iMINOR_FRIENDSHIP_FROM_TRADE_MISSION);
	getDatabaseValue("MINOR_FRIENDSHIP_ANCHOR_DEFAULT",m_iMINOR_FRIENDSHIP_ANCHOR_DEFAULT);
	getDatabaseValue("MINOR_FRIENDSHIP_ANCHOR_MOD_PROTECTED",m_iMINOR_FRIENDSHIP_ANCHOR_MOD_PROTECTED);
	getDatabaseValue("MINOR_FRIENDSHIP_ANCHOR_MOD_WARY_OF",m_iMINOR_FRIENDSHIP_ANCHOR_MOD_WARY_OF);
	getDatabaseValue("MINOR_UNIT_GIFT_TRAVEL_TURNS",m_iMINOR_UNIT_GIFT_TRAVEL_TURNS);
	getDatabaseValue("PLOT_UNIT_LIMIT",m_iPLOT_UNIT_LIMIT);
#if defined(MOD_GLOBAL_STACKING_RULES)
	GD_INT_CACHE(CITY_UNIT_LIMIT);
#endif
	getDatabaseValue("ZONE_OF_CONTROL_ENABLED",m_iZONE_OF_CONTROL_ENABLED);
	getDatabaseValue("FIRE_SUPPORT_DISABLED",m_iFIRE_SUPPORT_DISABLED);
	getDatabaseValue("MAX_HIT_POINTS",m_iMAX_HIT_POINTS);
	getDatabaseValue("MAX_CITY_HIT_POINTS",m_iMAX_CITY_HIT_POINTS);
	getDatabaseValue("CITY_HIT_POINTS_HEALED_PER_TURN",m_iCITY_HIT_POINTS_HEALED_PER_TURN);
	getDatabaseValue("FLAT_LAND_EXTRA_DEFENSE",m_iFLAT_LAND_EXTRA_DEFENSE);
	getDatabaseValue("HILLS_EXTRA_DEFENSE",m_iHILLS_EXTRA_DEFENSE);
	getDatabaseValue("RIVER_ATTACK_MODIFIER",m_iRIVER_ATTACK_MODIFIER);
	getDatabaseValue("AMPHIB_ATTACK_MODIFIER",m_iAMPHIB_ATTACK_MODIFIER);
	getDatabaseValue("ENEMY_HEAL_RATE",m_iENEMY_HEAL_RATE);
	getDatabaseValue("NEUTRAL_HEAL_RATE",m_iNEUTRAL_HEAL_RATE);
	getDatabaseValue("FRIENDLY_HEAL_RATE",m_iFRIENDLY_HEAL_RATE);
	getDatabaseValue("INSTA_HEAL_RATE",m_iINSTA_HEAL_RATE);
	getDatabaseValue("CITY_HEAL_RATE",m_iCITY_HEAL_RATE);
	getDatabaseValue("ATTACK_SAME_STRENGTH_MIN_DAMAGE",m_iATTACK_SAME_STRENGTH_MIN_DAMAGE);
	getDatabaseValue("RANGE_ATTACK_RANGED_DEFENDER_MOD",m_iRANGE_ATTACK_RANGED_DEFENDER_MOD);
	getDatabaseValue("ATTACK_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE",m_iATTACK_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE);
	getDatabaseValue("RANGE_ATTACK_SAME_STRENGTH_MIN_DAMAGE",m_iRANGE_ATTACK_SAME_STRENGTH_MIN_DAMAGE);
	getDatabaseValue("RANGE_ATTACK_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE",m_iRANGE_ATTACK_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE);
	getDatabaseValue("AIR_STRIKE_SAME_STRENGTH_MIN_DEFENSE_DAMAGE",m_iAIR_STRIKE_SAME_STRENGTH_MIN_DEFENSE_DAMAGE);
	getDatabaseValue("AIR_STRIKE_SAME_STRENGTH_POSSIBLE_EXTRA_DEFENSE_DAMAGE",m_iAIR_STRIKE_SAME_STRENGTH_POSSIBLE_EXTRA_DEFENSE_DAMAGE);
	getDatabaseValue("INTERCEPTION_SAME_STRENGTH_MIN_DAMAGE",m_iINTERCEPTION_SAME_STRENGTH_MIN_DAMAGE);
	getDatabaseValue("INTERCEPTION_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE",m_iINTERCEPTION_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE);
	getDatabaseValue("AIR_SWEEP_INTERCEPTION_DAMAGE_MOD",m_iAIR_SWEEP_INTERCEPTION_DAMAGE_MOD);
	getDatabaseValue("WOUNDED_DAMAGE_MULTIPLIER",m_iWOUNDED_DAMAGE_MULTIPLIER);
	getDatabaseValue("TRAIT_WOUNDED_DAMAGE_MOD",m_iTRAIT_WOUNDED_DAMAGE_MOD);
	getDatabaseValue("CITY_STRENGTH_DEFAULT",m_iCITY_STRENGTH_DEFAULT);
	getDatabaseValue("CITY_STRENGTH_POPULATION_CHANGE",m_iCITY_STRENGTH_POPULATION_CHANGE);
	getDatabaseValue("CITY_STRENGTH_UNIT_DIVISOR",m_iCITY_STRENGTH_UNIT_DIVISOR);
	getDatabaseValue("CITY_STRENGTH_HILL_CHANGE",m_iCITY_STRENGTH_HILL_CHANGE);
	getDatabaseValue("CITY_ATTACKING_DAMAGE_MOD",m_iCITY_ATTACKING_DAMAGE_MOD);
	getDatabaseValue("ATTACKING_CITY_MELEE_DAMAGE_MOD",m_iATTACKING_CITY_MELEE_DAMAGE_MOD);
#if defined(MOD_EVENTS_CITY_BOMBARD)
	GD_INT_CACHE(MAX_CITY_ATTACK_RANGE);
#endif
	getDatabaseValue("CITY_ATTACK_RANGE",m_iCITY_ATTACK_RANGE);
	getDatabaseValue("CAN_CITY_USE_INDIRECT_FIRE",m_iCAN_CITY_USE_INDIRECT_FIRE);
	getDatabaseValue("CITY_RANGED_ATTACK_STRENGTH_MULTIPLIER",m_iCITY_RANGED_ATTACK_STRENGTH_MULTIPLIER);
	getDatabaseValue("MIN_CITY_STRIKE_DAMAGE",m_iMIN_CITY_STRIKE_DAMAGE);
	getDatabaseValue("CITY_CAPTURE_DAMAGE_PERCENT",m_iCITY_CAPTURE_DAMAGE_PERCENT);
	getDatabaseValue("EXPERIENCE_PER_LEVEL",m_iEXPERIENCE_PER_LEVEL);
	getDatabaseValue("EXPERIENCE_ATTACKING_UNIT_MELEE",m_iEXPERIENCE_ATTACKING_UNIT_MELEE);
	getDatabaseValue("EXPERIENCE_DEFENDING_UNIT_MELEE",m_iEXPERIENCE_DEFENDING_UNIT_MELEE);
	getDatabaseValue("EXPERIENCE_ATTACKING_UNIT_AIR",m_iEXPERIENCE_ATTACKING_UNIT_AIR);
	getDatabaseValue("EXPERIENCE_DEFENDING_UNIT_AIR",m_iEXPERIENCE_DEFENDING_UNIT_AIR);
	getDatabaseValue("EXPERIENCE_ATTACKING_UNIT_RANGED",m_iEXPERIENCE_ATTACKING_UNIT_RANGED);
	getDatabaseValue("EXPERIENCE_DEFENDING_UNIT_RANGED",m_iEXPERIENCE_DEFENDING_UNIT_RANGED);
	getDatabaseValue("EXPERIENCE_ATTACKING_AIR_SWEEP",m_iEXPERIENCE_ATTACKING_AIR_SWEEP);
	getDatabaseValue("EXPERIENCE_DEFENDING_AIR_SWEEP_AIR",m_iEXPERIENCE_DEFENDING_AIR_SWEEP_AIR);
	getDatabaseValue("EXPERIENCE_DEFENDING_AIR_SWEEP_GROUND",m_iEXPERIENCE_DEFENDING_AIR_SWEEP_GROUND);
	getDatabaseValue("EXPERIENCE_ATTACKING_CITY_MELEE",m_iEXPERIENCE_ATTACKING_CITY_MELEE);
	getDatabaseValue("EXPERIENCE_ATTACKING_CITY_RANGED",m_iEXPERIENCE_ATTACKING_CITY_RANGED);
	getDatabaseValue("EXPERIENCE_ATTACKING_CITY_AIR",m_iEXPERIENCE_ATTACKING_CITY_AIR);
	getDatabaseValue("BARBARIAN_MAX_XP_VALUE",m_iBARBARIAN_MAX_XP_VALUE);
	getDatabaseValue("MINOR_MAX_XP_VALUE",m_iMINOR_MAX_XP_VALUE);
	getDatabaseValue("COMBAT_EXPERIENCE_IN_BORDERS_PERCENT",m_iCOMBAT_EXPERIENCE_IN_BORDERS_PERCENT);
	getDatabaseValue("GREAT_GENERALS_THRESHOLD_INCREASE",m_iGREAT_GENERALS_THRESHOLD_INCREASE);
	getDatabaseValue("GREAT_GENERALS_THRESHOLD_INCREASE_TEAM",m_iGREAT_GENERALS_THRESHOLD_INCREASE_TEAM);
	getDatabaseValue("GREAT_GENERALS_THRESHOLD",m_iGREAT_GENERALS_THRESHOLD);
	getDatabaseValue("UNIT_DEATH_XP_GREAT_GENERAL_LOSS",m_iUNIT_DEATH_XP_GREAT_GENERAL_LOSS);
	getDatabaseValue("MIN_EXPERIENCE_PER_COMBAT",m_iMIN_EXPERIENCE_PER_COMBAT);
	getDatabaseValue("MAX_EXPERIENCE_PER_COMBAT",m_iMAX_EXPERIENCE_PER_COMBAT);
	getDatabaseValue("CRAMPED_RANGE_FROM_CITY",m_iCRAMPED_RANGE_FROM_CITY);
	getDatabaseValue("CRAMPED_USABLE_PLOT_PERCENT",m_iCRAMPED_USABLE_PLOT_PERCENT);
	getDatabaseValue("PROXIMITY_NEIGHBORS_CLOSEST_CITY_REQUIREMENT",m_iPROXIMITY_NEIGHBORS_CLOSEST_CITY_REQUIREMENT);
	getDatabaseValue("PROXIMITY_CLOSE_CLOSEST_CITY_POSSIBILITY",m_iPROXIMITY_CLOSE_CLOSEST_CITY_POSSIBILITY);
	getDatabaseValue("PROXIMITY_FAR_DISTANCE_MAX",m_iPROXIMITY_FAR_DISTANCE_MAX);
	getDatabaseValue("PLOT_BASE_COST",m_iPLOT_BASE_COST);
	getDatabaseValue("PLOT_ADDITIONAL_COST_PER_PLOT",m_iPLOT_ADDITIONAL_COST_PER_PLOT);
	getDatabaseValue("PLOT_COST_APPEARANCE_DIVISOR",m_iPLOT_COST_APPEARANCE_DIVISOR);
	getDatabaseValue("CULTURE_COST_FIRST_PLOT",m_iCULTURE_COST_FIRST_PLOT);
	getDatabaseValue("CULTURE_COST_LATER_PLOT_MULTIPLIER",m_iCULTURE_COST_LATER_PLOT_MULTIPLIER);
	getDatabaseValue("CULTURE_COST_VISIBLE_DIVISOR",m_iCULTURE_COST_VISIBLE_DIVISOR);
	getDatabaseValue("CULTURE_PLOT_COST_MOD_MINIMUM",m_iCULTURE_PLOT_COST_MOD_MINIMUM);
	getDatabaseValue("MINOR_CIV_PLOT_CULTURE_COST_MULTIPLIER",m_iMINOR_CIV_PLOT_CULTURE_COST_MULTIPLIER);
	getDatabaseValue("MAXIMUM_WORK_PLOT_DISTANCE",m_iMAXIMUM_WORK_PLOT_DISTANCE);
	getDatabaseValue("MAXIMUM_BUY_PLOT_DISTANCE",m_iMAXIMUM_BUY_PLOT_DISTANCE);
	getDatabaseValue("MAXIMUM_ACQUIRE_PLOT_DISTANCE",m_iMAXIMUM_ACQUIRE_PLOT_DISTANCE);
	m_iMAXIMUM_WORK_PLOT_DISTANCE = range(m_iMAXIMUM_BUY_PLOT_DISTANCE, MIN_CITY_RADIUS, MAX_CITY_RADIUS);
	m_iMAXIMUM_BUY_PLOT_DISTANCE = range(m_iMAXIMUM_BUY_PLOT_DISTANCE, MIN_CITY_RADIUS, MAX_CITY_RADIUS);
	m_iMAXIMUM_ACQUIRE_PLOT_DISTANCE = range(m_iMAXIMUM_ACQUIRE_PLOT_DISTANCE, MIN_CITY_RADIUS, MAX_CITY_RADIUS);
	getDatabaseValue("PLOT_INFLUENCE_BASE_MULTIPLIER",m_iPLOT_INFLUENCE_BASE_MULTIPLIER);
	getDatabaseValue("PLOT_INFLUENCE_DISTANCE_MULTIPLIER",m_iPLOT_INFLUENCE_DISTANCE_MULTIPLIER);
	getDatabaseValue("PLOT_INFLUENCE_DISTANCE_DIVISOR",m_iPLOT_INFLUENCE_DISTANCE_DIVISOR);
	getDatabaseValue("PLOT_INFLUENCE_RING_COST",m_iPLOT_INFLUENCE_RING_COST);
	getDatabaseValue("PLOT_INFLUENCE_WATER_COST",m_iPLOT_INFLUENCE_WATER_COST);
	getDatabaseValue("PLOT_INFLUENCE_IMPROVEMENT_COST",m_iPLOT_INFLUENCE_IMPROVEMENT_COST);
	getDatabaseValue("PLOT_INFLUENCE_ROUTE_COST",m_iPLOT_INFLUENCE_ROUTE_COST);
	getDatabaseValue("PLOT_INFLUENCE_RESOURCE_COST",m_iPLOT_INFLUENCE_RESOURCE_COST);
	getDatabaseValue("PLOT_INFLUENCE_NW_COST",m_iPLOT_INFLUENCE_NW_COST);
#if defined(MOD_UI_CITY_EXPANSION)
	GD_INT_CACHE(PLOT_INFLUENCE_COST_VISIBLE_DIVISOR);
#endif
	getDatabaseValue("PLOT_BUY_RESOURCE_COST",m_iPLOT_BUY_RESOURCE_COST);
	getDatabaseValue("PLOT_BUY_YIELD_COST",m_iPLOT_BUY_YIELD_COST);
	getDatabaseValue("PLOT_INFLUENCE_YIELD_POINT_COST",m_iPLOT_INFLUENCE_YIELD_POINT_COST);
	getDatabaseValue("PLOT_INFLUENCE_NO_ADJACENT_OWNED_COST",m_iPLOT_INFLUENCE_NO_ADJACENT_OWNED_COST);
	getDatabaseValue("UNITED_NATIONS_COUNTDOWN_TURNS",m_iUNITED_NATIONS_COUNTDOWN_TURNS);
	getDatabaseValue("OWN_UNITED_NATIONS_VOTE_BONUS",m_iOWN_UNITED_NATIONS_VOTE_BONUS);
	getDatabaseValue("DIPLO_VICTORY_ALGORITHM_THRESHOLD",m_iDIPLO_VICTORY_ALGORITHM_THRESHOLD);
	getDatabaseValue("DIPLO_VICTORY_BEYOND_ALGORITHM_MULTIPLIER",m_iDIPLO_VICTORY_BEYOND_ALGORITHM_MULTIPLIER);
	getDatabaseValue("DIPLO_VICTORY_DEFAULT_VOTE_PERCENT",m_iDIPLO_VICTORY_DEFAULT_VOTE_PERCENT);
	getDatabaseValue("SCORE_CITY_MULTIPLIER",m_iSCORE_CITY_MULTIPLIER);
	getDatabaseValue("SCORE_POPULATION_MULTIPLIER",m_iSCORE_POPULATION_MULTIPLIER);
	getDatabaseValue("SCORE_LAND_MULTIPLIER",m_iSCORE_LAND_MULTIPLIER);
	getDatabaseValue("SCORE_WONDER_MULTIPLIER",m_iSCORE_WONDER_MULTIPLIER);
	getDatabaseValue("SCORE_TECH_MULTIPLIER",m_iSCORE_TECH_MULTIPLIER);
	getDatabaseValue("SCORE_FUTURE_TECH_MULTIPLIER",m_iSCORE_FUTURE_TECH_MULTIPLIER);
	getDatabaseValue("SCORE_POLICY_MULTIPLIER",m_iSCORE_POLICY_MULTIPLIER);
	getDatabaseValue("SCORE_GREAT_WORK_MULTIPLIER",m_iSCORE_GREAT_WORK_MULTIPLIER);
	getDatabaseValue("SCORE_BELIEF_MULTIPLIER",m_iSCORE_BELIEF_MULTIPLIER);
	getDatabaseValue("SCORE_RELIGION_CITIES_MULTIPLIER",m_iSCORE_RELIGION_CITIES_MULTIPLIER);
	getDatabaseValue("VICTORY_POINTS_PER_ERA",m_iVICTORY_POINTS_PER_ERA);
	getDatabaseValue("MIN_GAME_TURNS_ELAPSED_TO_TEST_VICTORY",m_iMIN_GAME_TURNS_ELAPSED_TO_TEST_VICTORY);
	getDatabaseValue("ZERO_SUM_COMPETITION_WONDERS_VICTORY_POINTS",m_iZERO_SUM_COMPETITION_WONDERS_VICTORY_POINTS);
	getDatabaseValue("ZERO_SUM_COMPETITION_POLICIES_VICTORY_POINTS",m_iZERO_SUM_COMPETITION_POLICIES_VICTORY_POINTS);
	getDatabaseValue("ZERO_SUM_COMPETITION_GREAT_PEOPLE_VICTORY_POINTS",m_iZERO_SUM_COMPETITION_GREAT_PEOPLE_VICTORY_POINTS);
	getDatabaseValue("MAX_CITY_DIST_HIGHWATER_MARK",m_iMAX_CITY_DIST_HIGHWATER_MARK);
	getDatabaseValue("HEAVY_RESOURCE_THRESHOLD",m_iHEAVY_RESOURCE_THRESHOLD);
	getDatabaseValue("PROGRESS_POPUP_TURN_FREQUENCY",m_iPROGRESS_POPUP_TURN_FREQUENCY);
	getDatabaseValue("SETTLER_PRODUCTION_SPEED",m_iSETTLER_PRODUCTION_SPEED);
	getDatabaseValue("BUY_PLOTS_DISABLED",m_iBUY_PLOTS_DISABLED);
	getDatabaseValue("CITY_STRENGTH_TECH_MULTIPLIER",m_iCITY_STRENGTH_TECH_MULTIPLIER);
	getDatabaseValue("WARLORD_EXTRA_EXPERIENCE_PER_UNIT_PERCENT",m_iWARLORD_EXTRA_EXPERIENCE_PER_UNIT_PERCENT);
	getDatabaseValue("BUILDING_SALE_DIVISOR",m_iBUILDING_SALE_DIVISOR);
	getDatabaseValue("DISBAND_UNIT_REFUND_PERCENT",m_iDISBAND_UNIT_REFUND_PERCENT);
	getDatabaseValue("MINOR_CIV_ROUTE_QUEST_WEIGHT",m_iMINOR_CIV_ROUTE_QUEST_WEIGHT);
	getDatabaseValue("WITHDRAW_MOD_ENEMY_MOVES",m_iWITHDRAW_MOD_ENEMY_MOVES);
	getDatabaseValue("WITHDRAW_MOD_BLOCKED_TILE",m_iWITHDRAW_MOD_BLOCKED_TILE);
	getDatabaseValue("AI_OPERATIONAL_MAX_RECRUIT_TURNS_DEFAULT",m_iAI_OPERATIONAL_MAX_RECRUIT_TURNS_DEFAULT);
	getDatabaseValue("AI_OPERATIONAL_MAX_RECRUIT_TURNS_ENEMY_TERRITORY",m_iAI_OPERATIONAL_MAX_RECRUIT_TURNS_ENEMY_TERRITORY);
#if defined(MOD_DIPLOMACY_CITYSTATES_HURRY) || defined(MOD_BALANCE_CORE)
	if (MOD_DIPLOMACY_CITYSTATES_HURRY || MOD_BALANCE_CORE) {
		getDatabaseValue("AI_GOLD_TREASURY_BUFFER",m_iAI_GOLD_TREASURY_BUFFER);
	}
#endif
#if defined(MOD_DIPLOMACY_CITYSTATES_QUESTS) || defined(MOD_BALANCE_CORE)
	if(MOD_BALANCE_CORE || MOD_DIPLOMACY_CITYSTATES_QUESTS){
	getDatabaseValue("BALANCE_MINOR_ANCHOR_ATTACK",m_iBALANCE_MINOR_ANCHOR_ATTACK);
	getDatabaseValue("BALANCE_CS_WAR_COOLDOWN_RATE",m_iBALANCE_CS_WAR_COOLDOWN_RATE);
	}
#endif
#if defined(MOD_BALANCE_CORE)
	if(MOD_BALANCE_CORE){
	getDatabaseValue("BALANCE_FOLLOWER_GROWTH_BONUS",m_iMOD_BALANCE_FOLLOWER_GROWTH_BONUS);
	getDatabaseValue("FRIENDS_GOLD_FLAT_BONUS_AMOUNT_INDUSTRIAL",m_iFRIENDS_GOLD_FLAT_BONUS_AMOUNT_INDUSTRIAL);
	getDatabaseValue("FRIENDS_GOLD_FLAT_BONUS_AMOUNT_RENAISSANCE",m_iFRIENDS_GOLD_FLAT_BONUS_AMOUNT_RENAISSANCE);
	getDatabaseValue("FRIENDS_GOLD_FLAT_BONUS_AMOUNT_MEDIEVAL",m_iFRIENDS_GOLD_FLAT_BONUS_AMOUNT_MEDIEVAL);
	getDatabaseValue("FRIENDS_GOLD_FLAT_BONUS_AMOUNT_CLASSICAL",m_iFRIENDS_GOLD_FLAT_BONUS_AMOUNT_CLASSICAL);
	getDatabaseValue("FRIENDS_GOLD_FLAT_BONUS_AMOUNT_ANCIENT",m_iFRIENDS_GOLD_FLAT_BONUS_AMOUNT_ANCIENT);
	getDatabaseValue("ALLIES_GOLD_FLAT_BONUS_AMOUNT_INDUSTRIAL",m_iALLIES_GOLD_FLAT_BONUS_AMOUNT_INDUSTRIAL);
	getDatabaseValue("ALLIES_GOLD_FLAT_BONUS_AMOUNT_RENAISSANCE",m_iALLIES_GOLD_FLAT_BONUS_AMOUNT_RENAISSANCE);
	getDatabaseValue("ALLIES_GOLD_FLAT_BONUS_AMOUNT_MEDIEVAL",m_iALLIES_GOLD_FLAT_BONUS_AMOUNT_MEDIEVAL);
	getDatabaseValue("ALLIES_GOLD_FLAT_BONUS_AMOUNT_CLASSICAL",m_iALLIES_GOLD_FLAT_BONUS_AMOUNT_CLASSICAL);
	getDatabaseValue("ALLIES_GOLD_FLAT_BONUS_AMOUNT_ANCIENT",m_iALLIES_GOLD_FLAT_BONUS_AMOUNT_ANCIENT);
	getDatabaseValue("FRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_INDUSTRIAL",m_iFRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_INDUSTRIAL);
	getDatabaseValue("FRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_RENAISSANCE",m_iFRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_RENAISSANCE);
	getDatabaseValue("FRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_MEDIEVAL",m_iFRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_MEDIEVAL);
	getDatabaseValue("FRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_CLASSICAL",m_iFRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_CLASSICAL);
	getDatabaseValue("FRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_ANCIENT",m_iFRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_ANCIENT);
	getDatabaseValue("ALLIES_SCIENCE_FLAT_BONUS_AMOUNT_INDUSTRIAL",m_iALLIES_SCIENCE_FLAT_BONUS_AMOUNT_INDUSTRIAL);
	getDatabaseValue("ALLIES_SCIENCE_FLAT_BONUS_AMOUNT_RENAISSANCE",m_iALLIES_SCIENCE_FLAT_BONUS_AMOUNT_RENAISSANCE);
	getDatabaseValue("ALLIES_SCIENCE_FLAT_BONUS_AMOUNT_MEDIEVAL",m_iALLIES_SCIENCE_FLAT_BONUS_AMOUNT_MEDIEVAL);
	getDatabaseValue("ALLIES_SCIENCE_FLAT_BONUS_AMOUNT_CLASSICAL",m_iALLIES_SCIENCE_FLAT_BONUS_AMOUNT_CLASSICAL);
	getDatabaseValue("ALLIES_SCIENCE_FLAT_BONUS_AMOUNT_ANCIENT",m_iALLIES_SCIENCE_FLAT_BONUS_AMOUNT_ANCIENT);
	getDatabaseValue("BALANCE_CORE_MUSICIAN_BLAST_HAPPINESS",m_iBALANCE_CORE_MUSICIAN_BLAST_HAPPINESS);
	getDatabaseValue("BALANCE_MAX_CS_ALLY_STRENGTH",m_iBALANCE_MAX_CS_ALLY_STRENGTH);
	getDatabaseValue("BALANCE_CS_PLEDGE_TO_PROTECT_DEFENSE_BONUS",m_iBALANCE_CS_PLEDGE_TO_PROTECT_DEFENSE_BONUS);
	getDatabaseValue("BALANCE_CS_PLEDGE_TO_PROTECT_DEFENSE_BONUS_MAX",m_iBALANCE_CS_PLEDGE_TO_PROTECT_DEFENSE_BONUS_MAX);
	getDatabaseValue("BALANCE_CS_ALLIANCE_DEFENSE_BONUS",m_iBALANCE_CS_ALLIANCE_DEFENSE_BONUS);
	getDatabaseValue("UNIT_AUTO_EXTRA_AUTOMATIONS_DISABLED",m_iUNIT_AUTO_EXTRA_AUTOMATIONS_DISABLED);
	getDatabaseValue("BALANCE_MARRIAGE_GP_RATE",m_iBALANCE_MARRIAGE_GP_RATE);
	getDatabaseValue("BALANCE_SPY_RESPAWN_TIMER",m_iBALANCE_SPY_RESPAWN_TIMER);
	getDatabaseValue("BALANCE_SPY_SABOTAGE_RATE",m_iBALANCE_SPY_SABOTAGE_RATE);
	getDatabaseValue("BALANCE_SPY_TO_MINOR_RATIO",m_iBALANCE_SPY_TO_MINOR_RATIO);
	getDatabaseValue("BALANCE_HAPPINESS_PENALTY_MAXIMUM",m_iBALANCE_HAPPINESS_PENALTY_MAXIMUM);
	getDatabaseValue("BALANCE_HAPPINESS_PRODUCTION_MODIFIER",m_iBALANCE_HAPPINESS_PRODUCTION_MODIFIER);
	getDatabaseValue("BALANCE_HAPPINESS_FOOD_MODIFIER",m_iBALANCE_HAPPINESS_FOOD_MODIFIER);
	getDatabaseValue("BALANCE_UNHAPPINESS_FOOD_MODIFIER",m_iBALANCE_UNHAPPINESS_FOOD_MODIFIER);
	getDatabaseValue("BALANCE_EMPIRE_BORDERLAND_STRATEGIC_VALUE",m_iBALANCE_EMPIRE_BORDERLAND_STRATEGIC_VALUE);
	getDatabaseValue("BALANCE_COAST_STRATEGIC_VALUE",m_iBALANCE_COAST_STRATEGIC_VALUE);
	getDatabaseValue("BALANCE_FRESH_WATER_STRATEGIC_VALUE",m_iBALANCE_FRESH_WATER_STRATEGIC_VALUE);
	getDatabaseValue("BALANCE_CHOKEPOINT_STRATEGIC_VALUE",m_iBALANCE_CHOKEPOINT_STRATEGIC_VALUE);
	getDatabaseValue("BALANCE_BAD_TILES_STRATEGIC_VALUE",m_iBALANCE_BAD_TILES_STRATEGIC_VALUE);
	getDatabaseValue("BALANCE_BARBARIAN_HEAL_RATE",m_iBALANCE_BARBARIAN_HEAL_RATE);
	getDatabaseValue("BALANCE_BASIC_ATTACK_ARMY_SIZE",m_iBALANCE_BASIC_ATTACK_ARMY_SIZE);
	getDatabaseValue("BALANCE_ARMY_NAVY_START_SIZE",m_iBALANCE_ARMY_NAVY_START_SIZE);
	getDatabaseValue("BALANCE_UNHAPPINESS_PER_SPECIALIST",m_iBALANCE_UNHAPPINESS_PER_SPECIALIST);
	getDatabaseValue("BALANCE_HAPPINESS_LUXURY_POP_SCALER",m_iBALANCE_HAPPINESS_LUXURY_POP_SCALER);
	getDatabaseValue("BALANCE_HAPPINESS_LUXURY_COUNT_SCALER",m_iBALANCE_HAPPINESS_LUXURY_COUNT_SCALER);
	getDatabaseValue("BALANCE_UNHAPPINESS_PER_MINORITY_POP",m_fBALANCE_UNHAPPINESS_PER_MINORITY_POP);
	getDatabaseValue("BALANCE_UNHAPPINESS_FROM_STARVING_PER_POP",m_fBALANCE_UNHAPPINESS_FROM_STARVING_PER_POP);
	getDatabaseValue("BALANCE_UNHAPPINESS_PER_PILLAGED",m_fBALANCE_UNHAPPINESS_PER_PILLAGED);
	getDatabaseValue("BALANCE_UNHAPPINESS_FROM_UNCONNECTED_PER_POP",m_fBALANCE_UNHAPPINESS_FROM_UNCONNECTED_PER_POP);
	getDatabaseValue("BALANCE_HAPPINESS_POP_MULTIPLIER",m_iBALANCE_HAPPINESS_POP_MULTIPLIER);
	getDatabaseValue("BALANCE_HAPPINESS_EMPIRE_MULTIPLIER",m_iBALANCE_HAPPINESS_EMPIRE_MULTIPLIER);
	getDatabaseValue("BALANCE_UNHAPPY_CITY_BASE_VALUE_BOREDOM",m_iBALANCE_UNHAPPY_CITY_BASE_VALUE_BOREDOM);
	getDatabaseValue("BALANCE_UNHAPPY_CITY_BASE_VALUE_ILLITERACY",m_iBALANCE_UNHAPPY_CITY_BASE_VALUE_ILLITERACY);
	getDatabaseValue("BALANCE_UNHAPPY_CITY_BASE_VALUE_DISORDER",m_iBALANCE_UNHAPPY_CITY_BASE_VALUE_DISORDER);
	getDatabaseValue("BALANCE_UNHAPPY_CITY_BASE_VALUE_POVERTY",m_iBALANCE_UNHAPPY_CITY_BASE_VALUE_POVERTY);
	getDatabaseValue("BALANCE_WONDER_BEATEN_CONSOLATION_PRIZE",m_iBALANCE_WONDER_BEATEN_CONSOLATION_PRIZE);
	getDatabaseValue("BALANCE_CULTURE_PERCENTAGE_VALUE",m_iBALANCE_CULTURE_PERCENTAGE_VALUE);
	getDatabaseValue("BALANCE_GA_PERCENTAGE_VALUE",m_iBALANCE_GA_PERCENTAGE_VALUE);
	getDatabaseValue("BALANCE_SCIENCE_PERCENTAGE_VALUE",m_iBALANCE_SCIENCE_PERCENTAGE_VALUE);
	getDatabaseValue("BALANCE_FAITH_PERCENTAGE_VALUE",m_iBALANCE_FAITH_PERCENTAGE_VALUE);
	getDatabaseValue("BALANCE_HAPPINESS_PUPPET_THRESHOLD_MOD",m_iBALANCE_HAPPINESS_PUPPET_THRESHOLD_MOD);
	getDatabaseValue("BALANCE_SCIENCE_INFLUENCE_LEVEL_EXOTIC",m_iBALANCE_SCIENCE_INFLUENCE_LEVEL_EXOTIC);
	getDatabaseValue("BALANCE_SCIENCE_INFLUENCE_LEVEL_FAMILIAR",m_iBALANCE_SCIENCE_INFLUENCE_LEVEL_FAMILIAR);
	getDatabaseValue("BALANCE_SCIENCE_INFLUENCE_LEVEL_POPULAR",m_iBALANCE_SCIENCE_INFLUENCE_LEVEL_POPULAR);
	getDatabaseValue("BALANCE_SCIENCE_INFLUENCE_LEVEL_INFLUENTIAL",m_iBALANCE_SCIENCE_INFLUENCE_LEVEL_INFLUENTIAL);
	getDatabaseValue("BALANCE_SCIENCE_INFLUENCE_LEVEL_DOMINANT",m_iBALANCE_SCIENCE_INFLUENCE_LEVEL_DOMINANT);
	getDatabaseValue("BALANCE_CONQUEST_REDUCTION_BOOST",m_iBALANCE_CONQUEST_REDUCTION_BOOST);
	getDatabaseValue("BALANCE_SPY_BOOST_INFLUENCE_EXOTIC",m_iBALANCE_SPY_BOOST_INFLUENCE_EXOTIC);
	getDatabaseValue("BALANCE_SPY_BOOST_INFLUENCE_FAMILIAR",m_iBALANCE_SPY_BOOST_INFLUENCE_FAMILIAR);
	getDatabaseValue("BALANCE_SPY_BOOST_INFLUENCE_POPULAR",m_iBALANCE_SPY_BOOST_INFLUENCE_POPULAR);
	getDatabaseValue("BALANCE_SPY_BOOST_INFLUENCE_INFLUENTIAL",m_iBALANCE_SPY_BOOST_INFLUENCE_INFLUENTIAL);
	getDatabaseValue("BALANCE_SPY_BOOST_INFLUENCE_DOMINANT",m_iBALANCE_SPY_BOOST_INFLUENCE_DOMINANT);
	getDatabaseValue("BALANCE_GOLD_INFLUENCE_LEVEL_FAMILIAR",m_iBALANCE_GOLD_INFLUENCE_LEVEL_FAMILIAR);
	getDatabaseValue("BALANCE_GOLD_INFLUENCE_LEVEL_POPULAR",m_iBALANCE_GOLD_INFLUENCE_LEVEL_POPULAR);
	getDatabaseValue("BALANCE_GOLD_INFLUENCE_LEVEL_INFLUENTIAL",m_iBALANCE_GOLD_INFLUENCE_LEVEL_INFLUENTIAL);
	getDatabaseValue("BALANCE_GOLD_INFLUENCE_LEVEL_DOMINANT",m_iBALANCE_GOLD_INFLUENCE_LEVEL_DOMINANT);
	getDatabaseValue("BALANCE_GOLD_INFLUENCE_LEVEL_EXOTIC",m_iBALANCE_GOLD_INFLUENCE_LEVEL_EXOTIC);
	getDatabaseValue("BALANCE_GROWTH_INFLUENCE_LEVEL_FAMILIAR",m_iBALANCE_GROWTH_INFLUENCE_LEVEL_FAMILIAR);
	getDatabaseValue("BALANCE_GROWTH_INFLUENCE_LEVEL_POPULAR",m_iBALANCE_GROWTH_INFLUENCE_LEVEL_POPULAR);
	getDatabaseValue("BALANCE_GROWTH_INFLUENCE_LEVEL_INFLUENTIAL",m_iBALANCE_GROWTH_INFLUENCE_LEVEL_INFLUENTIAL);
	getDatabaseValue("BALANCE_GROWTH_INFLUENCE_LEVEL_DOMINANT",m_iBALANCE_GROWTH_INFLUENCE_LEVEL_DOMINANT);
	getDatabaseValue("BALANCE_GROWTH_INFLUENCE_LEVEL_EXOTIC",m_iBALANCE_GROWTH_INFLUENCE_LEVEL_EXOTIC);
	getDatabaseValue("BALANCE_HAPPINESS_CAPITAL_MODIFIER",m_iBALANCE_HAPPINESS_CAPITAL_MODIFIER);
	getDatabaseValue("BALANCE_HAPPINESS_TECH_BASE_MODIFIER",m_fBALANCE_HAPPINESS_TECH_BASE_MODIFIER);
	getDatabaseValue("BALANCE_INFLUENCE_BOOST_PROTECTION_MINOR",m_iBALANCE_INFLUENCE_BOOST_PROTECTION_MINOR);
	getDatabaseValue("BALANCE_MOD_POLICY_BRANCHES_NEEDED_IDEOLOGY",m_iBALANCE_MOD_POLICY_BRANCHES_NEEDED_IDEOLOGY);
	getDatabaseValue("BALANCE_MOD_POLICIES_NEEDED_IDEOLOGY",m_iBALANCE_MOD_POLICIES_NEEDED_IDEOLOGY);
	getDatabaseValue("BUILDER_TASKING_BASELINE_ADDS_FOOD",m_iBUILDER_TASKING_BASELINE_ADDS_FOOD);
	getDatabaseValue("BUILDER_TASKING_BASELINE_ADDS_GOLD",m_iBUILDER_TASKING_BASELINE_ADDS_GOLD);
	getDatabaseValue("BUILDER_TASKING_BASELINE_ADDS_FAITH",m_iBUILDER_TASKING_BASELINE_ADDS_FAITH);
	getDatabaseValue("BUILDER_TASKING_BASELINE_ADDS_PRODUCTION",m_iBUILDER_TASKING_BASELINE_ADDS_PRODUCTION);
	getDatabaseValue("BUILDER_TASKING_BASELINE_ADDS_SCIENCE",m_iBUILDER_TASKING_BASELINE_ADDS_SCIENCE);
	getDatabaseValue("BALANCE_MINOR_PROTECTION_MINIMUM_DURATION",m_iBALANCE_MINOR_PROTECTION_MINIMUM_DURATION);
	getDatabaseValue("BALANCE_SCOUT_XP_RANDOM_VALUE",m_iBALANCE_SCOUT_XP_RANDOM_VALUE);
	getDatabaseValue("BALANCE_SCOUT_XP_BASE",m_iBALANCE_SCOUT_XP_BASE);
	getDatabaseValue("BALANCE_CORE_WORLD_WONDER_SAME_ERA_COST_MODIFIER",m_iBALANCE_CORE_WORLD_WONDER_SAME_ERA_COST_MODIFIER);
	getDatabaseValue("BALANCE_CORE_WORLD_WONDER_PREVIOUS_ERA_COST_MODIFIER",m_iBALANCE_CORE_WORLD_WONDER_PREVIOUS_ERA_COST_MODIFIER);
	getDatabaseValue("BALANCE_CORE_WORLD_WONDER_EARLIER_ERA_COST_MODIFIER",m_iBALANCE_CORE_WORLD_WONDER_EARLIER_ERA_COST_MODIFIER);
	getDatabaseValue("OPINION_WEIGHT_RA",m_iOPINION_WEIGHT_RA);
	getDatabaseValue("OPINION_WEIGHT_RA_SCIENTIFIC_MOD",m_iOPINION_WEIGHT_RA_SCIENTIFIC_MOD);
	getDatabaseValue("OPINION_WEIGHT_DP",m_iOPINION_WEIGHT_DP);
	getDatabaseValue("OPINION_WEIGHT_DP_MOST_VALUED_ALLY",m_iOPINION_WEIGHT_DP_MOST_VALUED_ALLY);
	getDatabaseValue("OPINION_WEIGHT_DP_WITH_FRIEND",m_iOPINION_WEIGHT_DP_WITH_FRIEND);
	getDatabaseValue("OPINION_WEIGHT_DP_WITH_FRIEND_SUBSEQUENT",m_iOPINION_WEIGHT_DP_WITH_FRIEND_SUBSEQUENT);
	getDatabaseValue("OPINION_WEIGHT_DP_WITH_MOST_VALUED_ALLY",m_iOPINION_WEIGHT_DP_WITH_MOST_VALUED_ALLY);
	getDatabaseValue("OPINION_WEIGHT_DP_WITH_MOST_VALUED_FRIEND",m_iOPINION_WEIGHT_DP_WITH_MOST_VALUED_FRIEND);
	getDatabaseValue("OPINION_WEIGHT_DP_WITH_ENEMY",m_iOPINION_WEIGHT_DP_WITH_ENEMY);
	getDatabaseValue("OPINION_WEIGHT_DP_WITH_ENEMY_SUBSEQUENT",m_iOPINION_WEIGHT_DP_WITH_ENEMY_SUBSEQUENT);
	getDatabaseValue("OPINION_WEIGHT_DP_WITH_BIGGEST_COMPETITOR",m_iOPINION_WEIGHT_DP_WITH_BIGGEST_COMPETITOR);
	getDatabaseValue("OPINION_WEIGHT_DP_WITH_BIGGEST_LEAGUE_RIVAL",m_iOPINION_WEIGHT_DP_WITH_BIGGEST_LEAGUE_RIVAL);
	getDatabaseValue("OPINION_WEIGHT_EMBASSY_MUTUAL",m_iOPINION_WEIGHT_EMBASSY_MUTUAL);
	getDatabaseValue("OPINION_WEIGHT_EMBASSY_THEM",m_iOPINION_WEIGHT_EMBASSY_THEM);
	getDatabaseValue("OPINION_WEIGHT_OPEN_BORDERS_MUTUAL",m_iOPINION_WEIGHT_OPEN_BORDERS_MUTUAL);
	getDatabaseValue("OPINION_WEIGHT_OPEN_BORDERS_US",m_iOPINION_WEIGHT_OPEN_BORDERS_US);
	getDatabaseValue("OPINION_WEIGHT_OPEN_BORDERS_THEM",m_iOPINION_WEIGHT_OPEN_BORDERS_THEM);
	getDatabaseValue("OPINION_WEIGHT_PLUNDERED_TRADE_ROUTE",m_iOPINION_WEIGHT_PLUNDERED_TRADE_ROUTE);
	getDatabaseValue("OPINION_WEIGHT_PLOTTED_AGAINST_US",m_iOPINION_WEIGHT_PLOTTED_AGAINST_US);
	getDatabaseValue("OPINION_WEIGHT_PLOTTED_AGAINST_US_SUBSEQUENT",m_iOPINION_WEIGHT_PLOTTED_AGAINST_US_SUBSEQUENT);
	getDatabaseValue("OPINION_WEIGHT_PERFORMED_COUP",m_iOPINION_WEIGHT_PERFORMED_COUP);
	getDatabaseValue("OPINION_WEIGHT_EXCAVATED_ARTIFACT",m_iOPINION_WEIGHT_EXCAVATED_ARTIFACT);
	getDatabaseValue("GWAM_THRESHOLD_DECREASE",m_iGWAM_THRESHOLD_DECREASE);
	getDatabaseValue("BALANCE_BUILDING_INVESTMENT_BASELINE",m_iBALANCE_BUILDING_INVESTMENT_BASELINE);
	getDatabaseValue("BALANCE_UNIT_INVESTMENT_BASELINE",m_iBALANCE_UNIT_INVESTMENT_BASELINE);
	getDatabaseValue("OPEN_BORDERS_MODIFIER_TRADE_GOLD",m_iOPEN_BORDERS_MODIFIER_TRADE_GOLD);
	getDatabaseValue("MOD_BALANCE_CORE_MINIMUM_RANKING_PTP",m_fMOD_BALANCE_CORE_MINIMUM_RANKING_PTP);
	getDatabaseValue("BALANCE_CORE_PRODUCTION_DESERT_IMPROVEMENT",m_iMOD_BALANCE_CORE_PRODUCTION_DESERT_IMPROVEMENT);
	getDatabaseValue("BALANCE_CORE_CORP_OFFICE_FRANCHISE_CONVERSION",m_fMOD_BALANCE_CORE_CORP_OFFICE_FRANCHISE_CONVERSION);
	getDatabaseValue("BALANCE_CORE_CORP_OFFICE_TR_CONVERSION",m_fMOD_BALANCE_CORE_CORP_OFFICE_TR_CONVERSION);
	}
#endif
	// -- floats --

	getDatabaseValue("DIPLO_VICTORY_CIV_DELEGATES_COEFFICIENT",m_fDIPLO_VICTORY_CIV_DELEGATES_COEFFICIENT);
	getDatabaseValue("DIPLO_VICTORY_CIV_DELEGATES_CONSTANT",m_fDIPLO_VICTORY_CIV_DELEGATES_CONSTANT);
	getDatabaseValue("DIPLO_VICTORY_CS_DELEGATES_COEFFICIENT",m_fDIPLO_VICTORY_CS_DELEGATES_COEFFICIENT);
	getDatabaseValue("DIPLO_VICTORY_CS_DELEGATES_CONSTANT",m_fDIPLO_VICTORY_CS_DELEGATES_CONSTANT);
	getDatabaseValue("AI_PRODUCTION_WEIGHT_MOD_PER_TURN_LEFT",m_fAI_PRODUCTION_WEIGHT_MOD_PER_TURN_LEFT);
	getDatabaseValue("AI_PRODUCTION_WEIGHT_BASE_MOD",m_fAI_PRODUCTION_WEIGHT_BASE_MOD);
	getDatabaseValue("AI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT",m_fAI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT);
	getDatabaseValue("AI_RESEARCH_WEIGHT_BASE_MOD",m_fAI_RESEARCH_WEIGHT_BASE_MOD);
	getDatabaseValue("HURRY_GOLD_PRODUCTION_EXPONENT",m_fHURRY_GOLD_PRODUCTION_EXPONENT);
	getDatabaseValue("CITY_ZOOM_LEVEL_1",m_fCITY_ZOOM_LEVEL_1);
	getDatabaseValue("CITY_ZOOM_LEVEL_2",m_fCITY_ZOOM_LEVEL_2);
	getDatabaseValue("CITY_ZOOM_LEVEL_3",m_fCITY_ZOOM_LEVEL_3);
	getDatabaseValue("CITY_ZOOM_OFFSET",m_fCITY_ZOOM_OFFSET);
	getDatabaseValue("CULTURE_COST_LATER_PLOT_EXPONENT",m_fCULTURE_COST_LATER_PLOT_EXPONENT);
	getDatabaseValue("POST_COMBAT_TEXT_DELAY",m_fPOST_COMBAT_TEXT_DELAY);
	getDatabaseValue("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER",m_fAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER);
	getDatabaseValue("AI_DANGER_MAJOR_APPROACH_WAR",m_fAI_DANGER_MAJOR_APPROACH_WAR);
	getDatabaseValue("AI_DANGER_MAJOR_APPROACH_HOSTILE",m_fAI_DANGER_MAJOR_APPROACH_HOSTILE);
	getDatabaseValue("AI_DANGER_MAJOR_APPROACH_DECEPTIVE",m_fAI_DANGER_MAJOR_APPROACH_DECEPTIVE);
	getDatabaseValue("AI_DANGER_MAJOR_APPROACH_GUARDED",m_fAI_DANGER_MAJOR_APPROACH_GUARDED);
	getDatabaseValue("AI_DANGER_MAJOR_APPROACH_AFRAID",m_fAI_DANGER_MAJOR_APPROACH_AFRAID);
	getDatabaseValue("AI_DANGER_MAJOR_APPROACH_FRIENDLY",m_fAI_DANGER_MAJOR_APPROACH_FRIENDLY);
	getDatabaseValue("AI_DANGER_MAJOR_APPROACH_NEUTRAL",m_fAI_DANGER_MAJOR_APPROACH_NEUTRAL);
	getDatabaseValue("AI_DANGER_MINOR_APPROACH_NEUTRAL",m_fAI_DANGER_MINOR_APPROACH_NEUTRAL);
	getDatabaseValue("AI_DANGER_MINOR_APPROACH_FRIENDLY",m_fAI_DANGER_MINOR_APPROACH_FRIENDLY);
	getDatabaseValue("AI_DANGER_MINOR_APPROACH_BULLY",m_fAI_DANGER_MINOR_APPROACH_BULLY);
	getDatabaseValue("AI_DANGER_MINOR_APPROACH_CONQUEST",m_fAI_DANGER_MINOR_APPROACH_CONQUEST);
	getDatabaseValue("FLAVOR_STANDARD_LOG10_TILES_PER_PLAYER",m_fFLAVOR_STANDARD_LOG10_TILES_PER_PLAYER);
	getDatabaseValue("DIPLO_VICTORY_TEAM_MULTIPLIER",m_fDIPLO_VICTORY_TEAM_MULTIPLIER);
	getDatabaseValue("AI_TACTICAL_FLAVOR_DAMPENING_FOR_MOVE_PRIORITIZATION",m_fAI_TACTICAL_FLAVOR_DAMPENING_FOR_MOVE_PRIORITIZATION);
	getDatabaseValue("AI_STRATEGY_DEFEND_MY_LANDS_UNITS_PER_CITY",m_fAI_STRATEGY_DEFEND_MY_LANDS_UNITS_PER_CITY);
	getDatabaseValue("AI_STRATEGY_NAVAL_UNITS_PER_CITY",m_fAI_STRATEGY_NAVAL_UNITS_PER_CITY);
	getDatabaseValue("GOLD_GIFT_FRIENDSHIP_EXPONENT",m_fGOLD_GIFT_FRIENDSHIP_EXPONENT);
	getDatabaseValue("GOLD_GIFT_FRIENDSHIP_DIVISOR",m_fGOLD_GIFT_FRIENDSHIP_DIVISOR);
	getDatabaseValue("HURRY_GOLD_TECH_EXPONENT",m_fHURRY_GOLD_TECH_EXPONENT);
	getDatabaseValue("HURRY_GOLD_CULTURE_EXPONENT",m_fHURRY_GOLD_CULTURE_EXPONENT);
	getDatabaseValue("CITY_GROWTH_MULTIPLIER",m_fCITY_GROWTH_MULTIPLIER);
	getDatabaseValue("CITY_GROWTH_EXPONENT",m_fCITY_GROWTH_EXPONENT);
	getDatabaseValue("POLICY_COST_EXPONENT",m_fPOLICY_COST_EXPONENT);
	getDatabaseValue("POLICY_COST_EXTRA_VALUE",m_fPOLICY_COST_EXTRA_VALUE);
	getDatabaseValue("UNIT_UPGRADE_COST_MULTIPLIER_PER_ERA",m_fUNIT_UPGRADE_COST_MULTIPLIER_PER_ERA);
	getDatabaseValue("UNIT_UPGRADE_COST_EXPONENT",m_fUNIT_UPGRADE_COST_EXPONENT);
	getDatabaseValue("CITY_STRENGTH_TECH_BASE",m_fCITY_STRENGTH_TECH_BASE);
	getDatabaseValue("CITY_STRENGTH_TECH_EXPONENT",m_fCITY_STRENGTH_TECH_EXPONENT);
	getDatabaseValue("ESPIONAGE_COUP_NOBODY_BONUS",m_fESPIONAGE_COUP_NOBODY_BONUS);
	getDatabaseValue("ESPIONAGE_COUP_MULTIPLY_CONSTANT",m_fESPIONAGE_COUP_MULTIPLY_CONSTANT);
	getDatabaseValue("ESPIONAGE_COUP_SPY_LEVEL_DELTA_ZERO",m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_ZERO);
	getDatabaseValue("ESPIONAGE_COUP_SPY_LEVEL_DELTA_ONE",m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_ONE);
	getDatabaseValue("ESPIONAGE_COUP_SPY_LEVEL_DELTA_TWO",m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_TWO);
	getDatabaseValue("ESPIONAGE_COUP_SPY_LEVEL_DELTA_THREE",m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_THREE);
	getDatabaseValue("ESPIONAGE_COUP_SPY_LEVEL_DELTA_FOUR",m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_FOUR);
	getDatabaseValue("INTERNATIONAL_TRADE_BASE",m_iINTERNATIONAL_TRADE_BASE);
	getDatabaseValue("INTERNATIONAL_TRADE_EXCLUSIVE_CONNECTION",m_iINTERNATIONAL_TRADE_EXCLUSIVE_CONNECTION);
	getDatabaseValue("INTERNATIONAL_TRADE_CITY_GPT_DIVISOR",m_iINTERNATIONAL_TRADE_CITY_GPT_DIVISOR);
	getDatabaseValue("PILLAGE_HEAL_AMOUNT",m_iPILLAGE_HEAL_AMOUNT);
	getDatabaseValue("CITY_CONNECTIONS_CONNECT_TO_CAPITAL",m_iCITY_CONNECTIONS_CONNECT_TO_CAPITAL);
	getDatabaseValue("UNRESEARCHED_TECH_BONUS_FROM_KILLS_SLOPE",m_fUNRESEARCHED_TECH_FROM_KILLS_SLOPE);
	getDatabaseValue("UNRESEARCHED_TECH_BONUS_FROM_KILLS_INTERCEPT",m_fUNRESEARCHED_TECH_FROM_KILLS_INTERCEPT);
	getDatabaseValue("BASE_CULTURE_PER_GREAT_WORK",m_iBASE_CULTURE_PER_GREAT_WORK);
	getDatabaseValue("BASE_TOURISM_PER_GREAT_WORK",m_iBASE_TOURISM_PER_GREAT_WORK);
	getDatabaseValue("TOURISM_MODIFIER_SHARED_RELIGION",m_iTOURISM_MODIFIER_SHARED_RELIGION);
	getDatabaseValue("TOURISM_MODIFIER_TRADE_ROUTE",m_iTOURISM_MODIFIER_TRADE_ROUTE);
	getDatabaseValue("TOURISM_MODIFIER_OPEN_BORDERS",m_iTOURISM_MODIFIER_OPEN_BORDERS);
	getDatabaseValue("TOURISM_MODIFIER_DIFFERENT_IDEOLOGIES",m_iTOURISM_MODIFIER_DIFFERENT_IDEOLOGIES);
	getDatabaseValue("TOURISM_MODIFIER_DIPLOMAT",m_iTOURISM_MODIFIER_DIPLOMAT);
	getDatabaseValue("MINIUMUM_TOURISM_BLAST_STRENGTH",m_iMINIUMUM_TOURISM_BLAST_STRENGTH);
	getDatabaseValue("CULTURE_LEVEL_EXOTIC",m_iCULTURE_LEVEL_EXOTIC);
	getDatabaseValue("CULTURE_LEVEL_FAMILIAR",m_iCULTURE_LEVEL_FAMILIAR);
	getDatabaseValue("CULTURE_LEVEL_POPULAR",m_iCULTURE_LEVEL_POPULAR);
	getDatabaseValue("CULTURE_LEVEL_INFLUENTIAL",m_iCULTURE_LEVEL_INFLUENTIAL);
	getDatabaseValue("CULTURE_LEVEL_DOMINANT",m_iCULTURE_LEVEL_DOMINANT);
	getDatabaseValue("MIN_DIG_SITES_PER_MAJOR_CIV",m_iMIN_DIG_SITES_PER_MAJOR_CIV);
	getDatabaseValue("MAX_DIG_SITES_PER_MAJOR_CIV",m_iMAX_DIG_SITES_PER_MAJOR_CIV);
	getDatabaseValue("PERCENT_SITES_HIDDEN",m_iPERCENT_SITES_HIDDEN);
	getDatabaseValue("PERCENT_HIDDEN_SITES_WRITING",m_iPERCENT_HIDDEN_SITES_WRITING);
	getDatabaseValue("SAPPED_CITY_ATTACK_MODIFIER",m_iSAPPED_CITY_ATTACK_MODIFIER);
	getDatabaseValue("SAPPER_BONUS_RANGE",m_iSAPPER_BONUS_RANGE);
	getDatabaseValue("EXOTIC_GOODS_GOLD_MIN",m_iEXOTIC_GOODS_GOLD_MIN);
	getDatabaseValue("EXOTIC_GOODS_GOLD_MAX",m_iEXOTIC_GOODS_GOLD_MAX);
	getDatabaseValue("EXOTIC_GOODS_XP_MIN",m_iEXOTIC_GOODS_XP_MIN);
	getDatabaseValue("EXOTIC_GOODS_XP_MAX",m_iEXOTIC_GOODS_XP_MAX);
	getDatabaseValue("TEMPORARY_CULTURE_BOOST_MOD",m_iTEMPORARY_CULTURE_BOOST_MOD);
	getDatabaseValue("TEMPORARY_TOURISM_BOOST_MOD",m_iTEMPORARY_TOURISM_BOOST_MOD);
	getDatabaseValue("LEAGUE_SESSION_INTERVAL_BASE_TURNS",m_iLEAGUE_SESSION_INTERVAL_BASE_TURNS);
	getDatabaseValue("LEAGUE_SESSION_SOON_WARNING_TURNS",m_iLEAGUE_SESSION_SOON_WARNING_TURNS);
	getDatabaseValue("LEAGUE_MEMBER_PROPOSALS_BASE",m_iLEAGUE_MEMBER_PROPOSALS_BASE);
	getDatabaseValue("LEAGUE_MEMBER_VOTES_BASE",m_iLEAGUE_MEMBER_VOTES_BASE);
	getDatabaseValue("LEAGUE_MEMBER_VOTES_FOR_HOST",m_iLEAGUE_MEMBER_VOTES_FOR_HOST);
	getDatabaseValue("LEAGUE_MEMBER_VOTES_PER_CITY_STATE_ALLY",m_iLEAGUE_MEMBER_VOTES_PER_CITY_STATE_ALLY);
	getDatabaseValue("LEAGUE_PROJECT_REWARD_TIER_1_THRESHOLD",m_fLEAGUE_PROJECT_REWARD_TIER_1_THRESHOLD);
	getDatabaseValue("LEAGUE_PROJECT_REWARD_TIER_2_THRESHOLD",m_fLEAGUE_PROJECT_REWARD_TIER_2_THRESHOLD);
#if defined(MOD_DIPLOMACY_CITYSTATES_RESOLUTIONS)
	if (MOD_DIPLOMACY_CITYSTATES_RESOLUTIONS) {
		getDatabaseValue("LEAGUE_PROPOSERS_PER_SESSION",m_iLEAGUE_PROPOSERS_PER_SESSION);
		getDatabaseValue("LEAGUE_NUM_LEADERS_FOR_EXTRA_VOTES",m_iLEAGUE_NUM_LEADERS_FOR_EXTRA_VOTES);
		getDatabaseValue("LEAGUE_PROJECT_PROGRESS_PERCENT_WARNING",m_iLEAGUE_PROJECT_PROGRESS_PERCENT_WARNING);
	}
#endif

	// -- post defines --

	getDatabaseValue("LAND_TERRAIN",m_iLAND_TERRAIN);
	getDatabaseValue("DEEP_WATER_TERRAIN",m_iDEEP_WATER_TERRAIN);
	getDatabaseValue("SHALLOW_WATER_TERRAIN",m_iSHALLOW_WATER_TERRAIN);
	getDatabaseValue("RUINS_IMPROVEMENT",m_iRUINS_IMPROVEMENT);
	getDatabaseValue("NUKE_FEATURE",m_iNUKE_FEATURE);
	getDatabaseValue("ARTIFACT_RESOURCE",m_iARTIFACT_RESOURCE);
	getDatabaseValue("HIDDEN_ARTIFACT_RESOURCE",m_iHIDDEN_ARTIFACT_RESOURCE);
	getDatabaseValue("CAPITAL_BUILDINGCLASS",m_iCAPITAL_BUILDINGCLASS);
	getDatabaseValue("DEFAULT_SPECIALIST",m_iDEFAULT_SPECIALIST);
	getDatabaseValue("SPACE_RACE_TRIGGER_PROJECT",m_iSPACE_RACE_TRIGGER_PROJECT);
	getDatabaseValue("SPACESHIP_CAPSULE",m_iSPACESHIP_CAPSULE);
	getDatabaseValue("SPACESHIP_BOOSTER",m_iSPACESHIP_BOOSTER);
	getDatabaseValue("SPACESHIP_STASIS",m_iSPACESHIP_STASIS);
	getDatabaseValue("SPACESHIP_ENGINE",m_iSPACESHIP_ENGINE);
	getDatabaseValue("MANHATTAN_PROJECT",m_iMANHATTAN_PROJECT);
	getDatabaseValue("INITIAL_CITY_ROUTE_TYPE",m_iINITIAL_CITY_ROUTE_TYPE);
	getDatabaseValue("STANDARD_HANDICAP",m_iSTANDARD_HANDICAP);
	getDatabaseValue("MULTIPLAYER_HANDICAP",m_iMULTIPLAYER_HANDICAP);
	getDatabaseValue("STANDARD_HANDICAP_QUICK",m_iSTANDARD_HANDICAP_QUICK);
	getDatabaseValue("STANDARD_GAMESPEED",m_iSTANDARD_GAMESPEED);
	getDatabaseValue("STANDARD_TURNTIMER",m_iSTANDARD_TURNTIMER);
	getDatabaseValue("STANDARD_CLIMATE",m_iSTANDARD_CLIMATE);
	getDatabaseValue("STANDARD_WORLD_SIZE",m_iSTANDARD_WORLD_SIZE);
	getDatabaseValue("STANDARD_SEALEVEL",m_iSTANDARD_SEALEVEL);
	getDatabaseValue("STANDARD_ERA",m_iSTANDARD_ERA);
	getDatabaseValue("LAST_EMBARK_ART_ERA",m_iLAST_EMBARK_ART_ERA);
	getDatabaseValue("LAST_UNIT_ART_ERA",m_iLAST_UNIT_ART_ERA);
	getDatabaseValue("LAST_BRIDGE_ART_ERA",m_iLAST_BRIDGE_ART_ERA);
	getDatabaseValue("STANDARD_CALENDAR",m_iSTANDARD_CALENDAR);
	getDatabaseValue("BARBARIAN_HANDICAP",m_iBARBARIAN_HANDICAP);
	getDatabaseValue("BARBARIAN_CIVILIZATION",m_iBARBARIAN_CIVILIZATION);
	getDatabaseValue("BARBARIAN_LEADER",m_iBARBARIAN_LEADER);
	getDatabaseValue("MINOR_CIV_HANDICAP",m_iMINOR_CIV_HANDICAP);
	getDatabaseValue("MINOR_CIVILIZATION",m_iMINOR_CIVILIZATION);
	getDatabaseValue("PROMOTION_EMBARKATION",m_iPROMOTION_EMBARKATION);
	getDatabaseValue("PROMOTION_DEFENSIVE_EMBARKATION",m_iPROMOTION_DEFENSIVE_EMBARKATION);
	getDatabaseValue("PROMOTION_ALLWATER_EMBARKATION",m_iPROMOTION_ALLWATER_EMBARKATION);
	getDatabaseValue("PROMOTION_DEEPWATER_EMBARKATION",m_iPROMOTION_DEEPWATER_EMBARKATION);
	getDatabaseValue("PROMOTION_DEFENSIVE_DEEPWATER_EMBARKATION",m_iPROMOTION_DEFENSIVE_DEEPWATER_EMBARKATION);
#if defined(MOD_PROMOTIONS_FLAGSHIP)
	GD_INT_CACHE(PROMOTION_FLAGSHIP);
#endif
	getDatabaseValue("PROMOTION_OCEAN_IMPASSABLE_UNTIL_ASTRONOMY",m_iPROMOTION_OCEAN_IMPASSABLE_UNTIL_ASTRONOMY);
	getDatabaseValue("PROMOTION_OCEAN_IMPASSABLE",m_iPROMOTION_OCEAN_IMPASSABLE);
	getDatabaseValue("AI_HANDICAP",m_iAI_HANDICAP);
	getDatabaseValue("BARBARIAN_CAMP_IMPROVEMENT",m_iBARBARIAN_CAMP_IMPROVEMENT);
	getDatabaseValue("EMBASSY_IMPROVEMENT",m_iEMBASSY_IMPROVEMENT);
	getDatabaseValue("WALLS_BUILDINGCLASS",m_iWALLS_BUILDINGCLASS);
	getDatabaseValue("PROMOTION_ONLY_DEFENSIVE",m_iPROMOTION_ONLY_DEFENSIVE);
	getDatabaseValue("PROMOTION_UNWELCOME_EVANGELIST",m_iPROMOTION_UNWELCOME_EVANGELIST);
	getDatabaseValue("COMBAT_CAPTURE_HEALTH",m_iCOMBAT_CAPTURE_HEALTH);
	getDatabaseValue("COMBAT_CAPTURE_MIN_CHANCE",m_iCOMBAT_CAPTURE_MIN_CHANCE);
	getDatabaseValue("COMBAT_CAPTURE_MAX_CHANCE",m_iCOMBAT_CAPTURE_MAX_CHANCE);
	getDatabaseValue("COMBAT_CAPTURE_RATIO_MULTIPLIER",m_iCOMBAT_CAPTURE_RATIO_MULTIPLIER);
	getDatabaseValue("RELIGION_MIN_FAITH_FIRST_PANTHEON",m_iRELIGION_MIN_FAITH_FIRST_PANTHEON);
	getDatabaseValue("RELIGION_MIN_FAITH_FIRST_PROPHET",m_iRELIGION_MIN_FAITH_FIRST_PROPHET);
	getDatabaseValue("RELIGION_MIN_FAITH_FIRST_GREAT_PERSON",m_iRELIGION_MIN_FAITH_FIRST_GREAT_PERSON);
	getDatabaseValue("RELIGION_GAME_FAITH_DELTA_NEXT_PANTHEON",m_iRELIGION_GAME_FAITH_DELTA_NEXT_PANTHEON);
	getDatabaseValue("RELIGION_FAITH_DELTA_NEXT_PROPHET",m_iRELIGION_FAITH_DELTA_NEXT_PROPHET);
	getDatabaseValue("RELIGION_FAITH_DELTA_NEXT_GREAT_PERSON",m_iRELIGION_FAITH_DELTA_NEXT_GREAT_PERSON);
	getDatabaseValue("RELIGION_BASE_CHANCE_PROPHET_SPAWN",m_iRELIGION_BASE_CHANCE_PROPHET_SPAWN);
	getDatabaseValue("RELIGION_ATHEISM_PRESSURE_PER_POP",m_iRELIGION_ATHEISM_PRESSURE_PER_POP);
	getDatabaseValue("RELIGION_INITIAL_FOUNDING_CITY_PRESSURE",m_iRELIGION_INITIAL_FOUNDING_CITY_PRESSURE);
	getDatabaseValue("RELIGION_PER_TURN_FOUNDING_CITY_PRESSURE",m_iRELIGION_PER_TURN_FOUNDING_CITY_PRESSURE);
	getDatabaseValue("RELIGION_MISSIONARY_PRESSURE_MULTIPLIER",m_iRELIGION_MISSIONARY_PRESSURE_MULTIPLIER);
	getDatabaseValue("RELIGION_ADJACENT_CITY_DISTANCE",m_iRELIGION_ADJACENT_CITY_DISTANCE);
	getDatabaseValue("RELIGION_DIPLO_HIT_INITIAL_CONVERT_FRIENDLY_CITY",m_iRELIGION_DIPLO_HIT_INITIAL_CONVERT_FRIENDLY_CITY);
	getDatabaseValue("RELIGION_DIPLO_HIT_RELIGIOUS_FLIP_FRIENDLY_CITY",m_iRELIGION_DIPLO_HIT_RELIGIOUS_FLIP_FRIENDLY_CITY);
	getDatabaseValue("RELIGION_DIPLO_HIT_CONVERT_HOLY_CITY",m_iRELIGION_DIPLO_HIT_CONVERT_HOLY_CITY);
	getDatabaseValue("RELIGION_DIPLO_HIT_THRESHOLD",m_iRELIGION_DIPLO_HIT_THRESHOLD);
	getDatabaseValue("ESPIONAGE_GATHERING_INTEL_COST_PERCENT",m_iESPIONAGE_GATHERING_INTEL_COST_PERCENT);
	getDatabaseValue("ESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT",m_iESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT);
	getDatabaseValue("ESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT",m_iESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT);
	getDatabaseValue("ESPIONAGE_TURNS_BETWEEN_CITY_STATE_ELECTIONS",m_iESPIONAGE_TURNS_BETWEEN_CITY_STATE_ELECTIONS);
	getDatabaseValue("ESPIONAGE_INFLUENCE_GAINED_FOR_RIGGED_ELECTION",m_iESPIONAGE_INFLUENCE_GAINED_FOR_RIGGED_ELECTION);
	getDatabaseValue("ESPIONAGE_INFLUENCE_LOST_FOR_RIGGED_ELECTION",m_iESPIONAGE_INFLUENCE_LOST_FOR_RIGGED_ELECTION);
	getDatabaseValue("ESPIONAGE_SURVEILLANCE_SIGHT_RANGE",m_iESPIONAGE_SURVEILLANCE_SIGHT_RANGE);
	getDatabaseValue("ESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP",m_iESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP);
	getDatabaseValue("PROMOTION_GOODY_HUT_PICKER",m_iPROMOTION_GOODY_HUT_PICKER);
	getDatabaseValue("IDEOLOGY_PERCENT_CLEAR_VICTORY_PREF",m_iIDEOLOGY_PERCENT_CLEAR_VICTORY_PREF);
	getDatabaseValue("IDEOLOGY_SCORE_GRAND_STRATS",m_iIDEOLOGY_SCORE_GRAND_STRATS);
	getDatabaseValue("IDEOLOGY_SCORE_HAPPINESS",m_iIDEOLOGY_SCORE_HAPPINESS);
	getDatabaseValue("IDEOLOGY_SCORE_PER_FREE_TENET",m_iIDEOLOGY_SCORE_PER_FREE_TENET);
	getDatabaseValue("IDEOLOGY_SCORE_HOSTILE",m_iIDEOLOGY_SCORE_HOSTILE);
	getDatabaseValue("IDEOLOGY_SCORE_GUARDED",m_iIDEOLOGY_SCORE_GUARDED);
	getDatabaseValue("IDEOLOGY_SCORE_AFRAID",m_iIDEOLOGY_SCORE_AFRAID);
	getDatabaseValue("IDEOLOGY_SCORE_FRIENDLY",m_iIDEOLOGY_SCORE_FRIENDLY);
	
#if defined(MOD_DIPLOMACY_CIV4_FEATURES)
	if (MOD_DIPLOMACY_CIV4_FEATURES) {
		getDatabaseValue("TECH_COST_ERA_EXPONENT",m_fTECH_COST_ERA_EXPONENT);
		getDatabaseValue("HELP_REQUEST_TURN_LIMIT_MIN",m_iHELP_REQUEST_TURN_LIMIT_MIN);
		getDatabaseValue("HELP_REQUEST_TURN_LIMIT_RAND",m_iHELP_REQUEST_TURN_LIMIT_RAND);
		getDatabaseValue("SHARE_OPINION_TURN_BUFFER",m_iSHARE_OPINION_TURN_BUFFER);
		/*
		getDatabaseValue("GLOBAL_STATE_NEARLY_DEFEATED_WEIGHT",m_iGLOBAL_STATE_NEARLY_DEFEATED_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_DEFENSIVE_WEIGHT",m_iGLOBAL_STATE_DEFENSIVE_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_STALEMATE_WEIGHT",m_iGLOBAL_STATE_STALEMATE_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_CALM_WEIGHT",m_iGLOBAL_STATE_CALM_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_OFFENSIVE_WEIGHT",m_iGLOBAL_STATE_OFFENSIVE_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_NEARLY_WON_WEIGHT",m_iGLOBAL_STATE_NEARLY_WON_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_MIL_STRENGTH_IMMENSE_WEIGHT",m_iGLOBAL_STATE_MIL_STRENGTH_IMMENSE_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_MIL_STRENGTH_POWERFUL_WEIGHT",m_iGLOBAL_STATE_MIL_STRENGTH_POWERFUL_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_MIL_STRENGTH_STRONG_WEIGHT",m_iGLOBAL_STATE_MIL_STRENGTH_STRONG_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_MIL_STRENGTH_AVERAGE_WEIGHT",m_iGLOBAL_STATE_MIL_STRENGTH_AVERAGE_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_MIL_STRENGTH_WEAK_WEIGHT",m_iGLOBAL_STATE_MIL_STRENGTH_WEAK_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_MIL_STRENGTH_POOR_WEIGHT",m_iGLOBAL_STATE_MIL_STRENGTH_POOR_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_MIL_STRENGTH_PATHETIC_WEIGHT",m_iGLOBAL_STATE_MIL_STRENGTH_PATHETIC_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_ECON_STRENGTH_IMMENSE_WEIGHT",m_iGLOBAL_STATE_ECON_STRENGTH_IMMENSE_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_ECON_STRENGTH_POWERFUL_WEIGHT",m_iGLOBAL_STATE_ECON_STRENGTH_POWERFUL_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_ECON_STRENGTH_STRONG_WEIGHT",m_iGLOBAL_STATE_ECON_STRENGTH_STRONG_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_ECON_STRENGTH_AVERAGE_WEIGHT",m_iGLOBAL_STATE_ECON_STRENGTH_AVERAGE_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_ECON_STRENGTH_WEAK_WEIGHT",m_iGLOBAL_STATE_ECON_STRENGTH_WEAK_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_ECON_STRENGTH_POOR_WEIGHT",m_iGLOBAL_STATE_ECON_STRENGTH_POOR_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_ECON_STRENGTH_PATHETIC_WEIGHT",m_iGLOBAL_STATE_ECON_STRENGTH_PATHETIC_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_NUM_VASSALS_MULTIPLIER",m_iGLOBAL_STATE_NUM_VASSALS_MULTIPLIER);
		getDatabaseValue("GLOBAL_STATE_TECH_PERCENT_VERY_GOOD_WEIGHT",m_iGLOBAL_STATE_TECH_PERCENT_VERY_GOOD_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_TECH_PERCENT_GOOD_WEIGHT",m_iGLOBAL_STATE_TECH_PERCENT_GOOD_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_TECH_PERCENT_AVERAGE_WEIGHT",m_iGLOBAL_STATE_TECH_PERCENT_AVERAGE_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_TECH_PERCENT_BAD_WEIGHT",m_iGLOBAL_STATE_TECH_PERCENT_BAD_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_TECH_PERCENT_VERY_BAD_WEIGHT",m_iGLOBAL_STATE_TECH_PERCENT_VERY_BAD_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_PER_POLICY_WEIGHT",m_iGLOBAL_STATE_PER_POLICY_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_PER_ALLY_WEIGHT",m_iGLOBAL_STATE_PER_ALLY_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_SCORE_PERCENT_EXTREMELY_GOOD_WEIGHT",m_iGLOBAL_STATE_SCORE_PERCENT_EXTREMELY_GOOD_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_SCORE_PERCENT_VERY_GOOD_WEIGHT",m_iGLOBAL_STATE_SCORE_PERCENT_VERY_GOOD_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_SCORE_PERCENT_GOOD_WEIGHT",m_iGLOBAL_STATE_SCORE_PERCENT_GOOD_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_SCORE_PERCENT_AVERAGE_WEIGHT",m_iGLOBAL_STATE_SCORE_PERCENT_AVERAGE_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_SCORE_PERCENT_BAD_WEIGHT",m_iGLOBAL_STATE_SCORE_PERCENT_BAD_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_SCORE_PERCENT_VERY_BAD_WEIGHT",m_iGLOBAL_STATE_SCORE_PERCENT_VERY_BAD_WEIGHT);
		getDatabaseValue("GLOBAL_STATE_MIN_TURNS_BEFORE_PROCESS_STATE",m_iGLOBAL_STATE_MIN_TURNS_BEFORE_PROCESS_STATE);
		*/

		getDatabaseValue("VASSALAGE_TREATMENT_THRESHOLD_DISAGREE",m_iVASSALAGE_TREATMENT_THRESHOLD_DISAGREE);
		getDatabaseValue("VASSALAGE_TREATMENT_THRESHOLD_MISTREATED",m_iVASSALAGE_TREATMENT_THRESHOLD_MISTREATED);
		getDatabaseValue("VASSALAGE_TREATMENT_THRESHOLD_UNHAPPY",m_iVASSALAGE_TREATMENT_THRESHOLD_UNHAPPY);
		getDatabaseValue("VASSALAGE_TREATMENT_THRESHOLD_ENSLAVED",m_iVASSALAGE_TREATMENT_THRESHOLD_ENSLAVED);

		getDatabaseValue("OPINION_WEIGHT_VASSALAGE_VOLUNTARY_VASSAL_MOD",m_iOPINION_WEIGHT_VASSALAGE_VOLUNTARY_VASSAL_MOD);
		getDatabaseValue("OPINION_WEIGHT_DEMANDED_WHILE_VASSAL",m_iOPINION_WEIGHT_DEMANDED_WHILE_VASSAL);
		getDatabaseValue("OPINION_WEIGHT_VASSAL_TAX_EXPONENT",m_fOPINION_WEIGHT_VASSAL_TAX_EXPONENT);
		getDatabaseValue("OPINION_WEIGHT_VASSAL_TAX_DIVISOR",m_iOPINION_WEIGHT_VASSAL_TAX_DIVISOR);
		getDatabaseValue("OPINION_WEIGHT_VASSAL_CURRENT_TAX_MODIFIER",m_iOPINION_WEIGHT_VASSAL_CURRENT_TAX_MODIFIER);
		getDatabaseValue("OPINION_WEIGHT_MASTER_LIBERATED_ME_FROM_VASSALAGE",m_iOPINION_WEIGHT_MASTER_LIBERATED_ME_FROM_VASSALAGE);
		getDatabaseValue("OPINION_WEIGHT_VASSALAGE_WE_ARE_VOLUNTARY_VASSAL",m_iOPINION_WEIGHT_VASSALAGE_WE_ARE_VOLUNTARY_VASSAL);
		getDatabaseValue("OPINION_WEIGHT_VASSALAGE_WE_ARE_VASSAL",m_iOPINION_WEIGHT_VASSALAGE_WE_ARE_VASSAL);
		getDatabaseValue("OPINION_WEIGHT_VASSALAGE_WE_ARE_MASTER",m_iOPINION_WEIGHT_VASSALAGE_WE_ARE_MASTER);
		getDatabaseValue("OPINION_WEIGHT_VASSALAGE_PROTECT_MAX",m_iOPINION_WEIGHT_VASSALAGE_PROTECT_MAX);
		getDatabaseValue("OPINION_WEIGHT_VASSALAGE_THEY_PEACEFULLY_REVOKED",m_iOPINION_WEIGHT_VASSALAGE_THEY_PEACEFULLY_REVOKED);
		getDatabaseValue("OPINION_WEIGHT_VASSALAGE_THEY_FORCIBLY_REVOKED",m_iOPINION_WEIGHT_VASSALAGE_THEY_FORCIBLY_REVOKED);
		getDatabaseValue("OPINION_WEIGHT_VASSALAGE_FAILED_PROTECT_MAX",m_iOPINION_WEIGHT_VASSALAGE_FAILED_PROTECT_MAX);
		getDatabaseValue("OPINION_WEIGHT_VASSALAGE_PEACEFULLY_REVOKED_NUM_TURNS_UNTIL_FORGOTTEN",m_iOPINION_WEIGHT_VASSALAGE_PEACEFULLY_REVOKED_NUM_TURNS_UNTIL_FORGOTTEN);
		getDatabaseValue("OPINION_WEIGHT_VASSALAGE_FORCIBLY_REVOKED_NUM_TURNS_UNTIL_FORGIVEN",m_iOPINION_WEIGHT_VASSALAGE_FORCIBLY_REVOKED_NUM_TURNS_UNTIL_FORGIVEN);
		getDatabaseValue("OPINION_WEIGHT_VASSALAGE_BROKEN_VASSAL_AGREEMENT_OPINION_WEIGHT",m_iOPINION_WEIGHT_VASSALAGE_BROKEN_VASSAL_AGREEMENT_OPINION_WEIGHT);
		getDatabaseValue("OPINION_WEIGHT_VASSALAGE_TOO_MANY_VASSALS",m_iOPINION_WEIGHT_VASSALAGE_TOO_MANY_VASSALS);

		getDatabaseValue("APPROACH_WAR_VASSAL_FORCEFULLY_REVOKED",m_iAPPROACH_WAR_VASSAL_FORCEFULLY_REVOKED);
		getDatabaseValue("APPROACH_DECEPTIVE_VASSAL_FORCEFULLY_REVOKED",m_iAPPROACH_DECEPTIVE_VASSAL_FORCEFULLY_REVOKED);
		getDatabaseValue("APPROACH_FRIENDLY_VASSAL_FORCEFULLY_REVOKED",m_iAPPROACH_FRIENDLY_VASSAL_FORCEFULLY_REVOKED);
		getDatabaseValue("APPROACH_WAR_VASSAL_PEACEFULLY_REVOKED",m_iAPPROACH_WAR_VASSAL_PEACEFULLY_REVOKED);
		getDatabaseValue("APPROACH_DECEPTIVE_VASSAL_PEACEFULLY_REVOKED",m_iAPPROACH_DECEPTIVE_VASSAL_PEACEFULLY_REVOKED);
		getDatabaseValue("APPROACH_FRIENDLY_VASSAL_PEACEFULLY_REVOKED",m_iAPPROACH_FRIENDLY_VASSAL_PEACEFULLY_REVOKED);
		getDatabaseValue("APPROACH_GUARDED_TOO_MANY_VASSALS",m_iAPPROACH_GUARDED_TOO_MANY_VASSALS);
		getDatabaseValue("APPROACH_WAR_TOO_MANY_VASSALS",m_iAPPROACH_WAR_TOO_MANY_VASSALS);

		getDatabaseValue("VASSALAGE_VASSAL_CITY_POP_EXPONENT",m_fVASSALAGE_VASSAL_CITY_POP_EXPONENT);
		getDatabaseValue("VASSALAGE_VASSAL_UNIT_MAINT_COST_PERCENT",m_iVASSALAGE_VASSAL_UNIT_MAINT_COST_PERCENT);
		getDatabaseValue("VASSAL_SCORE_PERCENT",m_iVASSAL_SCORE_PERCENT);
		getDatabaseValue("VASSAL_HAPPINESS_PERCENT",m_iVASSAL_HAPPINESS_PERCENT);
		getDatabaseValue("VASSALAGE_FREE_YIELD_FROM_VASSAL_PERCENT",m_iVASSALAGE_FREE_YIELD_FROM_VASSAL_PERCENT);
		getDatabaseValue("VASSALAGE_PROTECT_VALUE_PER_OPINION_WEIGHT",m_iVASSALAGE_PROTECT_VALUE_PER_OPINION_WEIGHT);
		getDatabaseValue("VASSALAGE_FAILED_PROTECT_VALUE_PER_OPINION_WEIGHT",m_iVASSALAGE_FAILED_PROTECT_VALUE_PER_OPINION_WEIGHT);
		getDatabaseValue("VASSALAGE_PROTECTED_CITY_DISTANCE",m_iVASSALAGE_PROTECTED_CITY_DISTANCE);
		getDatabaseValue("VASSALAGE_FAILED_PROTECT_CITY_DISTANCE",m_iVASSALAGE_FAILED_PROTECT_CITY_DISTANCE);
		getDatabaseValue("VASSALAGE_FAILED_PROTECT_PER_TURN_DECAY",m_iVASSALAGE_FAILED_PROTECT_PER_TURN_DECAY);
		getDatabaseValue("VASSALAGE_PROTECTED_PER_TURN_DECAY",m_iVASSALAGE_PROTECTED_PER_TURN_DECAY);
		getDatabaseValue("VASSALAGE_VASSAL_LOST_CITIES_THRESHOLD",m_iVASSALAGE_VASSAL_LOST_CITIES_THRESHOLD);
		getDatabaseValue("VASSALAGE_VASSAL_POPULATION_THRESHOLD",m_iVASSALAGE_VASSAL_POPULATION_THRESHOLD);
		getDatabaseValue("VASSALAGE_VASSAL_MASTER_CITY_PERCENT_THRESHOLD",m_iVASSALAGE_VASSAL_MASTER_CITY_PERCENT_THRESHOLD);
		getDatabaseValue("VASSALAGE_VASSAL_MASTER_POP_PERCENT_THRESHOLD",m_iVASSALAGE_VASSAL_MASTER_POP_PERCENT_THRESHOLD);
		getDatabaseValue("VASSALAGE_CAPITULATE_BASE_THRESHOLD",m_iVASSALAGE_CAPITULATE_BASE_THRESHOLD);
		getDatabaseValue("VASSAL_TOURISM_MODIFIER",m_iVASSAL_TOURISM_MODIFIER);

		getDatabaseValue("VASSALAGE_VASSAL_TAX_PERCENT_MINIMUM",m_iVASSALAGE_VASSAL_TAX_PERCENT_MINIMUM);
		getDatabaseValue("VASSALAGE_VASSAL_TAX_PERCENT_MAXIMUM",m_iVASSALAGE_VASSAL_TAX_PERCENT_MAXIMUM);

		getDatabaseValue("MAX_PLOTS_PER_EXPLORER",m_iMAX_PLOTS_PER_EXPLORER);
	}
#endif

	getDatabaseValue("POLICY_BRANCH_FREEDOM",m_iPOLICY_BRANCH_FREEDOM);
	getDatabaseValue("POLICY_BRANCH_AUTOCRACY",m_iPOLICY_BRANCH_AUTOCRACY);
	getDatabaseValue("POLICY_BRANCH_ORDER",m_iPOLICY_BRANCH_ORDER);
#if defined(MOD_ISKA_HERITAGE)
	getDatabaseValue("POLICY_BRANCH_HERITAGE",m_iPOLICY_BRANCH_HERITAGE);
#endif

#if defined(MOD_PROMOTIONS_AURA_CHANGE)
	if (MOD_PROMOTIONS_AURA_CHANGE) {
		GD_INT_CACHE(GREAT_GENERAL_MAX_RANGE);
	}
#endif
}

bool CvGlobals::getDatabaseValue(const char* szName, int& iValue, bool bReportErrors)
{
	bool bSuccess = false;
	if(m_kGlobalDefinesLookup.Bind(1, szName))
	{
		if(m_kGlobalDefinesLookup.Step())
		{
			iValue = m_kGlobalDefinesLookup.GetInt(0);
			bSuccess = true;
		}
	}

	m_kGlobalDefinesLookup.Reset();

	if(bReportErrors)
	{
		CvAssertFmt(bSuccess, "Integer Define Value not found for %s", szName);
	}

	return bSuccess;
}

bool CvGlobals::getDatabaseValue(const char* szName, float& fValue, bool bReportErrors)
{
	bool bSuccess = false;
	if(m_kGlobalDefinesLookup.Bind(1, szName))
	{
		if(m_kGlobalDefinesLookup.Step())
		{
			fValue = m_kGlobalDefinesLookup.GetFloat(0);
			bSuccess = true;
		}
	}

	m_kGlobalDefinesLookup.Reset();

	if(bReportErrors)
	{
		CvAssertFmt(bSuccess, "Float Define Value not found for %s", szName);
	}

	return bSuccess;
}

bool CvGlobals::getDatabaseValue(const char* szName, CvString& strValue, bool bReportErrors)
{
	bool bSuccess = false;
	if(m_kGlobalDefinesLookup.Bind(1, szName))
	{
		if(m_kGlobalDefinesLookup.Step())
		{
			strValue = m_kGlobalDefinesLookup.GetText(0);
			bSuccess = true;
		}
	}

	m_kGlobalDefinesLookup.Reset();

	if(bReportErrors)
	{
		CvAssertFmt(bSuccess, "String Define Value not found for %s", szName);
	}

	return bSuccess;
}

int CvGlobals::getNUM_YIELD_TYPES() const
{
	return NUM_YIELD_TYPES;
}

int CvGlobals::getNUM_CONTROL_TYPES() const
{
	return NUM_CONTROL_TYPES;
}

void CvGlobals::deleteInfoArrays()
{
	deleteInfoArray(m_paBuildingClassInfo);

	deleteInfoArray(m_paLeaderHeadInfo);
	deleteInfoArray(m_paCivilizationInfo);
	deleteInfoArray(m_paMinorCivInfo);

	deleteInfoArray(m_paVoteSourceInfo);
#if defined(MOD_BALANCE_CORE_EVENTS)
	deleteInfoArray(m_paEventInfo);
	deleteInfoArray(m_paEventChoiceInfo);
	deleteInfoArray(m_paCityEventInfo);
	deleteInfoArray(m_paCityEventChoiceInfo);

	deleteInfoArray(m_paEventLinkingInfo);
	deleteInfoArray(m_paEventChoiceLinkingInfo);
	deleteInfoArray(m_paCityEventLinkingInfo);
	deleteInfoArray(m_paCityEventChoiceLinkingInfo);

	deleteInfoArray(m_paContractInfo);
#endif
	deleteInfoArray(m_paHandicapInfo);
	deleteInfoArray(m_paGameSpeedInfo);
#if defined(MOD_EVENTS_DIPLO_MODIFIERS)
	deleteInfoArray(m_paDiploModifierInfo);
#endif
	deleteInfoArray(m_paTurnTimerInfo);
	deleteInfoArray(m_paVictoryInfo);
	deleteInfoArray(m_paSmallAwardInfo);
	deleteInfoArray(m_paHurryInfo);
	deleteInfoArray(m_paProcessInfo);
	deleteInfoArray(m_paVoteInfo);

	deleteInfoArray(m_paColorInfo);
	deleteInfoArray(m_paPlayerColorInfo);
	deleteInfoArray(m_paInterfaceModeInfo);

	deleteInfoArray(m_paRouteInfo);

	deleteInfoArray(m_aEraInfo);

	deleteInfoArray(m_paBuildInfo);
	deleteInfoArray(m_paUnitClassInfo);
	deleteInfoArray(m_paSpecialUnitInfo);
	deleteInfoArray(m_paSpecialistInfo);
	deleteInfoArray(m_paActionInfo);
	deleteInfoArray(m_paMissionInfo);
	deleteInfoArray(m_paControlInfo);
	deleteInfoArray(m_paCommandInfo);
	deleteInfoArray(m_paAutomateInfo);

	deleteInfoArray(m_paUnitCombatClassInfo);
	deleteInfoArray(m_paUnitAIInfos);
	deleteInfoArray(m_paGameOptionInfos);
	deleteInfoArray(m_paMPOptionInfos);
	deleteInfoArray(m_paPlayerOptionInfos);

	deleteInfoArray(m_paYieldInfo);
#if defined(MOD_API_PLOT_YIELDS)
	deleteInfoArray(m_paPlotInfo);
#endif
	deleteInfoArray(m_paTerrainInfo);
	deleteInfoArray(m_paFeatureInfo);
	deleteInfoArray(m_paResourceClassInfo);
	deleteInfoArray(m_paResourceInfo);
	deleteInfoArray(m_paUnitDomainInfo);

	SAFE_DELETE_ARRAY(GC.getFootstepAudioTags());

	deleteInfoArray(m_paEntityEventInfo);
}

//
// Global Infos Hash Map
//
const CvGlobals::InfosMap& CvGlobals::GetInfoTypes() const
{
	return m_infosMap;
}
//------------------------------------------------------------------------------
int CvGlobals::getInfoTypeForString(const char* szType, bool hideAssert) const
{
	if(!hideAssert)
	{
		CvAssertMsg(szType, "null info type string");
	}

	if(szType == NULL)
		return -1;


	InfosMap::const_iterator it = m_infosMap.find(szType);
	if(it!=m_infosMap.end())
	{
		return it->second;
	}

	if(!hideAssert)
	{
		//
		// *** EFB: Need to restore this logging??? ***
		//
		CvString strError;
		strError.Format("Info type %s not found.", szType);
		CvAssertMsg(strcmp(szType, "NONE")==0 || strcmp(szType, "")==0, strError.c_str());
//		gDLL->logMsg("xml.log", szError);
	}

	return -1;
}

void CvGlobals::setInfoTypeFromString(const char* szType, int idx)
{
	CvAssertMsg(szType, "null info type string");
	uint uiHash = FString::Hash(szType);
#ifdef _DEBUG
	InfosMap::const_iterator it = m_infosMap.find(szType);
	int iExisting = (it!=m_infosMap.end()) ? it->second : -1;
	CvAssertMsg(iExisting==-1 || iExisting==idx || strcmp(szType ? szType : "", "ERROR")==0, CvString::format("xml info type entry %s already exists", szType).c_str());

	InfosHashMap::const_iterator ith = m_infosHashMap.find(uiHash);
	iExisting = (ith!=m_infosHashMap.end()) ? ith->second : -1;
	CvAssertMsg(iExisting==-1 || iExisting==idx || strcmp(szType ? szType : "", "ERROR")==0, CvString::format("xml info type entry %s already exists", szType).c_str());
#endif
	m_infosMap[szType] = idx;
	m_infosHashMap[uiHash] = idx;
}

void CvGlobals::infoTypeFromStringReset()
{
	m_infosMap.clear();
	m_infosHashMap.clear();
}

//------------------------------------------------------------------------------
int CvGlobals::getInfoTypeForHash(uint uiHash, bool hideAssert) const
{

	InfosHashMap::const_iterator it = m_infosHashMap.find(uiHash);
	if(it!=m_infosHashMap.end())
	{
		return it->second;
	}

	if(!hideAssert)
	{
		CvAssertMsg(uiHash==0, "Could not find resource hash");
	}

	return -1;
}

int CvGlobals::getNumDirections() const
{
	return NUM_DIRECTION_TYPES;
}
int CvGlobals::getNumGameOptions() const
{
	return NUM_GAMEOPTION_TYPES;
}
int CvGlobals::getNumMPOptions() const
{
	return NUM_MPOPTION_TYPES;
}
int CvGlobals::getNumSpecialOptions() const
{
	return NUM_SPECIALOPTION_TYPES;
}
int CvGlobals::getNumCommandInfos() const
{
	return NUM_COMMAND_TYPES;
}
int CvGlobals::getNumControlInfos() const
{
	return NUM_CONTROL_TYPES;
}
int CvGlobals::getNumPlayerOptionInfos() const
{
	return m_paPlayerOptionInfos.size();
}


//------------------------------------------------------------------------------
void CvGlobals::SetGameDatabase(Database::Connection* pGameDatabase)
{
	if(m_pGameDatabase != pGameDatabase)
	{
		if(m_pGameDatabase)
			m_kGlobalDefinesLookup.Release();

		m_pGameDatabase = pGameDatabase;
	}
}
//------------------------------------------------------------------------------

bool CvGlobals::IsGraphicsInitialized() const
{
	return m_bGraphicsInitialized;
}
void CvGlobals::SetGraphicsInitialized(bool bVal)
{
	m_bGraphicsInitialized = bVal;
}

void CvGlobals::setOutOfSyncDebuggingEnabled(bool isEnabled)
{
	m_bOutOfSyncDebuggingEnabled = isEnabled;
	FAutoArchive::EnableCallStacks(isEnabled);
}

bool CvGlobals::getOutOfSyncDebuggingEnabled() const
{
	return m_bOutOfSyncDebuggingEnabled;
}
