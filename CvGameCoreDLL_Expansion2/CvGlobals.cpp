/*	-------------------------------------------------------------------------------------------------------
	© 1991-2012 Take-Two Interactive Software and its subsidiaries.  Developed by Firaxis Games.  
	Sid Meier's Civilization V, Civ, Civilization, 2K Games, Firaxis Games, Take-Two Interactive Software 
	and their respective logos are all trademarks of Take-Two interactive Software, Inc.  
	All other marks and trademarks are the property of their respective owners.  
	All rights reserved. 
	------------------------------------------------------------------------------------------------------- */

// Author -	Mustafa Thamer
//			Jon Shafer - 03/2005

#include "CvGameCoreDLLPCH.h"
#include "CvGlobals.h"
#include "CvRandom.h"
#include "ICvDLLUserInterface.h"
#include "CvMap.h"
#include "CvPlayerAI.h"
#include "CvTeam.h"
#include "CvInfos.h"
#include "ICvDLLUtility.h"
#include "CvPlayerAI.h"
#include "CvGameTextMgr.h"
#include "CvDiplomacyAI.h"
#include "CvEconomicAI.h"
#include "CvMilitaryAI.h"
#include "CvCitySpecializationAI.h"
#include "CvGrandStrategyAI.h"
#include "CvMinorCivAI.h"
#include "CvImprovementClasses.h"
#include "CvAStar.h"
#include "cvStopWatch.h"
#include "CvReplayInfo.h"
#include "CvTypes.h"

#include "CvDllDatabaseUtility.h"
#include "CvDllScriptSystemUtility.h"

#include "CvDllCity.h"
#include "CvDllDeal.h"
#include "CvDllContext.h"
#include "CvDllPlayer.h"
#include "CvDllPlot.h"
#include "CvDllRandom.h"
#include "CvDllUnit.h"

#if defined(MOD_DEBUG_MINIDUMP)
#ifdef WIN32
#include "../commit_id.inc"
#include <dbghelp.h>
#endif // WIN32
#endif // defined(MOD_DEBUG_MINIDUMP)

// must be included after all other headers
#include "LintFree.h"

template <class T>
void deleteInfoArray(std::vector<T*>& array)
{
	for(typename std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)
	{
		SAFE_DELETE(*it);
	}

	array.clear();
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

CvGlobals gGlobals;

//
// CONSTRUCTOR
//
CvGlobals::CvGlobals() :
	m_bGraphicsInitialized(false),
	m_bTutorialDisabled(false),
	m_bLogging(false),
	m_iRandLogging(0),
	m_bOverwriteLogs(false),
	m_bOutOfSyncDebuggingEnabled(false),
	m_bSynchLogging(false),
	m_bAILogging(false),
	m_bAIPerfLogging(false),
	m_bBuilderAILogging(false),
	m_bPlayerAndCityAILogSplit(false),
	m_bTutorialLogging(false),
	m_bTutorialDebugging(false),
	m_bDLLProfiler(false),
	m_iNewPlayers(0),
	m_bZoomOut(false),
	m_bZoomIn(false),
	m_bLoadGameFromFile(false),
	m_bAllowRClickMovementWhileCameraScrolling(false),
	m_bPostTurnAutosaves(false),
	m_asyncRand(NULL),
	m_game(NULL),
	m_map(NULL),
	m_pathFinder(NULL),
	m_interfacePathFinder(NULL),
	m_stepFinder(NULL),
	m_pDLL(NULL),
	m_pEngineUI(NULL),

	////////////// BEGIN DEFINES //////////////////

	// -- ints -- //
	GD_INT_INIT(AI_ATTEMPT_RUSH_OVER_X_TURNS_TO_BUILD, 15),
	GD_INT_INIT(INITIAL_AI_CITY_PRODUCTION, 0),
	GD_INT_INIT(POLICY_WEIGHT_PROPAGATION_PERCENT, 25),
	GD_INT_INIT(POLICY_WEIGHT_PROPAGATION_LEVELS, 2),
	GD_INT_INIT(POLICY_WEIGHT_PERCENT_DROP_NEW_BRANCH, 90),
	GD_INT_INIT(TECH_WEIGHT_PROPAGATION_PERCENT, 50),
	GD_INT_INIT(TECH_WEIGHT_PROPAGATION_LEVELS, 3),
	GD_INT_INIT(TECH_PRIORITY_UNIQUE_ITEM, 25),
	GD_INT_INIT(TECH_PRIORITY_MAYA_CALENDAR_BONUS, 50),
	GD_INT_INIT(DEFAULT_FLAVOR_VALUE, 5),
	GD_INT_INIT(PERSONALITY_FLAVOR_MAX_VALUE, 20),
	GD_INT_INIT(PERSONALITY_FLAVOR_MIN_VALUE, 1),
	GD_INT_INIT(FLAVOR_MIN_VALUE, -1000),
	GD_INT_INIT(FLAVOR_MAX_VALUE, 1000),
	GD_INT_INIT(FLAVOR_RANDOMIZATION_RANGE, 2),
	GD_INT_INIT(FLAVOR_EXPANDGROW_COEFFICIENT, 8),
	GD_INT_INIT(AI_GRAND_STRATEGY_NUM_TURNS_STRATEGY_MUST_BE_ACTIVE, 10),
	GD_INT_INIT(AI_GRAND_STRATEGY_CURRENT_STRATEGY_WEIGHT, 50),
	GD_INT_INIT(AI_GRAND_STRATEGY_GUESS_NO_CLUE_WEIGHT, 40),
	GD_INT_INIT(AI_GRAND_STRATEGY_GUESS_POSITIVE_THRESHOLD, 150),
	GD_INT_INIT(AI_GRAND_STRATEGY_GUESS_LIKELY_THRESHOLD, 80),
	GD_INT_INIT(AI_GRAND_STRATEGY_OTHER_PLAYERS_GS_MULTIPLIER, 33),
	GD_INT_INIT(AI_GS_CONQUEST_NOBODY_MET_FIRST_TURN, 20),
	GD_INT_INIT(AI_GRAND_STRATEGY_CONQUEST_NOBODY_MET_WEIGHT, -100),
	GD_INT_INIT(AI_GRAND_STRATEGY_CONQUEST_AT_WAR_WEIGHT, 10),
	GD_INT_INIT(AI_GS_CONQUEST_MILITARY_STRENGTH_FIRST_TURN, 60),
	GD_INT_INIT(AI_GRAND_STRATEGY_CONQUEST_POWER_RATIO_MULTIPLIER, 100),
	GD_INT_INIT(AI_GRAND_STRATEGY_CONQUEST_CRAMPED_WEIGHT, 20),
	GD_INT_INIT(AI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MINOR_ATTACKED, 5),
	GD_INT_INIT(AI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MINOR_CONQUERED, 10),
	GD_INT_INIT(AI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MAJOR_ATTACKED, 10),
	GD_INT_INIT(AI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MAJOR_CONQUERED, 15),
	GD_INT_INIT(AI_GS_CULTURE_RATIO_MULTIPLIER, 60),
	GD_INT_INIT(AI_GS_TOURISM_RATIO_MULTIPLIER, 80),
	GD_INT_INIT(AI_GS_CULTURE_AHEAD_WEIGHT, 50),
	GD_INT_INIT(AI_GS_CULTURE_TOURISM_AHEAD_WEIGHT, 100),
	GD_INT_INIT(AI_GS_CULTURE_INFLUENTIAL_CIV_MOD, 50),
	GD_INT_INIT(AI_GS_UN_SECURED_VOTE_MOD, 300),
	GD_INT_INIT(AI_GS_SS_HAS_APOLLO_PROGRAM, 150),
	GD_INT_INIT(AI_GS_SS_TECH_PROGRESS_MOD, 600),
	GD_INT_INIT(EVENT_MIN_DURATION_BETWEEN, 10),
	GD_INT_INIT(CITY_EVENT_MIN_DURATION_BETWEEN, 25),
	GD_INT_INIT(EVENT_PROBABILITY_EACH_TURN, 100),
	GD_INT_INIT(CITY_EVENT_PROBABILITY_EACH_TURN, 100),
	GD_INT_INIT(GLOBAL_RESOURCE_MONOPOLY_THRESHOLD, 50),
	GD_INT_INIT(STRATEGIC_RESOURCE_MONOPOLY_THRESHOLD, 25),
	GD_INT_INIT(MAX_PLOTS_PER_EXPLORER, 20),
	GD_INT_INIT(AI_STRATEGY_ISLAND_START_COAST_REVEAL_PERCENT, 80),
	GD_INT_INIT(AI_PLOT_VALUE_STRATEGIC_RESOURCE, 80),
	GD_INT_INIT(AI_PLOT_VALUE_LUXURY_RESOURCE, 40),
	GD_INT_INIT(AI_PLOT_VALUE_SPECIALIZATION_MULTIPLIER, 20),
	GD_INT_INIT(AI_PLOT_VALUE_YIELD_MULTIPLIER, 10),
	GD_INT_INIT(AI_PLOT_VALUE_DEFICIENT_YIELD_MULTIPLIER, 5),
	GD_INT_INIT(AI_PLOT_VALUE_FIERCE_DISPUTE, 6),
	GD_INT_INIT(AI_PLOT_VALUE_STRONG_DISPUTE, 4),
	GD_INT_INIT(AI_PLOT_VALUE_WEAK_DISPUTE, 2),
	GD_INT_INIT(AI_GOLD_PRIORITY_MINIMUM_PLOT_BUY_VALUE, 150),
	GD_INT_INIT(AI_GOLD_BALANCE_TO_HALVE_PLOT_BUY_MINIMUM, 1000),
	GD_INT_INIT(AI_GOLD_PRIORITY_UPGRADE_BASE, 500),
	GD_INT_INIT(AI_GOLD_PRIORITY_UPGRADE_PER_FLAVOR_POINT, 100),
	GD_INT_INIT(AI_GOLD_PRIORITY_DIPLOMACY_BASE, 150),
	GD_INT_INIT(AI_GOLD_PRIORITY_DIPLOMACY_PER_FLAVOR_POINT, 25),
	GD_INT_INIT(AI_GOLD_PRIORITY_UNIT, 500),
	GD_INT_INIT(AI_GOLD_PRIORITY_DEFENSIVE_BUILDING, 250),
	GD_INT_INIT(AI_GOLD_PRIORITY_BUYOUT_CITY_STATE, 350),
	GD_INT_INIT(BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_FOOD, 3),
	GD_INT_INIT(BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_PRODUCTION, 2),
	GD_INT_INIT(BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_GOLD, 2),
	GD_INT_INIT(BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_SCIENCE, 2),
	GD_INT_INIT(BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_CULTURE, 3),
	GD_INT_INIT(BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_LUXURY_RESOURCE, 750),
	GD_INT_INIT(BUILDER_TASKING_BASELINE_BUILD_IMPROVEMENTS, 100),
	GD_INT_INIT(BUILDER_TASKING_BASELINE_BUILD_RESOURCE_IMPROVEMENTS, 300),
	GD_INT_INIT(BUILDER_TASKING_BASELINE_BUILD_ROUTES, 750),
	GD_INT_INIT(BUILDER_TASKING_BASELINE_REPAIR, 1000),
	GD_INT_INIT(BUILDER_TASKING_BASELINE_SCRUB_FALLOUT, 20000),
	GD_INT_INIT(BUILDER_TASKING_BASELINE_ADDS_FOOD, 180),
	GD_INT_INIT(BUILDER_TASKING_BASELINE_ADDS_GOLD, 90),
	GD_INT_INIT(BUILDER_TASKING_BASELINE_ADDS_FAITH, 240),
	GD_INT_INIT(BUILDER_TASKING_BASELINE_ADDS_PRODUCTION, 180),
	GD_INT_INIT(BUILDER_TASKING_BASELINE_ADDS_SCIENCE, 240),
	GD_INT_INIT(BUILDER_TASKING_BASELINE_ADDS_TOURISM, 240),
	GD_INT_INIT(BUILDER_TASKING_BASELINE_ADDS_CULTURE_LOCAL, 80),
	GD_INT_INIT(BUILDER_TASKING_BASELINE_ADDS_GOLDEN_AGE_POINTS, 200),
	GD_INT_INIT(BUILDER_TASKING_BASELINE_ADDS_CULTURE, 240),
	GD_INT_INIT(AI_STRATEGY_DEFEND_MY_LANDS_BASE_UNITS, 3),
	GD_INT_INIT(AI_MILITARY_CITY_THREAT_WEIGHT_CAPITAL, 125),
	GD_INT_INIT(AI_MILITARY_RECAPTURING_OWN_CITY, 150),
	GD_INT_INIT(AI_MILITARY_CAPTURING_ORIGINAL_CAPITAL, 250),
	GD_INT_INIT(AI_CITY_SPECIALIZATION_EARLIEST_TURN, 25),
	GD_INT_INIT(AI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL, 35),
	GD_INT_INIT(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED, 20),
	GD_INT_INIT(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH, 150),
	GD_INT_INIT(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION, 250),
	GD_INT_INIT(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE, 250),
	GD_INT_INIT(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL, 1250),
	GD_INT_INIT(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT, 50),
	GD_INT_INIT(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS, 50),
	GD_INT_INIT(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL, 250),
	GD_INT_INIT(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER, 250),
	GD_INT_INIT(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP, 10),
	GD_INT_INIT(AI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE, 10),
	GD_INT_INIT(AI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY, 10),
	GD_INT_INIT(AI_CITYSTRATEGY_SMALL_CITY_POP_THRESHOLD, 2),
	GD_INT_INIT(AI_CITYSTRATEGY_MEDIUM_CITY_POP_THRESHOLD, 7),
	GD_INT_INIT(AI_CITYSTRATEGY_LARGE_CITY_POP_THRESHOLD, 15),
	GD_INT_INIT(AI_CITYSTRATEGY_NEED_TILE_IMPROVERS_DESPERATE_TURN, 30),
	GD_INT_INIT(AI_CITYSTRATEGY_WANT_TILE_IMPROVERS_MINIMUM_SIZE, 3),
	GD_INT_INIT(AI_CITYSTRATEGY_OPERATION_UNIT_BASE_WEIGHT, 5000),
	GD_INT_INIT(AI_CITYSTRATEGY_OPERATION_UNIT_FLAVOR_MULTIPLIER, 250),
	GD_INT_INIT(AI_CITYSTRATEGY_ARMY_UNIT_BASE_WEIGHT, 750),
	GD_INT_INIT(AI_MOSTLY_HAPPY_THRESHOLD, 40),
	GD_INT_INIT(AI_CITY_VALUE_MULTIPLIER, 100),
	GD_INT_INIT(AI_CAPITAL_VALUE_MULTIPLIER, 150),
	GD_INT_INIT(AI_CITY_HIGH_VALUE_THRESHOLD, 80),
	GD_INT_INIT(AI_CITY_SOME_VALUE_THRESHOLD, 40),
	GD_INT_INIT(AI_CITY_PUPPET_BONUS_THRESHOLD, 25),
	GD_INT_INIT(AI_CITIZEN_VALUE_FOOD, 8),
	GD_INT_INIT(AI_CITIZEN_VALUE_FOOD_NEED_GROWTH, 32),
	GD_INT_INIT(AI_CITIZEN_VALUE_FOOD_STARVING, 500),
	GD_INT_INIT(AI_CITIZEN_VALUE_PRODUCTION, 12),
	GD_INT_INIT(AI_CITIZEN_VALUE_GOLD, 12),
	GD_INT_INIT(AI_CITIZEN_VALUE_SCIENCE, 20),
	GD_INT_INIT(AI_CITIZEN_VALUE_CULTURE, 20),
	GD_INT_INIT(AI_CITIZEN_VALUE_FAITH, 20),
	GD_INT_INIT(AI_CITIZEN_VALUE_GPP, 8),
	GD_INT_INIT(AI_CITIZEN_VALUE_GOLD_IN_DEBT, 24),
	GD_INT_INIT(AI_CITIZEN_SPECIALIST_COMBO_BONUS, 1000),
	GD_INT_INIT(AI_CITIZEN_UNHAPPINESS_VALUE_EMPIRE_VERY_UNHAPPY, -50000),
	GD_INT_INIT(AI_CITIZEN_UNHAPPINESS_VALUE_EMPIRE_UNHAPPY, -15000),
	GD_INT_INIT(AI_CITIZEN_UNHAPPINESS_VALUE_CITY_UNHAPPY, -5000),
	GD_INT_INIT(AI_CITIZEN_UNHAPPINESS_VALUE_EMPIRE_HAPPY, -2000),
	GD_INT_INIT(AI_NUM_CORE_CITIES_FOR_SPACESHIP, 4),
	GD_INT_INIT(AI_OPERATIONAL_PERCENT_HEALTH_FOR_OPERATION, 70),
	GD_INT_INIT(AI_TACTICAL_MAP_DOMINANCE_PERCENTAGE, 40),
	GD_INT_INIT(AI_TACTICAL_MAP_TEMP_ZONE_TURNS, 5),
	GD_INT_INIT(AI_TACTICAL_RECRUIT_RANGE, 8),
	GD_INT_INIT(AI_TACTICAL_BARBARIAN_RELEASE_VARIATION, 15),
	GD_INT_INIT(AI_HOMELAND_MAX_DEFENSIVE_MOVE_TURNS, 4),
	GD_INT_INIT(AI_HOMELAND_GREAT_PERSON_TURNS_TO_WAIT, 5),
	GD_INT_INIT(AI_DIPLO_PLOT_RANGE_FROM_CITY_HOME_FRONT, 5),
	GD_INT_INIT(AI_CONFIG_MILITARY_MELEE_PER_AA, 2),
	GD_INT_INIT(AI_CONFIG_MILITARY_TILES_PER_SHIP, 6),
	GD_INT_INIT(MINOR_BULLY_GOLD, 50),
	GD_INT_INIT(MINOR_BULLY_GOLD_GROWTH_FACTOR, 400),
	GD_INT_INIT(MINOR_CIV_GOLD_TRIBUTE_THRESHOLD, 0),
	GD_INT_INIT(MINOR_CIV_HEAVY_TRIBUTE_THRESHOLD, 0),
	GD_INT_INIT(MINOR_FRIENDSHIP_RATE_MOD_SHARED_RELIGION, 50),
	GD_INT_INIT(MINOR_FRIENDSHIP_DROP_PER_TURN, -100),
	GD_INT_INIT(MINOR_FRIENDSHIP_DROP_PER_TURN_HOSTILE, -150),
	GD_INT_INIT(MINOR_FRIENDSHIP_DROP_PER_TURN_AGGRESSOR, -200),
	GD_INT_INIT(MINOR_FRIENDSHIP_DROP_DISHONOR_PLEDGE_TO_PROTECT, -2000),
	GD_INT_INIT(MINOR_FRIENDSHIP_DROP_BULLY_GOLD_SUCCESS, -1500),
	GD_INT_INIT(MINOR_FRIENDSHIP_DROP_BULLY_WORKER_SUCCESS, -5000),
	GD_INT_INIT(MINOR_FRIENDSHIP_NEGATIVE_INCREASE_PER_TURN, 100),
	GD_INT_INIT(MINOR_FRIENDSHIP_AT_WAR, -60),
	GD_INT_INIT(MINOR_CIV_AGGRESSOR_THRESHOLD, 2),
	GD_INT_INIT(MINOR_CIV_WARMONGER_THRESHOLD, 4),
	GD_INT_INIT(PERMANENT_WAR_AGGRESSOR_CHANCE, 40),
	GD_INT_INIT(PERMANENT_WAR_OTHER_WARMONGER_CHANCE_DISTANT, 20),
	GD_INT_INIT(PERMANENT_WAR_OTHER_WARMONGER_CHANCE_FAR, 30),
	GD_INT_INIT(PERMANENT_WAR_OTHER_WARMONGER_CHANCE_CLOSE, 50),
	GD_INT_INIT(PERMANENT_WAR_OTHER_WARMONGER_CHANCE_NEIGHBORS, 60),
	GD_INT_INIT(PERMANENT_WAR_OTHER_CHANCE_DISTANT, 10),
	GD_INT_INIT(PERMANENT_WAR_OTHER_CHANCE_FAR, 15),
	GD_INT_INIT(PERMANENT_WAR_OTHER_CHANCE_CLOSE, 20),
	GD_INT_INIT(PERMANENT_WAR_OTHER_CHANCE_NEIGHBORS, 25),
	GD_INT_INIT(PERMANENT_WAR_OTHER_AT_WAR, 20),
	GD_INT_INIT(FRIENDSHIP_NEUTRAL_ON_DEATH, 0),
	GD_INT_INIT(FRIENDSHIP_FRIENDS_ON_DEATH, 15),
	GD_INT_INIT(FRIENDSHIP_ALLIES_ON_DEATH, 45),
	GD_INT_INIT(FRIENDSHIP_THRESHOLD_NEUTRAL, 0),
	GD_INT_INIT(FRIENDSHIP_THRESHOLD_FRIENDS, 30),
	GD_INT_INIT(FRIENDSHIP_THRESHOLD_ALLIES, 60),
	GD_INT_INIT(FRIENDSHIP_THRESHOLD_CAN_BULLY, -30),
	GD_INT_INIT(FRIENDSHIP_THRESHOLD_CAN_PLEDGE_TO_PROTECT, 0),
	GD_INT_INIT(FRIENDSHIP_THRESHOLD_MOD_MEDIEVAL, 6),
	GD_INT_INIT(FRIENDSHIP_THRESHOLD_MOD_INDUSTRIAL, 10),
	GD_INT_INIT(MINOR_FRIENDSHIP_CLOSE_AMOUNT, 8),
	GD_INT_INIT(MINOR_CIV_SCIENCE_BONUS_MULTIPLIER, 25),
	GD_INT_INIT(FRIENDS_CULTURE_BONUS_AMOUNT_ANCIENT, 3),
	GD_INT_INIT(FRIENDS_CULTURE_BONUS_AMOUNT_MEDIEVAL, 6),
	GD_INT_INIT(FRIENDS_CULTURE_BONUS_AMOUNT_INDUSTRIAL, 13),
	GD_INT_INIT(ALLIES_CULTURE_BONUS_AMOUNT_ANCIENT, 3),
	GD_INT_INIT(ALLIES_CULTURE_BONUS_AMOUNT_MEDIEVAL, 6),
	GD_INT_INIT(ALLIES_CULTURE_BONUS_AMOUNT_INDUSTRIAL, 13),
	GD_INT_INIT(FRIENDS_CAPITAL_FOOD_BONUS_AMOUNT_PRE_RENAISSANCE, 200),
	GD_INT_INIT(FRIENDS_CAPITAL_FOOD_BONUS_AMOUNT_POST_RENAISSANCE, 200),
	GD_INT_INIT(FRIENDS_OTHER_CITIES_FOOD_BONUS_AMOUNT_PRE_RENAISSANCE, 0),
	GD_INT_INIT(FRIENDS_OTHER_CITIES_FOOD_BONUS_AMOUNT_POST_RENAISSANCE, 0),
	GD_INT_INIT(ALLIES_CAPITAL_FOOD_BONUS_AMOUNT, 0),
	GD_INT_INIT(ALLIES_OTHER_CITIES_FOOD_BONUS_AMOUNT, 100),
	GD_INT_INIT(FRIENDS_BASE_TURNS_UNIT_SPAWN, 19),
	GD_INT_INIT(FRIENDS_RAND_TURNS_UNIT_SPAWN, 3),
	GD_INT_INIT(ALLIES_EXTRA_TURNS_UNIT_SPAWN, -3),
	GD_INT_INIT(UNIT_SPAWN_BIAS_MULTIPLIER, 50),
	GD_INT_INIT(UNIT_SPAWN_NUM_CHOICES, 5),
	GD_INT_INIT(FRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_ANCIENT, 2),
	GD_INT_INIT(FRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_MEDIEVAL, 3),
	GD_INT_INIT(FRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_INDUSTRIAL, 3),
	GD_INT_INIT(ALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_ANCIENT, 0),
	GD_INT_INIT(ALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_MEDIEVAL, 0),
	GD_INT_INIT(ALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_INDUSTRIAL, 0),
	GD_INT_INIT(FRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_ANCIENT, 0),
	GD_INT_INIT(FRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_MEDIEVAL, 0),
	GD_INT_INIT(FRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_INDUSTRIAL, 0),
	GD_INT_INIT(ALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_ANCIENT, 0),
	GD_INT_INIT(ALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_MEDIEVAL, 0),
	GD_INT_INIT(ALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_INDUSTRIAL, 0),
	GD_INT_INIT(FRIENDS_FAITH_FLAT_BONUS_AMOUNT_ANCIENT, 2),
	GD_INT_INIT(FRIENDS_FAITH_FLAT_BONUS_AMOUNT_CLASSICAL, 2),
	GD_INT_INIT(FRIENDS_FAITH_FLAT_BONUS_AMOUNT_MEDIEVAL, 4),
	GD_INT_INIT(FRIENDS_FAITH_FLAT_BONUS_AMOUNT_RENAISSANCE, 4),
	GD_INT_INIT(FRIENDS_FAITH_FLAT_BONUS_AMOUNT_INDUSTRIAL, 8),
	GD_INT_INIT(ALLIES_FAITH_FLAT_BONUS_AMOUNT_ANCIENT, 2),
	GD_INT_INIT(ALLIES_FAITH_FLAT_BONUS_AMOUNT_CLASSICAL, 2),
	GD_INT_INIT(ALLIES_FAITH_FLAT_BONUS_AMOUNT_MEDIEVAL, 4),
	GD_INT_INIT(ALLIES_FAITH_FLAT_BONUS_AMOUNT_RENAISSANCE, 4),
	GD_INT_INIT(ALLIES_FAITH_FLAT_BONUS_AMOUNT_INDUSTRIAL, 8),
	GD_INT_INIT(MINOR_TURNS_GREAT_PEOPLE_SPAWN_BASE, 3),
	GD_INT_INIT(MINOR_TURNS_GREAT_PEOPLE_SPAWN_RAND, 7),
	GD_INT_INIT(MINOR_TURNS_GREAT_PEOPLE_SPAWN_BIAS_MULTIPLY, 50),
	GD_INT_INIT(MINOR_ADDITIONAL_ALLIES_GP_CHANGE, -1),
	GD_INT_INIT(MAX_MINOR_ADDITIONAL_ALLIES_GP_CHANGE, -10),
	GD_INT_INIT(MAX_DISTANCE_MINORS_BARB_QUEST, 50),
	GD_INT_INIT(MINOR_QUEST_REBELLION_TIMER, 20),
	GD_INT_INIT(SCHOLAR_MINOR_ALLY_MULTIPLIER, 2),
	GD_INT_INIT(SCIENCE_LEAGUE_GREAT_WORK_MODIFIER, 1),
	GD_INT_INIT(PIONEER_POPULATION_CHANGE, 3),
	GD_INT_INIT(PIONEER_EXTRA_PLOTS, 3),
	GD_INT_INIT(PIONEER_FOOD_PERCENT, 25),
	GD_INT_INIT(COLONIST_POPULATION_CHANGE, 5),
	GD_INT_INIT(COLONIST_EXTRA_PLOTS, 5),
	GD_INT_INIT(COLONIST_FOOD_PERCENT, 50),
	GD_INT_INIT(MINOR_CIV_GOLD_GIFT_GAME_MULTIPLIER, 2),
	GD_INT_INIT(MINOR_CIV_GOLD_GIFT_GAME_DIVISOR, 3),
	GD_INT_INIT(MINOR_CIV_GOLD_GIFT_VISIBLE_DIVISOR, 5),
	GD_INT_INIT(MINOR_CIV_GOLD_GIFT_MINIMUM_FRIENDSHIP_REWARD, 5),
	GD_INT_INIT(FRIENDSHIP_PER_UNIT_INTRUDING, -6),
	GD_INT_INIT(FRIENDSHIP_PER_BARB_KILLED, 12),
	GD_INT_INIT(FRIENDSHIP_PER_UNIT_GIFTED, 5),
	GD_INT_INIT(MINOR_LIBERATION_FRIENDSHIP, 105),
	GD_INT_INIT(MINOR_REMOVE_SPHERE_FRIENDSHIP, 0),
	GD_INT_INIT(MINOR_LIBERATION_RESTING_INFLUENCE, 0),
	GD_INT_INIT(MINOR_LANDMARK_RESTING_INFLUENCE, 0),
	GD_INT_INIT(RETURN_CIVILIAN_FRIENDSHIP, 45),
	GD_INT_INIT(MINOR_CIV_GLOBAL_QUEST_FIRST_POSSIBLE_TURN, 30),
	GD_INT_INIT(MINOR_CIV_GLOBAL_QUEST_FIRST_POSSIBLE_TURN_RAND, 20),
	GD_INT_INIT(MINOR_CIV_GLOBAL_QUEST_MIN_TURNS_BETWEEN, 40),
	GD_INT_INIT(MINOR_CIV_GLOBAL_QUEST_RAND_TURNS_BETWEEN, 25),
	GD_INT_INIT(MINOR_CIV_GLOBAL_QUEST_RAND_TURNS_BETWEEN_HOSTILE_MULTIPLIER, 200),
	GD_INT_INIT(MINOR_CIV_PERSONAL_QUEST_FIRST_POSSIBLE_TURN, 30),
	GD_INT_INIT(MINOR_CIV_PERSONAL_QUEST_FIRST_POSSIBLE_TURN_RAND, 20),
	GD_INT_INIT(MINOR_CIV_PERSONAL_QUEST_MIN_TURNS_BETWEEN, 20),
	GD_INT_INIT(MINOR_CIV_PERSONAL_QUEST_RAND_TURNS_BETWEEN, 25),
	GD_INT_INIT(MINOR_CIV_PERSONAL_QUEST_RAND_TURNS_BETWEEN_HOSTILE_MULTIPLIER, 200),
	GD_INT_INIT(MINOR_CIV_QUEST_ROUTE_MAXIMUM_DISTANCE, 7),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CAMP_RANGE, 12),
	GD_INT_INIT(MINOR_CIV_QUEST_WONDER_COMPLETION_MAX_TURNS, 30),
	GD_INT_INIT(MINOR_CIV_QUEST_WONDER_COMPLETION_THRESHOLD, 25),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_MIN_DISTANCE, 16),
	GD_INT_INIT(MINOR_CIV_QUEST_ARCHAEOLOGY_RANGE, 12),
	GD_INT_INIT(MINOR_CIV_QUEST_ACQUIRE_CITY_MINIMUM_POP, 6),
	GD_INT_INIT(MINOR_CIV_QUEST_ACQUIRE_CITY_MINIMUM_TURNS, 10),
	GD_INT_INIT(MINOR_CIV_THREATENED_BY_BARBS_NOTIF_THRESHOLD, 2),
	GD_INT_INIT(MINOR_CIV_MERCANTILE_RESOURCES_QUANTITY, 1),
	GD_INT_INIT(MINOR_CIV_MERCANTILE_RESOURCES_KEEP_ON_CAPTURE_DISABLED, 1),
	GD_INT_INIT(QUEST_DISABLED_ROUTE, 0),
	GD_INT_INIT(QUEST_DISABLED_KILL_CAMP, 0),
	GD_INT_INIT(QUEST_DISABLED_CONNECT_RESOURCE, 0),
	GD_INT_INIT(QUEST_DISABLED_CONSTRUCT_WONDER, 0),
	GD_INT_INIT(QUEST_DISABLED_GREAT_PERSON, 0),
	GD_INT_INIT(QUEST_DISABLED_KILL_CITY_STATE, 1),
	GD_INT_INIT(QUEST_DISABLED_KILL_CITY_STATE_FRIENDLY, 1),
	GD_INT_INIT(QUEST_DISABLED_FIND_PLAYER, 0),
	GD_INT_INIT(QUEST_DISABLED_NATURAL_WONDER, 0),
	GD_INT_INIT(QUEST_DISABLED_GIVE_GOLD, 0),
	GD_INT_INIT(QUEST_DISABLED_PLEDGE_TO_PROTECT, 0),
	GD_INT_INIT(QUEST_DISABLED_CONTEST_CULTURE, 0),
	GD_INT_INIT(QUEST_DISABLED_CONTEST_FAITH, 0),
	GD_INT_INIT(QUEST_DISABLED_CONTEST_TECHS, 0),
	GD_INT_INIT(QUEST_DISABLED_INVEST, 0),
	GD_INT_INIT(QUEST_DISABLED_BULLY_CITY_STATE, 0),
	GD_INT_INIT(QUEST_DISABLED_DENOUNCE_MAJOR, 0),
	GD_INT_INIT(QUEST_DISABLED_SPREAD_RELIGION, 0),
	GD_INT_INIT(QUEST_DISABLED_TRADE_ROUTE, 0),
	GD_INT_INIT(QUEST_DISABLED_FIND_CITY, 1),
	GD_INT_INIT(QUEST_DISABLED_WAR, 1),
	GD_INT_INIT(QUEST_DISABLED_CONSTRUCT_NATIONAL_WONDER, 1),
	GD_INT_INIT(QUEST_DISABLED_GIFT_SPECIFIC_UNIT, 1),
	GD_INT_INIT(QUEST_DISABLED_FIND_CITY_STATE, 1),
	GD_INT_INIT(QUEST_DISABLED_INFLUENCE, 1),
	GD_INT_INIT(QUEST_DISABLED_CONTEST_TOURISM, 1),
	GD_INT_INIT(QUEST_DISABLED_ARCHAEOLOGY, 1),
	GD_INT_INIT(QUEST_DISABLED_CIRCUMNAVIGATION, 1),
	GD_INT_INIT(QUEST_DISABLED_LIBERATION, 1),
	GD_INT_INIT(QUEST_DISABLED_HORDE, 1),
	GD_INT_INIT(QUEST_DISABLED_REBELLION, 1),
	GD_INT_INIT(QUEST_DISABLED_EXPLORE_AREA, 1),
	GD_INT_INIT(QUEST_DISABLED_BUILD_X_BUILDINGS, 1),
	GD_INT_INIT(QUEST_DISABLED_SPY_ON_MAJOR, 1),
	GD_INT_INIT(QUEST_DISABLED_COUP, 1),
	GD_INT_INIT(QUEST_DISABLED_ACQUIRE_CITY, 1),
	GD_INT_INIT(QUEST_DISABLED_ACQUIRE_CITY_MILITARISTIC_ONLY, 1),
	GD_INT_INIT(MINOR_CIV_QUEST_ROUTE_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_ROUTE_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ROUTE_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ROUTE_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ROUTE_COPIES_MERCANTILE, 5),
	GD_INT_INIT(MINOR_CIV_QUEST_ROUTE_COPIES_RELIGIOUS, 2),
	GD_INT_INIT(MINOR_CIV_QUEST_ROUTE_COPIES_FRIENDLY, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_ROUTE_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ROUTE_COPIES_HOSTILE, -8),
	GD_INT_INIT(MINOR_CIV_QUEST_ROUTE_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_MARITIME, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_MERCANTILE, 20),
	GD_INT_INIT(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_HYPERLINK, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_CULTURED, 20),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_HYPERLINK, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_CULTURED, 20),
	GD_INT_INIT(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_HYPERLINK, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_MARITIME, 20),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_MERCANTILE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_MILITARISTIC, -5),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_HOSTILE, -7),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_BASE, 30),
	GD_INT_INIT(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_MILITARISTIC, -10),
	GD_INT_INIT(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_MERCANTILE, 5),
	GD_INT_INIT(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_BASE, 30),
	GD_INT_INIT(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_CULTURED, 5),
	GD_INT_INIT(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_MILITARISTIC, -10),
	GD_INT_INIT(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_FRIENDLY, -7),
	GD_INT_INIT(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_HOSTILE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_IRRATIONAL, 5),
	GD_INT_INIT(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_BASE, 15),
	GD_INT_INIT(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_MARITIME, 5),
	GD_INT_INIT(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_RELIGIOUS, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_HYPERLINK, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_RELIGIOUS, 20),
	GD_INT_INIT(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_HYPERLINK, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_MARITIME, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_MERCANTILE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_HYPERLINK, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_COPIES_MARITIME, 20),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_WAR_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_WAR_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_WAR_COPIES_MILITARISTIC, 20),
	GD_INT_INIT(MINOR_CIV_QUEST_WAR_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_WAR_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_WAR_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_WAR_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_WAR_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_WAR_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_WAR_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_WAR_COPIES_HYPERLINK, 80),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_CULTURED, 20),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_HYPERLINK, 80),
	GD_INT_INIT(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_HOSTILE, 20),
	GD_INT_INIT(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_HYPERLINK, 80),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_MARITIME, 20),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_LIBERATION_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_LIBERATION_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_LIBERATION_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_LIBERATION_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_LIBERATION_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_LIBERATION_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_LIBERATION_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_LIBERATION_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_LIBERATION_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_LIBERATION_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_LIBERATION_COPIES_HYPERLINK, 80),
	GD_INT_INIT(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_MARITIME, 20),
	GD_INT_INIT(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_HYPERLINK, 80),
	GD_INT_INIT(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_MERCANTILE, 20),
	GD_INT_INIT(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_NEUTRAL, 20),
	GD_INT_INIT(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_COUP_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_COUP_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_COUP_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_COUP_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_COUP_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_COUP_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_COUP_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_COUP_COPIES_NEUTRAL, 20),
	GD_INT_INIT(MINOR_CIV_QUEST_COUP_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_COUP_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_BASE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_MILITARISTIC, 30),
	GD_INT_INIT(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_HOSTILE, 20),
	GD_INT_INIT(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_HYPERLINK, 80),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CAMP_COPIES_BASE, 30),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CAMP_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CAMP_COPIES_MILITARISTIC, 60),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CAMP_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CAMP_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CAMP_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CAMP_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CAMP_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CAMP_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CAMP_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_MILITARISTIC, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_NEUTRAL, -6),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_HOSTILE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_CULTURED, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_HYPERLINK, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_BASE, 5),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_RELIGIOUS, 15),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_HYPERLINK, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_RELIGIOUS, -5),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_INVEST_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_INVEST_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_INVEST_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_INVEST_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_INVEST_COPIES_MERCANTILE, 5),
	GD_INT_INIT(MINOR_CIV_QUEST_INVEST_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_INVEST_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_INVEST_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_INVEST_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_INVEST_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_INFLUENCE_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_INFLUENCE_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_INFLUENCE_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_INFLUENCE_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_INFLUENCE_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_INFLUENCE_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_INFLUENCE_COPIES_FRIENDLY, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_INFLUENCE_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_INFLUENCE_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_INFLUENCE_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_CULTURED, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_CULTURED, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_MILITARISTIC, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_RELIGIOUS, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_BASE, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_MARITIME, 10),
	GD_INT_INIT(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_HYPERLINK, 45),
	GD_INT_INIT(MINOR_CIV_QUEST_HORDE_COPIES_BASE, 30),
	GD_INT_INIT(MINOR_CIV_QUEST_HORDE_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_HORDE_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_HORDE_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_HORDE_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_HORDE_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_HORDE_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_HORDE_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_HORDE_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_HORDE_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_HORDE_COPIES_HYPERLINK, 60),
	GD_INT_INIT(MINOR_CIV_QUEST_REBELLION_COPIES_BASE, 50),
	GD_INT_INIT(MINOR_CIV_QUEST_REBELLION_COPIES_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_REBELLION_COPIES_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_REBELLION_COPIES_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_REBELLION_COPIES_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_REBELLION_COPIES_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_REBELLION_COPIES_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_REBELLION_COPIES_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_REBELLION_COPIES_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_REBELLION_COPIES_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_REBELLION_COPIES_HYPERLINK, 80),
	GD_INT_INIT(INFLUENCE_TARGET_DISTANCE_WEIGHT_VALUE, 3),
	GD_INT_INIT(AI_MILITARY_RECAPTURING_CITY_STATE, 200),
	GD_INT_INIT(NEED_DIPLOMAT_THRESHOLD_MODIFIER, 125),
	GD_INT_INIT(NEED_DIPLOMAT_DESIRE_MODIFIER, 2),
	GD_INT_INIT(NEED_DIPLOMAT_DISTASTE_MODIFIER, 6),
	GD_INT_INIT(INFLUENCE_MINOR_QUEST_BOOST, 20),
	GD_INT_INIT(MINOR_FRIENDSHIP_DROP_PER_TURN_DAMAGED_CAPITAL_MULTIPLIER, 300),
	GD_INT_INIT(LEAGUE_AID_MAX, 30),
	GD_INT_INIT(CSD_GOLD_GIFT_DISABLED, 0),
	GD_INT_INIT(MAX_TURNS_OBSERVER_MODE, 0),
	GD_INT_INIT(RELIGION_BELIEF_SCORE_CITY_MULTIPLIER, 6),
	GD_INT_INIT(RELIGION_MISSIONARY_RANGE_IN_TURNS, 20),
	GD_INT_INIT(RELIGION_MAX_MISSIONARIES, 2),
	GD_INT_INIT(MC_GIFT_WEIGHT_THRESHOLD, 100),
	GD_INT_INIT(MC_ALWAYS_GIFT_DIPLO_THRESHOLD, 4),
	GD_INT_INIT(MC_SMALL_GIFT_WEIGHT_PASS_OTHER_PLAYER, 30),
	GD_INT_INIT(MC_GIFT_WEIGHT_PASS_OTHER_PLAYER, 15),
	GD_INT_INIT(MC_GIFT_WEIGHT_MARITIME_GROWTH, 20),
	GD_INT_INIT(MC_GIFT_WEIGHT_DIPLO_VICTORY, 100),
	GD_INT_INIT(MC_GIFT_WEIGHT_CULTURE_VICTORY, 200),
	GD_INT_INIT(MC_GIFT_WEIGHT_CONQUEST_VICTORY, 100),
	GD_INT_INIT(MC_GIFT_WEIGHT_MILITARISTIC, -50),
	GD_INT_INIT(MC_GIFT_WEIGHT_RESOURCE_WE_NEED, 80),
	GD_INT_INIT(MC_GIFT_WEIGHT_PROTECTIVE, 10),
	GD_INT_INIT(MC_GIFT_WEIGHT_HOSTILE, -20),
	GD_INT_INIT(MC_GIFT_WEIGHT_NEIGHBORS, 5),
	GD_INT_INIT(MC_GIFT_WEIGHT_CLOSE, 4),
	GD_INT_INIT(MC_GIFT_WEIGHT_FAR, 3),
	GD_INT_INIT(MC_GIFT_WEIGHT_ALMOST_NOT_ALLIES, 250),
	GD_INT_INIT(MC_GIFT_WEIGHT_ALMOST_NOT_FRIENDS, 150),
	GD_INT_INIT(OPINION_THRESHOLD_UNFORGIVABLE, 160),
	GD_INT_INIT(OPINION_THRESHOLD_ENEMY, 80),
	GD_INT_INIT(OPINION_THRESHOLD_COMPETITOR, 30),
	GD_INT_INIT(OPINION_THRESHOLD_FAVORABLE, -30),
	GD_INT_INIT(OPINION_THRESHOLD_FRIEND, -80),
	GD_INT_INIT(OPINION_THRESHOLD_ALLY, -160),
	GD_INT_INIT(OPINION_THRESHOLD_MAJOR_POSITIVE, -15),
	GD_INT_INIT(OPINION_THRESHOLD_MAJOR_NEGATIVE, 15),
	GD_INT_INIT(OPINION_WEIGHT_LAND_FIERCE, 40),
	GD_INT_INIT(OPINION_WEIGHT_LAND_STRONG, 25),
	GD_INT_INIT(OPINION_WEIGHT_LAND_WEAK, 15),
	GD_INT_INIT(OPINION_WEIGHT_LAND_NONE, -10),
	GD_INT_INIT(OPINION_WEIGHT_LAND_WARMONGER, 10),
	GD_INT_INIT(OPINION_WEIGHT_LAND_NONE_WARMONGER, -5),
	GD_INT_INIT(OPINION_WEIGHT_VICTORY_FIERCE, 40),
	GD_INT_INIT(OPINION_WEIGHT_VICTORY_STRONG, 30),
	GD_INT_INIT(OPINION_WEIGHT_VICTORY_WEAK, 20),
	GD_INT_INIT(OPINION_WEIGHT_VICTORY_NONE, 0),
	GD_INT_INIT(OPINION_WEIGHT_VICTORY_PER_ERA, 4),
	GD_INT_INIT(OPINION_WEIGHT_VICTORY_BLOCK_FIERCE, 40),
	GD_INT_INIT(OPINION_WEIGHT_VICTORY_BLOCK_STRONG, 30),
	GD_INT_INIT(OPINION_WEIGHT_VICTORY_BLOCK_WEAK, 20),
	GD_INT_INIT(OPINION_WEIGHT_VICTORY_BLOCK_NONE, 0),
	GD_INT_INIT(OPINION_WEIGHT_VICTORY_BLOCK_PER_ERA, 4),
	GD_INT_INIT(OPINION_WEIGHT_WONDER_FIERCE, 50),
	GD_INT_INIT(OPINION_WEIGHT_WONDER_STRONG, 35),
	GD_INT_INIT(OPINION_WEIGHT_WONDER_WEAK, 20),
	GD_INT_INIT(OPINION_WEIGHT_WONDER_NONE, 0),
	GD_INT_INIT(OPINION_WEIGHT_WONDER_CULTURAL, 10),
	GD_INT_INIT(OPINION_WEIGHT_WONDER_NONE_CULTURAL, -5),
	GD_INT_INIT(OPINION_WEIGHT_MINOR_CIV_FIERCE, 30),
	GD_INT_INIT(OPINION_WEIGHT_MINOR_CIV_STRONG, 20),
	GD_INT_INIT(OPINION_WEIGHT_MINOR_CIV_WEAK, 10),
	GD_INT_INIT(OPINION_WEIGHT_MINOR_CIV_NONE, 0),
	GD_INT_INIT(OPINION_WEIGHT_MINOR_CIV_DIPLOMAT, 10),
	GD_INT_INIT(OPINION_WEIGHT_MINOR_CIV_NONE_DIPLOMAT, -5),
	GD_INT_INIT(OPINION_WEIGHT_TECH_FIERCE, 30),
	GD_INT_INIT(OPINION_WEIGHT_TECH_STRONG, 20),
	GD_INT_INIT(OPINION_WEIGHT_TECH_WEAK, 10),
	GD_INT_INIT(OPINION_WEIGHT_TECH_NONE, -5),
	GD_INT_INIT(OPINION_WEIGHT_POLICY_FIERCE, 30),
	GD_INT_INIT(OPINION_WEIGHT_POLICY_STRONG, 20),
	GD_INT_INIT(OPINION_WEIGHT_POLICY_WEAK, 10),
	GD_INT_INIT(OPINION_WEIGHT_POLICY_NONE, -5),
	GD_INT_INIT(OPINION_WEIGHT_MILITARY_AGGRESSIVE_POSTURE_LOW, 10),
	GD_INT_INIT(OPINION_WEIGHT_MILITARY_AGGRESSIVE_POSTURE_MEDIUM, 20),
	GD_INT_INIT(OPINION_WEIGHT_MILITARY_AGGRESSIVE_POSTURE_HIGH, 40),
	GD_INT_INIT(OPINION_WEIGHT_MILITARY_AGGRESSIVE_POSTURE_INCREDIBLE, 60),
	GD_INT_INIT(OPINION_WEIGHT_ASKED_NO_SETTLE, 20),
	GD_INT_INIT(OPINION_WEIGHT_ASKED_STOP_SPYING, 10),
	GD_INT_INIT(OPINION_WEIGHT_MADE_DEMAND_OF_US, 20),
	GD_INT_INIT(OPINION_WEIGHT_MADE_DEMAND_OF_US_SUBSEQUENT, 10),
	GD_INT_INIT(OPINION_WEIGHT_MADE_DEMAND_YOU_NO_TAKE_DIVISOR, 200),
	GD_INT_INIT(OPINION_WEIGHT_MADE_DEMAND_BANKRUPT_MULTIPLIER, 200),
	GD_INT_INIT(OPINION_WEIGHT_MADE_DEMAND_BANKRUPT_MULTIPLIER_TURNS, 20),
	GD_INT_INIT(OPINION_WEIGHT_RETURNED_CIVILIAN, -10),
	GD_INT_INIT(OPINION_WEIGHT_RETURNED_CIVILIAN_SUBSEQUENT, -5),
	GD_INT_INIT(OPINION_WEIGHT_BUILT_LANDMARK, -20),
	GD_INT_INIT(OPINION_WEIGHT_BUILT_LANDMARK_SUBSEQUENT, -10),
	GD_INT_INIT(OPINION_WEIGHT_RESURRECTED, -200),
	GD_INT_INIT(OPINION_WEIGHT_LIBERATOR_CAPTURED_CAPITAL_DIVISOR, 200),
	GD_INT_INIT(OPINION_WEIGHT_LIBERATOR_CAPTURED_HOLY_CITY_DIVISOR, 200),
	GD_INT_INIT(OPINION_WEIGHT_EMBASSY, -2),
	GD_INT_INIT(OPINION_WEIGHT_EMBASSY_THEM, -1),
	GD_INT_INIT(OPINION_WEIGHT_EMBASSY_MUTUAL, -3),
	GD_INT_INIT(OPINION_WEIGHT_DIPLOMAT, -20),
	GD_INT_INIT(OPINION_WEIGHT_DIPLOMAT_MOD, -10),
	GD_INT_INIT(OPINION_WEIGHT_CULTURE_BOMBED, 10),
	GD_INT_INIT(RELIGION_DIPLO_HIT_INITIAL_CONVERT_FRIENDLY_CITY, 1),
	GD_INT_INIT(RELIGION_DIPLO_HIT_RELIGIOUS_FLIP_FRIENDLY_CITY, 3),
	GD_INT_INIT(RELIGION_DIPLO_HIT_CONVERT_HOLY_CITY, 25),
	GD_INT_INIT(RELIGION_DIPLO_HIT_THRESHOLD, 4),
	GD_INT_INIT(OPINION_WEIGHT_PER_NEGATIVE_CONVERSION, 1),
	GD_INT_INIT(OPINION_WEIGHT_ADOPTING_HIS_RELIGION, -4),
	GD_INT_INIT(OPINION_WEIGHT_ADOPTING_MY_RELIGION, -8),
	GD_INT_INIT(OPINION_WEIGHT_SAME_STATE_RELIGIONS, -2),
	GD_INT_INIT(OPINION_WEIGHT_DIFFERENT_STATE_RELIGIONS, 2),
	GD_INT_INIT(OPINION_WEIGHT_DIFFERENT_OWNED_RELIGIONS, 5),
	GD_INT_INIT(OPINION_WEIGHT_WORLD_RELIGION_MODIFIER, 150),
	GD_INT_INIT(OPINION_WEIGHT_SAME_LATE_POLICIES, -10),
	GD_INT_INIT(OPINION_WEIGHT_DIFFERENT_LATE_POLICIES, 10),
	GD_INT_INIT(OPINION_WEIGHT_WORLD_IDEOLOGY_MODIFIER, 150),
	GD_INT_INIT(OPINION_WEIGHT_IDEOLOGY_VASSAL_DIVISOR, 200),
	GD_INT_INIT(OPINION_WEIGHT_BROKEN_MILITARY_PROMISE, 80),
	GD_INT_INIT(OPINION_WEIGHT_BROKEN_MILITARY_PROMISE_WORLD, 40),
	GD_INT_INIT(OPINION_WEIGHT_IGNORED_MILITARY_PROMISE, 0),
	GD_INT_INIT(OPINION_WEIGHT_BROKEN_EXPANSION_PROMISE, 40),
	GD_INT_INIT(OPINION_WEIGHT_IGNORED_EXPANSION_PROMISE, 30),
	GD_INT_INIT(OPINION_WEIGHT_BROKEN_BORDER_PROMISE, 40),
	GD_INT_INIT(OPINION_WEIGHT_IGNORED_BORDER_PROMISE, 30),
	GD_INT_INIT(OPINION_WEIGHT_BROKEN_CITY_STATE_PROMISE, 80),
	GD_INT_INIT(OPINION_WEIGHT_BROKEN_CITY_STATE_PROMISE_WORLD, 40),
	GD_INT_INIT(OPINION_WEIGHT_IGNORED_CITY_STATE_PROMISE, 30),
	GD_INT_INIT(OPINION_WEIGHT_BROKEN_BULLY_CITY_STATE_PROMISE, 40),
	GD_INT_INIT(OPINION_WEIGHT_IGNORED_BULLY_CITY_STATE_PROMISE, 20),
	GD_INT_INIT(OPINION_WEIGHT_BROKEN_SPY_PROMISE, 40),
	GD_INT_INIT(OPINION_WEIGHT_IGNORED_SPY_PROMISE, 30),
	GD_INT_INIT(OPINION_WEIGHT_FORGAVE_FOR_SPYING, -10),
	GD_INT_INIT(OPINION_WEIGHT_BROKEN_NO_CONVERT_PROMISE, 10),
	GD_INT_INIT(OPINION_WEIGHT_IGNORED_NO_CONVERT_PROMISE, 5),
	GD_INT_INIT(OPINION_WEIGHT_BROKEN_NO_DIG_PROMISE, 40),
	GD_INT_INIT(OPINION_WEIGHT_IGNORED_NO_DIG_PROMISE, 30),
	GD_INT_INIT(OPINION_WEIGHT_BROKEN_COOP_WAR_PROMISE, 40),
	GD_INT_INIT(OPINION_WEIGHT_KILLED_PROTECTED_MINOR, 40),
	GD_INT_INIT(OPINION_WEIGHT_KILLED_MANY_PROTECTED_MINORS, 20),
	GD_INT_INIT(OPINION_WEIGHT_KILLED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN, 50),
	GD_INT_INIT(OPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_RECENTLY, 20),
	GD_INT_INIT(OPINION_WEIGHT_ATTACKED_MANY_PROTECTED_MINORS, 15),
	GD_INT_INIT(OPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN, 30),
	GD_INT_INIT(OPINION_WEIGHT_BULLIED_PROTECTED_MINOR_RECENTLY, 15),
	GD_INT_INIT(OPINION_WEIGHT_BULLIED_MANY_PROTECTED_MINORS, 10),
	GD_INT_INIT(OPINION_WEIGHT_BULLIED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN, 30),
	GD_INT_INIT(OPINION_WEIGHT_SIDED_WITH_THEIR_MINOR, 10),
	GD_INT_INIT(OPINION_WEIGHT_SIDED_WITH_THEIR_MINOR_AGGRESSIVE_MOD, 10),
	GD_INT_INIT(OPINION_WEIGHT_SIDED_WITH_THEIR_MINOR_NUM_TURNS_UNTIL_FORGIVEN, 10),
	GD_INT_INIT(OPINION_WEIGHT_DOF, -30),
	GD_INT_INIT(OPINION_WEIGHT_DOF_MOST_VALUED_FRIEND, -20),
	GD_INT_INIT(OPINION_WEIGHT_DOF_TYPE_FRIENDS, -10),
	GD_INT_INIT(OPINION_WEIGHT_DOF_TYPE_ALLIES, -20),
	GD_INT_INIT(OPINION_WEIGHT_DOF_TYPE_BATTLE_BROTHERS, -30),
	GD_INT_INIT(OPINION_WEIGHT_DOF_WITH_FRIEND, -20),
	GD_INT_INIT(OPINION_WEIGHT_DOF_WITH_FRIEND_SUBSEQUENT, -8),
	GD_INT_INIT(OPINION_WEIGHT_DOF_WITH_MOST_VALUED_FRIEND, -20),
	GD_INT_INIT(OPINION_WEIGHT_DOF_WITH_MOST_VALUED_ALLY, -10),
	GD_INT_INIT(OPINION_WEIGHT_DOF_WITH_ENEMY, 20),
	GD_INT_INIT(OPINION_WEIGHT_DOF_WITH_ENEMY_SUBSEQUENT, 8),
	GD_INT_INIT(OPINION_WEIGHT_DOF_WITH_BIGGEST_COMPETITOR, 20),
	GD_INT_INIT(OPINION_WEIGHT_DOF_WITH_BIGGEST_LEAGUE_RIVAL, 20),
	GD_INT_INIT(OPINION_WEIGHT_BETRAYED_OUR_FRIEND_MULTIPLIER, 200),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_BY_FRIEND_EACH, 20),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_BY_FRIEND_DONT_LIKE, 10),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_FRIEND_EACH, 40),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_ME_FRIENDS, 80),
	GD_INT_INIT(OPINION_WEIGHT_ATTACKED_OWN_VASSAL, 50),
	GD_INT_INIT(OPINION_WEIGHT_VASSALAGE_BROKEN_VASSAL_AGREEMENT, 100),
	GD_INT_INIT(OPINION_WEIGHT_WAR_FRIEND_EACH, 75),
	GD_INT_INIT(OPINION_WEIGHT_WAR_ME_FRIENDS, 150),
	GD_INT_INIT(OPINION_WEIGHT_ATTACKED_RESURRECTED_PLAYER, 75),
	GD_INT_INIT(OPINION_WEIGHT_RESURRECTOR_ATTACKED_US, 200),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_ME, 50),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_THEM, 0),
	GD_INT_INIT(OPINION_WEIGHT_MUTUAL_DENOUNCEMENT, 50),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_FRIEND, 20),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_FRIEND_SUBSEQUENT, 8),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_MOST_VALUED_FRIEND, 20),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_MOST_VALUED_ALLY, 10),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_ENEMY, -20),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_ENEMY_SUBSEQUENT, -8),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_BIGGEST_COMPETITOR, -20),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_BIGGEST_LEAGUE_RIVAL, -20),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_BY_THEIR_FRIEND, 15),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_BY_THEIR_FRIEND_SUBSEQUENT, 5),
	GD_INT_INIT(OPINION_WEIGHT_DENOUNCED_BY_THEIR_KEY_FRIEND, 15),
	GD_INT_INIT(RECKLESS_EXPANDER_CITIES_THRESHOLD, 200),
	GD_INT_INIT(RECKLESS_EXPANDER_LAND_THRESHOLD, 250),
	GD_INT_INIT(OPINION_WEIGHT_RECKLESS_EXPANDER, 20),
	GD_INT_INIT(OPINION_WEIGHT_RECKLESS_EXPANDER_PER_CITY, 10),
	GD_INT_INIT(OPINION_WEIGHT_RECKLESS_EXPANDER_PER_TILE, 1),
	GD_INT_INIT(OPINION_WEIGHT_RECKLESS_EXPANDER_STRATEGIC_MOD, 20),
	GD_INT_INIT(WONDER_SPAMMER_THRESHOLD, 3),
	GD_INT_INIT(OPINION_WEIGHT_WONDER_SPAMMER, 20),
	GD_INT_INIT(OPINION_WEIGHT_WONDER_SPAMMER_PER_WONDER, 5),
	GD_INT_INIT(OPINION_WEIGHT_WONDER_SPAMMER_CAP, 60),
	GD_INT_INIT(OPINION_WEIGHT_WONDER_SPAMMER_STRATEGIC_MOD, 20),
	GD_INT_INIT(OPINION_WEIGHT_TRADE_MAX, -40),
	GD_INT_INIT(DEAL_VALUE_PER_TURN_DECAY, 2),
	GD_INT_INIT(DEAL_VALUE_PER_OPINION_WEIGHT, 5),
	GD_INT_INIT(OPINION_WEIGHT_STRATEGIC_TRADE_PARTNER_MULTIPLIER, 150),
	GD_INT_INIT(OPINION_WEIGHT_COMMON_FOE_MAX, -100),
	GD_INT_INIT(COMMON_FOE_VALUE_PER_TURN_DECAY, 25),
	GD_INT_INIT(COMMON_FOE_VALUE_PER_OPINION_WEIGHT, 50),
	GD_INT_INIT(OPINION_WEIGHT_ASSIST_MAX, -30),
	GD_INT_INIT(OPINION_WEIGHT_FAILED_ASSIST_MAX, 30),
	GD_INT_INIT(ASSIST_VALUE_PER_TURN_DECAY, 3),
	GD_INT_INIT(ASSIST_VALUE_PER_OPINION_WEIGHT, 5),
	GD_INT_INIT(OPINION_WEIGHT_LIBERATED_CAPITAL, -120),
	GD_INT_INIT(OPINION_WEIGHT_LIBERATED_CAPITAL_VASSAL_MULTIPLIER, 150),
	GD_INT_INIT(OPINION_WEIGHT_LIBERATED_HOLY_CITY, -80),
	GD_INT_INIT(OPINION_WEIGHT_LIBERATED_HOLY_CITY_VASSAL_MULTIPLIER, 150),
	GD_INT_INIT(OPINION_WEIGHT_LIBERATED_CITY, -30),
	GD_INT_INIT(OPINION_WEIGHT_LIBERATED_CITY_VASSAL_MULTIPLIER, 200),
	GD_INT_INIT(OPINION_WEIGHT_RETURNED_CAPITAL, -60),
	GD_INT_INIT(OPINION_WEIGHT_RETURNED_CAPITAL_VASSAL_MULTIPLIER, 150),
	GD_INT_INIT(OPINION_WEIGHT_RETURNED_HOLY_CITY, -40),
	GD_INT_INIT(OPINION_WEIGHT_RETURNED_HOLY_CITY_VASSAL_MULTIPLIER, 150),
	GD_INT_INIT(OPINION_WEIGHT_NUKED_MAX, 100),
	GD_INT_INIT(OPINION_WEIGHT_CIVILIAN_KILLER_MAX, 50),
	GD_INT_INIT(CIVILIAN_KILLER_VALUE_PER_OPINION_WEIGHT, 100),
	GD_INT_INIT(CIVILIAN_KILLER_VALUE_PER_TURN_DECAY, 100),
	GD_INT_INIT(OPINION_WEIGHT_CIVILIAN_KILLER_WORLD, 20),
	GD_INT_INIT(OPINION_WEIGHT_CIVILIAN_KILLER_WORLD_THRESHOLD, 25),
	GD_INT_INIT(OPINION_WEIGHT_PER_SIMILAR_POLICY, -5),
	GD_INT_INIT(OPINION_WEIGHT_PER_DIVERGENT_POLICY, 5),
	GD_INT_INIT(OPINION_WEIGHT_SIMILAR_POLICIES, -10),
	GD_INT_INIT(OPINION_WEIGHT_DIVERGENT_POLICIES, 10),
	GD_INT_INIT(POLICY_SCORE_NEEDY_THRESHOLD, 8),
	GD_INT_INIT(POLICY_SCORE_NEEDY_BONUS, 5),
	GD_INT_INIT(OPINION_WEIGHT_PTP_SAME_MINOR_EACH, -3),
	GD_INT_INIT(OPINION_WEIGHT_PTP_SAME_MINOR_MIN, -12),
	GD_INT_INIT(OPINION_WEIGHT_PTP_SAME_MINOR_DIPLOMAT_MULTIPLIER, 200),
	GD_INT_INIT(OPINION_WEIGHT_CAPTURED_CAPITAL, 160),
	GD_INT_INIT(OPINION_WEIGHT_CAPTURED_HOLY_CITY, 80),
	GD_INT_INIT(OPINION_WEIGHT_CAPTURED_KEY_CITY_RETURNED_DIVISOR, 200),
	GD_INT_INIT(OPINION_WEIGHT_CAPTURED_KEY_CITY_CAPITULATION_DIVISOR, 200),
	GD_INT_INIT(OPINION_WEIGHT_ROBBED_BY, 20),
	GD_INT_INIT(OPINION_WEIGHT_INTRIGUE_SHARED_BY, -10),
	GD_INT_INIT(OPINION_WEIGHT_INTRIGUE_SHARED_BY_SUBSEQUENT, -5),
	GD_INT_INIT(OPINION_WEIGHT_DP, -20),
	GD_INT_INIT(OPINION_WEIGHT_DP_MOST_VALUED_ALLY, -20),
	GD_INT_INIT(OPINION_WEIGHT_DP_CONQUEROR_MULTIPLIER, 150),
	GD_INT_INIT(OPINION_WEIGHT_DP_WITH_FRIEND, -15),
	GD_INT_INIT(OPINION_WEIGHT_DP_WITH_FRIEND_SUBSEQUENT, -10),
	GD_INT_INIT(OPINION_WEIGHT_DP_WITH_MOST_VALUED_ALLY, -10),
	GD_INT_INIT(OPINION_WEIGHT_DP_WITH_MOST_VALUED_FRIEND, -10),
	GD_INT_INIT(OPINION_WEIGHT_DP_WITH_ENEMY, 20),
	GD_INT_INIT(OPINION_WEIGHT_DP_WITH_ENEMY_SUBSEQUENT, 10),
	GD_INT_INIT(OPINION_WEIGHT_DP_WITH_BIGGEST_COMPETITOR, 20),
	GD_INT_INIT(OPINION_WEIGHT_DP_WITH_BIGGEST_LEAGUE_RIVAL, 20),
	GD_INT_INIT(OPINION_WEIGHT_RA, -10),
	GD_INT_INIT(OPINION_WEIGHT_RA_SCIENTIFIC_MOD, -10),
	GD_INT_INIT(OPINION_WEIGHT_OPEN_BORDERS_MUTUAL, -12),
	GD_INT_INIT(OPINION_WEIGHT_OPEN_BORDERS_US, -8),
	GD_INT_INIT(OPINION_WEIGHT_OPEN_BORDERS_THEM, -4),
	GD_INT_INIT(OPINION_WEIGHT_PLUNDERED_TRADE_ROUTE, 5),
	GD_INT_INIT(OPINION_WEIGHT_PLOTTED_AGAINST_US, 20),
	GD_INT_INIT(OPINION_WEIGHT_PLOTTED_AGAINST_US_SUBSEQUENT, 10),
	GD_INT_INIT(OPINION_WEIGHT_PERFORMED_COUP, 30),
	GD_INT_INIT(OPINION_WEIGHT_EXCAVATED_ARTIFACT, 30),
	GD_INT_INIT(OPINION_WEIGHT_VOTING_HISTORY_MAX, 60),
	GD_INT_INIT(OPINION_WEIGHT_VOTING_HISTORY_DIPLOMAT_MULTIPLIER, 200),
	GD_INT_INIT(VOTING_HISTORY_SCORE_MAX, 2400),
	GD_INT_INIT(VOTING_HISTORY_SCORE_PLAYER_VOTE_PERCENT_VALUE, 100),
	GD_INT_INIT(VOTING_HISTORY_SCORE_OUTCOME_VOTE_PERCENT_VALUE, 200),
	GD_INT_INIT(VOTING_HISTORY_SCORE_DESIRE_MULTIPLIER_WEAK, 100),
	GD_INT_INIT(VOTING_HISTORY_SCORE_DESIRE_MULTIPLIER_STANDARD, 200),
	GD_INT_INIT(VOTING_HISTORY_SCORE_DESIRE_MULTIPLIER_STRONG, 300),
	GD_INT_INIT(VOTING_HISTORY_SCORE_DESIRE_MULTIPLIER_OVERWHELMING, 400),
	GD_INT_INIT(VOTING_HISTORY_SCORE_LEAGUE_ALIGNMENT_SCALER, 10),
	GD_INT_INIT(VOTING_HISTORY_SCORE_PRIME_COMPETITOR_THRESHOLD, 12),
	GD_INT_INIT(OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_WEAK, -15),
	GD_INT_INIT(OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL, -30),
	GD_INT_INIT(OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_STRONG, -45),
	GD_INT_INIT(OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_OVERWHELMING, -60),
	GD_INT_INIT(OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_DIPLOMAT_MULTIPLIER, 134),
	GD_INT_INIT(OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_NUM_TURNS, 50),
	GD_INT_INIT(OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_WEAK, 15),
	GD_INT_INIT(OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL, 30),
	GD_INT_INIT(OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_STRONG, 45),
	GD_INT_INIT(OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_OVERWHELMING, 60),
	GD_INT_INIT(OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_DIPLOMAT_MULTIPLIER, 134),
	GD_INT_INIT(OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_NUM_TURNS, 50),
	GD_INT_INIT(OPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL, -10),
	GD_INT_INIT(OPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_MAX, -60),
	GD_INT_INIT(OPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_DIPLOMAT_MULTIPLIER, 167),
	GD_INT_INIT(OPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_NUM_TURNS, 50),
	GD_INT_INIT(OPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL, 10),
	GD_INT_INIT(OPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_MAX, 60),
	GD_INT_INIT(OPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_DIPLOMAT_MULTIPLIER, 167),
	GD_INT_INIT(OPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_NUM_TURNS, 50),
	GD_INT_INIT(OPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING, -20),
	GD_INT_INIT(OPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_MAX, -70),
	GD_INT_INIT(OPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_DIPLOMAT_MULTIPLIER, 150),
	GD_INT_INIT(OPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_NUM_TURNS, 50),
	GD_INT_INIT(OPINION_WEIGHT_PER_VOTE_PERCENT, 2),
	GD_INT_INIT(OPINION_WEIGHT_THEY_SANCTIONED_US, 50),
	GD_INT_INIT(OPINION_WEIGHT_THEY_SANCTIONED_US_DIPLOMAT_MULTIPLIER, 200),
	GD_INT_INIT(OPINION_WEIGHT_THEY_SANCTIONED_US_FAILURE_DIVISOR, 200),
	GD_INT_INIT(SANCTIONED_US_TURNS_UNTIL_FORGIVEN, 50),
	GD_INT_INIT(OPINION_WEIGHT_THEY_UNSANCTIONED_US, -50),
	GD_INT_INIT(OPINION_WEIGHT_THEY_UNSANCTIONED_US_DIPLOMAT_MULTIPLIER, 200),
	GD_INT_INIT(OPINION_WEIGHT_THEY_UNSANCTIONED_US_FAILURE_DIVISOR, 200),
	GD_INT_INIT(UNSANCTIONED_US_TURNS_UNTIL_FORGOTTEN, 50),
	GD_INT_INIT(OPINION_WEIGHT_VASSALAGE_WE_ARE_MASTER, -40),
	GD_INT_INIT(OPINION_WEIGHT_VASSALAGE_WE_ARE_VOLUNTARY_VASSAL, -20),
	GD_INT_INIT(OPINION_WEIGHT_VASSALAGE_WE_ARE_VASSAL, 0),
	GD_INT_INIT(OPINION_WEIGHT_SAME_MASTER, -60),
	GD_INT_INIT(OPINION_WEIGHT_SAME_MASTER_DIFFERENT_SURRENDER_DIVISOR, 200),
	GD_INT_INIT(OPINION_WEIGHT_DEMANDED_WHILE_VASSAL, 100),
	GD_INT_INIT(OPINION_WEIGHT_CAPITULATED_VASSAL_PLUNDERED_DIVISOR, 100),
	GD_INT_INIT(OPINION_WEIGHT_CAPITULATED_VASSAL_SPYING_DIVISOR, 100),
	GD_INT_INIT(OPINION_WEIGHT_CAPITULATED_VASSAL_CULTURE_BOMB_DIVISOR, 100),
	GD_INT_INIT(OPINION_WEIGHT_VASSAL_DENOUNCED_BY_MASTER, 25),
	GD_INT_INIT(OPINION_WEIGHT_VASSAL_TAX_DIVISOR, 4),
	GD_INT_INIT(OPINION_WEIGHT_VASSAL_CURRENT_TAX_MODIFIER, 50),
	GD_INT_INIT(OPINION_WEIGHT_VASSALAGE_PROTECT_MAX, -50),
	GD_INT_INIT(VASSALAGE_PROTECT_VALUE_PER_OPINION_WEIGHT, 50),
	GD_INT_INIT(VASSALAGE_PROTECTED_PER_TURN_DECAY, 25),
	GD_INT_INIT(VASSALAGE_PROTECTED_CITY_DISTANCE, 6),
	GD_INT_INIT(OPINION_WEIGHT_VASSALAGE_FAILED_PROTECT_MAX, 50),
	GD_INT_INIT(VASSALAGE_FAILED_PROTECT_CITY_DISTANCE, 0),
	GD_INT_INIT(OPINION_WEIGHT_VASSAL_TRADE_ROUTE, -15),
	GD_INT_INIT(OPINION_WEIGHT_VASSAL_TRADE_ROUTE_SUBSEQUENT, -10),
	GD_INT_INIT(OPINION_WEIGHT_VASSAL_OPEN_BORDERS, -5),
	GD_INT_INIT(OPINION_WEIGHT_VASSAL_FOUNDER_MASTER_ADOPTED_RELIGION, -40),
	GD_INT_INIT(OPINION_WEIGHT_VASSAL_HAPPILY_ADOPTED_RELIGION, -20),
	GD_INT_INIT(OPINION_WEIGHT_VASSAL_SAME_STATE_RELIGION, -10),
	GD_INT_INIT(OPINION_WEIGHT_VASSALAGE_VOLUNTARY_VASSAL_MOD, 120),
	GD_INT_INIT(OPINION_WEIGHT_MASTER_LIBERATED_ME_FROM_VASSALAGE, -50),
	GD_INT_INIT(OPINION_WEIGHT_VASSALAGE_THEY_PEACEFULLY_REVOKED, -25),
	GD_INT_INIT(OPINION_WEIGHT_VASSALAGE_THEY_FORCIBLY_REVOKED, 50),
	GD_INT_INIT(OPINION_WEIGHT_VASSALAGE_PEACEFULLY_REVOKED_NUM_TURNS_UNTIL_FORGOTTEN, 100),
	GD_INT_INIT(OPINION_WEIGHT_VASSALAGE_FORCIBLY_REVOKED_NUM_TURNS_UNTIL_FORGIVEN, 100),
	GD_INT_INIT(MASTER_DECLARED_WAR_ON_US_TURNS_UNTIL_FORGIVEN, 100),
	GD_INT_INIT(OPINION_WEIGHT_VASSALAGE_TOO_MANY_VASSALS, 20),
	GD_INT_INIT(APPROACH_WAR_PROXIMITY_NEIGHBORS, 200),
	GD_INT_INIT(APPROACH_WAR_PROXIMITY_CLOSE, 150),
	GD_INT_INIT(APPROACH_WAR_PROXIMITY_FAR, 100),
	GD_INT_INIT(APPROACH_WAR_PROXIMITY_DISTANT, 75),
	GD_INT_INIT(APPROACH_MULTIPLIER_PROXIMITY_NEIGHBORS, 150),
	GD_INT_INIT(APPROACH_MULTIPLIER_PROXIMITY_CLOSE, 125),
	GD_INT_INIT(APPROACH_MULTIPLIER_PROXIMITY_FAR, 75),
	GD_INT_INIT(APPROACH_MULTIPLIER_PROXIMITY_DISTANT, 50),
	GD_INT_INIT(CONQUEST_WAR_MULTIPLIER_TARGET_CAKEWALK, 250),
	GD_INT_INIT(CONQUEST_WAR_MULTIPLIER_TARGET_SOFT, 200),
	GD_INT_INIT(CONQUEST_WAR_MULTIPLIER_TARGET_FAVORABLE, 150),
	GD_INT_INIT(CONQUEST_WAR_MULTIPLIER_TARGET_AVERAGE, 125),
	GD_INT_INIT(CONQUEST_WAR_MULTIPLIER_TARGET_DIFFICULT, 100),
	GD_INT_INIT(CONQUEST_WAR_MULTIPLIER_TARGET_BAD, 75),
	GD_INT_INIT(CONQUEST_WAR_MULTIPLIER_TARGET_IMPOSSIBLE, 50),
	GD_INT_INIT(MAJOR_WAR_MULTIPLIER_TARGET_CAKEWALK, 200),
	GD_INT_INIT(MAJOR_WAR_MULTIPLIER_TARGET_SOFT, 150),
	GD_INT_INIT(MAJOR_WAR_MULTIPLIER_TARGET_FAVORABLE, 125),
	GD_INT_INIT(MAJOR_WAR_MULTIPLIER_TARGET_AVERAGE, 100),
	GD_INT_INIT(MAJOR_WAR_MULTIPLIER_TARGET_DIFFICULT, 75),
	GD_INT_INIT(MAJOR_WAR_MULTIPLIER_TARGET_BAD, 50),
	GD_INT_INIT(MAJOR_WAR_MULTIPLIER_TARGET_IMPOSSIBLE, 25),
	GD_INT_INIT(MINOR_APPROACH_WAR_TARGET_CAKEWALK, 150),
	GD_INT_INIT(MINOR_APPROACH_WAR_TARGET_SOFT, 125),
	GD_INT_INIT(MINOR_APPROACH_WAR_TARGET_FAVORABLE, 100),
	GD_INT_INIT(MINOR_APPROACH_WAR_TARGET_AVERAGE, 75),
	GD_INT_INIT(MINOR_APPROACH_WAR_TARGET_DIFFICULT, 50),
	GD_INT_INIT(MINOR_APPROACH_WAR_TARGET_BAD, 33),
	GD_INT_INIT(MINOR_APPROACH_WAR_TARGET_IMPOSSIBLE, 25),
	GD_INT_INIT(APPROACH_NEUTRAL_DEFAULT, 3),
	GD_INT_INIT(APPROACH_BIAS_FOR_CURRENT, 2),
	GD_INT_INIT(APPROACH_WAR_CURRENTLY_WAR, 4),
	GD_INT_INIT(APPROACH_RANDOM_PERCENT, 5),
	GD_INT_INIT(APPROACH_RANDOM_PERSONALITIES_PERCENT, 10),
	GD_INT_INIT(MINOR_APPROACH_IGNORE_DEFAULT, 2),
	GD_INT_INIT(APPROACH_WAR_VASSAL_PEACEFULLY_REVOKED, -4),
	GD_INT_INIT(APPROACH_DECEPTIVE_VASSAL_PEACEFULLY_REVOKED, 2),
	GD_INT_INIT(APPROACH_FRIENDLY_VASSAL_PEACEFULLY_REVOKED, 5),
	GD_INT_INIT(APPROACH_WAR_VASSAL_FORCEFULLY_REVOKED, 4),
	GD_INT_INIT(APPROACH_DECEPTIVE_VASSAL_FORCEFULLY_REVOKED, -10),
	GD_INT_INIT(APPROACH_FRIENDLY_VASSAL_FORCEFULLY_REVOKED, -10),
	GD_INT_INIT(APPROACH_WAR_TOO_MANY_VASSALS, 20),
	GD_INT_INIT(APPROACH_GUARDED_TOO_MANY_VASSALS, 20),
	GD_INT_INIT(APPROACH_HOSTILE_BUYING_PRICE_MODIFIER, 50),
	GD_INT_INIT(APPROACH_GUARDED_BUYING_PRICE_MODIFIER, 80),
	GD_INT_INIT(APPROACH_AFRAID_BUYING_PRICE_MODIFIER, 125),
	GD_INT_INIT(APPROACH_NEUTRAL_BUYING_PRICE_MODIFIER, 100),
	GD_INT_INIT(APPROACH_FRIENDLY_BUYING_PRICE_MODIFIER, 125),
	GD_INT_INIT(APPROACH_HOSTILE_SELLING_PRICE_MODIFIER, 200),
	GD_INT_INIT(APPROACH_GUARDED_SELLING_PRICE_MODIFIER, 125),
	GD_INT_INIT(APPROACH_AFRAID_SELLING_PRICE_MODIFIER, 80),
	GD_INT_INIT(APPROACH_NEUTRAL_SELLING_PRICE_MODIFIER, 100),
	GD_INT_INIT(APPROACH_FRIENDLY_SELLING_PRICE_MODIFIER, 80),
	GD_INT_INIT(CLOSE_TO_DOMINATION_VICTORY_THRESHOLD, 50),
	GD_INT_INIT(CLOSE_TO_DIPLOMATIC_VICTORY_THRESHOLD, 55),
	GD_INT_INIT(CLOSE_TO_SCIENCE_VICTORY_THRESHOLD, 80),
	GD_INT_INIT(CLOSE_TO_CULTURE_VICTORY_THRESHOLD, 60),
	GD_INT_INIT(COOP_WAR_DESIRE_THRESHOLD, 40),
	GD_INT_INIT(AI_WORLD_LEADER_BASE_WEIGHT_SELF, 1000),
	GD_INT_INIT(REQUEST_PEACE_TURN_THRESHOLD, 20),
	GD_INT_INIT(REQUEST_PEACE_THRESHOLD_REDUCTION_PER_WAR, 2),
	GD_INT_INIT(REQUEST_PEACE_LEEWAY_THRESHOLD, 17),
	GD_INT_INIT(REQUEST_PEACE_LEEWAY_THRESHOLD_REDUCTION_PER_WAR, 3),
	GD_INT_INIT(WAR_MAJOR_MINIMUM_TURNS, 10),
	GD_INT_INIT(WAR_MINOR_MINIMUM_TURNS, 1),
	GD_INT_INIT(WAR_MINOR_PEACE_BLOCKED_TURNS, 2),
	GD_INT_INIT(PLEDGE_BROKEN_MINIMUM_TURNS, 20),
	GD_INT_INIT(PLEDGE_BROKEN_MINIMUM_TURNS_BULLYING, 0),
	GD_INT_INIT(DEFENSIVE_PACT_LIMIT_BASE, 99),
	GD_INT_INIT(DEFENSIVE_PACT_LIMIT_SCALER, 0),
	GD_INT_INIT(AI_DEFENSIVE_PACT_LIMIT_BASE, 2),
	GD_INT_INIT(AI_DEFENSIVE_PACT_LIMIT_SCALER, 10),
	GD_INT_INIT(PEACE_WILLINGNESS_OFFER_THRESHOLD_UN_SURRENDER, 100),
	GD_INT_INIT(PEACE_WILLINGNESS_OFFER_THRESHOLD_CAPITULATION, 90),
	GD_INT_INIT(PEACE_WILLINGNESS_OFFER_THRESHOLD_CESSION, 80),
	GD_INT_INIT(PEACE_WILLINGNESS_OFFER_THRESHOLD_SURRENDER, 70),
	GD_INT_INIT(PEACE_WILLINGNESS_OFFER_THRESHOLD_SUBMISSION, 60),
	GD_INT_INIT(PEACE_WILLINGNESS_OFFER_THRESHOLD_BACKDOWN, 40),
	GD_INT_INIT(PEACE_WILLINGNESS_OFFER_THRESHOLD_SETTLEMENT, 30),
	GD_INT_INIT(PEACE_WILLINGNESS_OFFER_THRESHOLD_ARMISTICE, 15),
	GD_INT_INIT(PEACE_WILLINGNESS_ACCEPT_THRESHOLD_UN_SURRENDER, 100),
	GD_INT_INIT(PEACE_WILLINGNESS_ACCEPT_THRESHOLD_CAPITULATION, 90),
	GD_INT_INIT(PEACE_WILLINGNESS_ACCEPT_THRESHOLD_CESSION, 80),
	GD_INT_INIT(PEACE_WILLINGNESS_ACCEPT_THRESHOLD_SURRENDER, 70),
	GD_INT_INIT(PEACE_WILLINGNESS_ACCEPT_THRESHOLD_SUBMISSION, 60),
	GD_INT_INIT(PEACE_WILLINGNESS_ACCEPT_THRESHOLD_BACKDOWN, 40),
	GD_INT_INIT(PEACE_WILLINGNESS_ACCEPT_THRESHOLD_SETTLEMENT, 30),
	GD_INT_INIT(PEACE_WILLINGNESS_ACCEPT_THRESHOLD_ARMISTICE, 15),
	GD_INT_INIT(WAR_DAMAGE_LEVEL_CITY_WEIGHT, 175),
	GD_INT_INIT(WAR_DAMAGE_LEVEL_INVOLVED_CITY_POP_MULTIPLIER, 150),
	GD_INT_INIT(WAR_DAMAGE_LEVEL_WORLD_WONDER_MULTIPLIER, 200),
	GD_INT_INIT(DEFAULT_WAR_VALUE_FOR_UNIT, 100),
	GD_INT_INIT(PILLAGED_TILE_BASE_WAR_VALUE, 40),
	GD_INT_INIT(STOLEN_TILE_BASE_WAR_VALUE, 80),
	GD_INT_INIT(MILITARY_AGGRESSIVE_POSTURE_THRESHOLD_INCREDIBLE, 12),
	GD_INT_INIT(MILITARY_AGGRESSIVE_POSTURE_THRESHOLD_HIGH, 8),
	GD_INT_INIT(MILITARY_AGGRESSIVE_POSTURE_THRESHOLD_MEDIUM, 6),
	GD_INT_INIT(MILITARY_AGGRESSIVE_POSTURE_THRESHOLD_LOW, 2),
	GD_INT_INIT(PLOT_BUYING_POSTURE_INCREDIBLE_THRESHOLD, 12),
	GD_INT_INIT(PLOT_BUYING_POSTURE_HIGH_THRESHOLD, 9),
	GD_INT_INIT(PLOT_BUYING_POSTURE_MEDIUM_THRESHOLD, 5),
	GD_INT_INIT(PLOT_BUYING_POSTURE_LOW_THRESHOLD, 3),
	GD_INT_INIT(MILITARY_RATING_STARTING_VALUE, 1000),
	GD_INT_INIT(MILITARY_RATING_PER_ADVANCED_START_ERA, 1000),
	GD_INT_INIT(MILITARY_RATING_MAXIMUM_BONUS, 100),
	GD_INT_INIT(MILITARY_RATING_MAXIMUM_PENALTY, -50),
	GD_INT_INIT(MILITARY_RATING_HUMAN_BUFFER_VALUE_PERCENT, 80),
	GD_INT_INIT(ECONOMIC_STRENGTH_RATIO_MULTIPLIER, 100),
	GD_INT_INIT(ECONOMIC_STRENGTH_IMMENSE_THRESHOLD, 300),
	GD_INT_INIT(ECONOMIC_STRENGTH_POWERFUL_THRESHOLD, 200),
	GD_INT_INIT(ECONOMIC_STRENGTH_STRONG_THRESHOLD, 126),
	GD_INT_INIT(ECONOMIC_STRENGTH_AVERAGE_THRESHOLD, 75),
	GD_INT_INIT(ECONOMIC_STRENGTH_POOR_THRESHOLD, 50),
	GD_INT_INIT(ECONOMIC_STRENGTH_WEAK_THRESHOLD, 33),
	GD_INT_INIT(MILITARY_STRENGTH_BASE, 30),
	GD_INT_INIT(MILITARY_STRENGTH_RATIO_MULTIPLIER, 100),
	GD_INT_INIT(MILITARY_STRENGTH_CITY_MOD, 33),
	GD_INT_INIT(MILITARY_STRENGTH_REDUCTION_PER_BOLDNESS, -3),
	GD_INT_INIT(MILITARY_STRENGTH_IMMENSE_THRESHOLD, 300),
	GD_INT_INIT(MILITARY_STRENGTH_POWERFUL_THRESHOLD, 200),
	GD_INT_INIT(MILITARY_STRENGTH_STRONG_THRESHOLD, 126),
	GD_INT_INIT(MILITARY_STRENGTH_AVERAGE_THRESHOLD, 75),
	GD_INT_INIT(MILITARY_STRENGTH_POOR_THRESHOLD, 50),
	GD_INT_INIT(MILITARY_STRENGTH_WEAK_THRESHOLD, 33),
	GD_INT_INIT(MILITARY_STRENGTH_MINOR_BACKUP_IMMENSE, 50),
	GD_INT_INIT(MILITARY_STRENGTH_MINOR_BACKUP_POWERFUL, 35),
	GD_INT_INIT(MILITARY_STRENGTH_MINOR_BACKUP_STRONG, 25),
	GD_INT_INIT(MILITARY_STRENGTH_MINOR_BACKUP_AVERAGE, 15),
	GD_INT_INIT(MILITARY_STRENGTH_MINOR_BACKUP_POOR, 0),
	GD_INT_INIT(MILITARY_STRENGTH_MINOR_BACKUP_WEAK, 0),
	GD_INT_INIT(MILITARY_STRENGTH_MINOR_BACKUP_PATHETIC, 0),
	GD_INT_INIT(MILITARY_STRENGTH_MINOR_BACKUP_NEIGHBORS, 100),
	GD_INT_INIT(MILITARY_STRENGTH_MAJOR_BACKUP_IMMENSE, 50),
	GD_INT_INIT(MILITARY_STRENGTH_MAJOR_BACKUP_POWERFUL, 35),
	GD_INT_INIT(MILITARY_STRENGTH_MAJOR_BACKUP_STRONG, 25),
	GD_INT_INIT(MILITARY_STRENGTH_MAJOR_BACKUP_AVERAGE, 15),
	GD_INT_INIT(MILITARY_STRENGTH_MAJOR_BACKUP_POOR, 10),
	GD_INT_INIT(MILITARY_STRENGTH_MAJOR_BACKUP_WEAK, 5),
	GD_INT_INIT(MILITARY_STRENGTH_MAJOR_BACKUP_PATHETIC, 0),
	GD_INT_INIT(MILITARY_STRENGTH_MAJOR_BACKUP_NEIGHBORS, 200),
	GD_INT_INIT(MILITARY_STRENGTH_MAJOR_BACKUP_CLOSE, 100),
	GD_INT_INIT(MILITARY_STRENGTH_MAJOR_BACKUP_FAR, 50),
	GD_INT_INIT(MILITARY_STRENGTH_MAJOR_BACKUP_DISTANT, 0),
	GD_INT_INIT(MILITARY_STRENGTH_BACKUP_ALREADY_WAR_EACH_PLAYER, 30),
	GD_INT_INIT(MILITARY_STRENGTH_BACKUP_ALREADY_WAR_MINIMUM, 20),
	GD_INT_INIT(TARGET_MINOR_BACKUP_IMMENSE, 50),
	GD_INT_INIT(TARGET_MINOR_BACKUP_POWERFUL, 35),
	GD_INT_INIT(TARGET_MINOR_BACKUP_STRONG, 25),
	GD_INT_INIT(TARGET_MINOR_BACKUP_AVERAGE, 15),
	GD_INT_INIT(TARGET_MINOR_BACKUP_POOR, 0),
	GD_INT_INIT(TARGET_MINOR_BACKUP_WEAK, 0),
	GD_INT_INIT(TARGET_MINOR_BACKUP_PATHETIC, 0),
	GD_INT_INIT(TARGET_MINOR_BACKUP_NEIGHBORS, 100),
	GD_INT_INIT(TARGET_MAJOR_BACKUP_IMMENSE, 50),
	GD_INT_INIT(TARGET_MAJOR_BACKUP_POWERFUL, 35),
	GD_INT_INIT(TARGET_MAJOR_BACKUP_STRONG, 25),
	GD_INT_INIT(TARGET_MAJOR_BACKUP_AVERAGE, 15),
	GD_INT_INIT(TARGET_MAJOR_BACKUP_POOR, 10),
	GD_INT_INIT(TARGET_MAJOR_BACKUP_WEAK, 5),
	GD_INT_INIT(TARGET_MAJOR_BACKUP_PATHETIC, 0),
	GD_INT_INIT(TARGET_MAJOR_BACKUP_NEIGHBORS, 200),
	GD_INT_INIT(TARGET_MAJOR_BACKUP_CLOSE, 100),
	GD_INT_INIT(TARGET_MAJOR_BACKUP_FAR, 50),
	GD_INT_INIT(TARGET_MAJOR_BACKUP_DISTANT, 0),
	GD_INT_INIT(TARGET_ALREADY_WAR_EACH_PLAYER, 30),
	GD_INT_INIT(TARGET_ALREADY_WAR_MINIMUM, 20),
	GD_INT_INIT(TARGET_ECONOMIC_MOD, 100),
	GD_INT_INIT(TARGET_CITY_MOD, 33),
	GD_INT_INIT(TARGET_VALUE_RATIO_MULTIPLIER, 100),
	GD_INT_INIT(TARGET_VALUE_REDUCTION_PER_BOLDNESS, -3),
	GD_INT_INIT(TARGET_NEIGHBORS, 3),
	GD_INT_INIT(TARGET_NEIGHBORS_DIVISOR, 4),
	GD_INT_INIT(TARGET_CLOSE, 1),
	GD_INT_INIT(TARGET_CLOSE_DIVISOR, 1),
	GD_INT_INIT(TARGET_FAR, 3),
	GD_INT_INIT(TARGET_FAR_DIVISOR, 2),
	GD_INT_INIT(TARGET_DISTANT, 2),
	GD_INT_INIT(TARGET_DISTANT_DIVISOR, 1),
	GD_INT_INIT(TARGET_IMPOSSIBLE_THRESHOLD, 300),
	GD_INT_INIT(TARGET_BAD_THRESHOLD, 200),
	GD_INT_INIT(TARGET_DIFFICULT_THRESHOLD, 126),
	GD_INT_INIT(TARGET_AVERAGE_THRESHOLD, 75),
	GD_INT_INIT(TARGET_FAVORABLE_THRESHOLD, 50),
	GD_INT_INIT(TARGET_SOFT_THRESHOLD, 33),
	GD_INT_INIT(WARMONGER_THREAT_CRITICAL_THRESHOLD, 200),
	GD_INT_INIT(WARMONGER_THREAT_SEVERE_THRESHOLD, 140),
	GD_INT_INIT(WARMONGER_THREAT_MAJOR_THRESHOLD, 80),
	GD_INT_INIT(WARMONGER_THREAT_MINOR_THRESHOLD, 20),
	GD_INT_INIT(WARMONGER_THREAT_MINOR_ATTACKED_WEIGHT, 5),
	GD_INT_INIT(WARMONGER_THREAT_MAJOR_ATTACKED_WEIGHT, 10),
	GD_INT_INIT(WARMONGER_THREAT_USED_NUKE_WEIGHT, 20),
	GD_INT_INIT(WARMONGER_THREAT_CITY_VALUE_MULTIPLIER, 100),
	GD_INT_INIT(WARMONGER_THREAT_CAPITAL_CITY_PERCENT, 150),
	GD_INT_INIT(WARMONGER_THREAT_SHARED_FATE_PERCENT, 200),
	GD_INT_INIT(WARMONGER_THREAT_LIBERATED_TEAM_BONUS_PERCENT, 200),
	GD_INT_INIT(WARMONGER_THREAT_COOP_WAR_PERCENT, 10),
	GD_INT_INIT(WARMONGER_THREAT_MODIFIER_LARGE, 75),
	GD_INT_INIT(WARMONGER_THREAT_MODIFIER_MEDIUM, 50),
	GD_INT_INIT(WARMONGER_THREAT_MODIFIER_SMALL, 25),
	GD_INT_INIT(WARMONGER_THREAT_MODIFIER_NEGATIVE_SMALL, -25),
	GD_INT_INIT(WARMONGER_THREAT_MODIFIER_NEGATIVE_MEDIUM, -50),
	GD_INT_INIT(WARMONGER_THREAT_ATTACKER_STRENGTH_IMMENSE, 100),
	GD_INT_INIT(WARMONGER_THREAT_ATTACKER_STRENGTH_POWERFUL, 75),
	GD_INT_INIT(WARMONGER_THREAT_ATTACKER_STRENGTH_STRONG, 50),
	GD_INT_INIT(WARMONGER_THREAT_ATTACKER_STRENGTH_AVERAGE, 33),
	GD_INT_INIT(WARMONGER_THREAT_ATTACKER_STRENGTH_POOR, 0),
	GD_INT_INIT(WARMONGER_THREAT_ATTACKER_STRENGTH_WEAK, -25),
	GD_INT_INIT(WARMONGER_THREAT_ATTACKER_STRENGTH_PATHETIC, -50),
	GD_INT_INIT(WARMONGER_THREAT_DEFENDER_STRENGTH_IMMENSE, -75),
	GD_INT_INIT(WARMONGER_THREAT_DEFENDER_STRENGTH_POWERFUL, -50),
	GD_INT_INIT(WARMONGER_THREAT_DEFENDER_STRENGTH_STRONG, -25),
	GD_INT_INIT(WARMONGER_THREAT_DEFENDER_STRENGTH_AVERAGE, 0),
	GD_INT_INIT(WARMONGER_THREAT_STRENGTH_DECAY_IMMENSE, 50),
	GD_INT_INIT(WARMONGER_THREAT_STRENGTH_DECAY_POWERFUL, 75),
	GD_INT_INIT(WARMONGER_THREAT_STRENGTH_DECAY_STRONG, 100),
	GD_INT_INIT(WARMONGER_THREAT_STRENGTH_DECAY_AVERAGE, 150),
	GD_INT_INIT(WARMONGER_THREAT_STRENGTH_DECAY_POOR, 200),
	GD_INT_INIT(WARMONGER_THREAT_STRENGTH_DECAY_WEAK, 250),
	GD_INT_INIT(WARMONGER_THREAT_STRENGTH_DECAY_PATHETIC, 300),
	GD_INT_INIT(WARMONGER_THREAT_PER_TURN_DECAY, -2),
	GD_INT_INIT(WARMONGER_THREAT_CRITICAL_PERCENT_THRESHOLD, 33),
	GD_INT_INIT(WARMONGER_THREAT_SEVERE_PERCENT_THRESHOLD, 25),
	GD_INT_INIT(WARMONGER_THREAT_PER_TURN_DECAY_INCREASED, 200),
	GD_INT_INIT(WARMONGER_THREAT_PER_TURN_DECAY_DECREASED, 50),
	GD_INT_INIT(WARMONGER_THREAT_ATTACKED_WEIGHT_WORLD_WAR, 200),
	GD_INT_INIT(WARMONGER_THREAT_ATTACKED_WEIGHT_WORLD_PEACE, 50),
	GD_INT_INIT(WARMONGER_THREAT_ATTACKED_SANCTIONED_PLAYER, 50),
	GD_INT_INIT(LAND_DISPUTE_FIERCE_THRESHOLD, 8),
	GD_INT_INIT(LAND_DISPUTE_STRONG_THRESHOLD, 4),
	GD_INT_INIT(LAND_DISPUTE_WEAK_THRESHOLD, 1),
	GD_INT_INIT(VICTORY_DISPUTE_FIERCE_THRESHOLD, 80),
	GD_INT_INIT(VICTORY_DISPUTE_STRONG_THRESHOLD, 50),
	GD_INT_INIT(VICTORY_DISPUTE_WEAK_THRESHOLD, 30),
	GD_INT_INIT(VICTORY_BLOCK_FIERCE_THRESHOLD, 40),
	GD_INT_INIT(VICTORY_BLOCK_STRONG_THRESHOLD, 30),
	GD_INT_INIT(VICTORY_BLOCK_WEAK_THRESHOLD, 20),
	GD_INT_INIT(TECH_BLOCK_FIERCE_THRESHOLD, 30),
	GD_INT_INIT(TECH_BLOCK_STRONG_THRESHOLD, 20),
	GD_INT_INIT(TECH_BLOCK_WEAK_THRESHOLD, 10),
	GD_INT_INIT(POLICY_BLOCK_FIERCE_THRESHOLD, 24),
	GD_INT_INIT(POLICY_BLOCK_STRONG_THRESHOLD, 16),
	GD_INT_INIT(POLICY_BLOCK_WEAK_THRESHOLD, 8),
	GD_INT_INIT(WONDER_DISPUTE_FIERCE_THRESHOLD, 24),
	GD_INT_INIT(WONDER_DISPUTE_STRONG_THRESHOLD, 12),
	GD_INT_INIT(WONDER_DISPUTE_WEAK_THRESHOLD, 1),
	GD_INT_INIT(MINOR_CIV_DISPUTE_FIERCE_THRESHOLD, 1400),
	GD_INT_INIT(MINOR_CIV_DISPUTE_STRONG_THRESHOLD, 1000),
	GD_INT_INIT(MINOR_CIV_DISPUTE_WEAK_THRESHOLD, 700),
	GD_INT_INIT(LAND_DISPUTE_CRAMPED_MULTIPLIER, 50),
	GD_INT_INIT(VICTORY_DISPUTE_GRAND_STRATEGY_MATCH_POSITIVE, 25),
	GD_INT_INIT(VICTORY_DISPUTE_GRAND_STRATEGY_MATCH_LIKELY, 15),
	GD_INT_INIT(VICTORY_DISPUTE_GRAND_STRATEGY_MATCH_UNSURE, 5),
	GD_INT_INIT(VICTORY_BLOCK_GRAND_STRATEGY_DIFFERENCE_POSITIVE, 20),
	GD_INT_INIT(VICTORY_BLOCK_GRAND_STRATEGY_DIFFERENCE_LIKELY, 15),
	GD_INT_INIT(VICTORY_BLOCK_GRAND_STRATEGY_DIFFERENCE_UNSURE, 5),
	GD_INT_INIT(COOP_WAR_SOON_COUNTER, 10),
	GD_INT_INIT(COOP_WAR_LOCKED_LENGTH, 15),
	GD_INT_INIT(DEMAND_TURN_LIMIT_MIN, 20),
	GD_INT_INIT(DEMAND_TURN_LIMIT_RAND, 10),
	GD_INT_INIT(DONT_SETTLE_FLAVOR_BASE, 8),
	GD_INT_INIT(DONT_SETTLE_FLAVOR_MULTIPLIER, 5),
	GD_INT_INIT(DONT_SETTLE_FRIENDLY, 30),
	GD_INT_INIT(DONT_SETTLE_STRENGTH_PATHETIC, -30),
	GD_INT_INIT(DONT_SETTLE_STRENGTH_WEAK, -20),
	GD_INT_INIT(DONT_SETTLE_STRENGTH_POOR, -10),
	GD_INT_INIT(DONT_SETTLE_STRENGTH_AVERAGE, 0),
	GD_INT_INIT(DONT_SETTLE_STRENGTH_STRONG, 25),
	GD_INT_INIT(DONT_SETTLE_STRENGTH_POWERFUL, 40),
	GD_INT_INIT(DONT_SETTLE_STRENGTH_IMMENSE, 60),
	GD_INT_INIT(DONT_SETTLE_MOD_MILITARY_POSTURE_NONE, 100),
	GD_INT_INIT(DONT_SETTLE_MOD_MILITARY_POSTURE_LOW, 100),
	GD_INT_INIT(DONT_SETTLE_MOD_MILITARY_POSTURE_MEDIUM, 150),
	GD_INT_INIT(DONT_SETTLE_MOD_MILITARY_POSTURE_HIGH, 200),
	GD_INT_INIT(DONT_SETTLE_MOD_MILITARY_POSTURE_INCREDIBLE, 300),
	GD_INT_INIT(JUST_MET_TURN_BUFFER, 10),
	GD_INT_INIT(DOF_TURN_BUFFER, 50),
	GD_INT_INIT(DOF_TURN_BUFFER_REDUCTION_PER_ERA, -5),
	GD_INT_INIT(EACH_GOLD_VALUE_PERCENT, 100),
	GD_INT_INIT(EACH_GOLD_PER_TURN_VALUE_PERCENT, 5),
	GD_INT_INIT(DEMAND_LIMIT_MAX_VALUE, 200),
	GD_INT_INIT(DEMAND_LIMIT_GAMEPROGRESS_SCALING, 20),
	GD_INT_INIT(MOVE_TROOPS_MEMORY_TURN_EXPIRATION, 20),
	GD_INT_INIT(MILITARY_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN, 40),
	GD_INT_INIT(MILITARY_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN, 80),
	GD_INT_INIT(EXPANSION_BICKER_TIMEOUT, 30),
	GD_INT_INIT(EXPANSION_BICKER_RANGE_HIGH, 7),
	GD_INT_INIT(EXPANSION_BICKER_RANGE_MEDIUM, 6),
	GD_INT_INIT(EXPANSION_BICKER_RANGE_LOW, 5),
	GD_INT_INIT(EXPANSION_PROMISE_TURNS_EFFECTIVE, 50),
	GD_INT_INIT(EXPANSION_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN, 30),
	GD_INT_INIT(EXPANSION_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN, 50),
	GD_INT_INIT(BORDER_PROMISE_TURNS_EFFECTIVE, 50),
	GD_INT_INIT(BORDER_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN, 30),
	GD_INT_INIT(BORDER_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN, 50),
	GD_INT_INIT(BULLY_CS_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN, 30),
	GD_INT_INIT(BULLY_CS_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN, 50),
	GD_INT_INIT(ATTACK_CS_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN, 40),
	GD_INT_INIT(ATTACK_CS_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN, 60),
	GD_INT_INIT(SPY_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN, 30),
	GD_INT_INIT(SPY_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN, 50),
	GD_INT_INIT(CONVERT_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN, 30),
	GD_INT_INIT(CONVERT_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN, 50),
	GD_INT_INIT(DIGGING_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN, 30),
	GD_INT_INIT(DIGGING_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN, 50),
	GD_INT_INIT(COOP_WAR_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN, 60),
	GD_INT_INIT(DOF_BROKEN_TURNS_UNTIL_FORGIVEN, 50),
	GD_INT_INIT(DOF_BROKEN_TURNS_UNTIL_FORGIVEN_FRIENDS, 10),
	GD_INT_INIT(DOF_BROKEN_BACKSTAB_TIMER, 10),
	GD_INT_INIT(FRIEND_DENOUNCED_US_TURNS_UNTIL_FORGIVEN, 75),
	GD_INT_INIT(FRIEND_DECLARED_WAR_ON_US_TURNS_UNTIL_FORGIVEN, 100),
	GD_INT_INIT(PLUNDERED_TRADE_ROUTE_TURNS_UNTIL_FORGIVEN, 15),
	GD_INT_INIT(RETURNED_CIVILIAN_TURNS_UNTIL_FORGOTTEN, 50),
	GD_INT_INIT(BUILT_LANDMARK_TURNS_UNTIL_FORGOTTEN, 50),
	GD_INT_INIT(LIBERATED_CITY_TURNS_UNTIL_FORGOTTEN, 75),
	GD_INT_INIT(FORGAVE_FOR_SPYING_TURNS_UNTIL_FORGOTTEN, 30),
	GD_INT_INIT(SHARED_INTRIGUE_TURNS_UNTIL_FORGOTTEN, 50),
	GD_INT_INIT(ROBBED_US_TURNS_UNTIL_FORGIVEN, 50),
	GD_INT_INIT(PLOTTED_AGAINST_US_TURNS_UNTIL_FORGIVEN, 14),
	GD_INT_INIT(BEATEN_TO_WONDER_TURNS_UNTIL_FORGIVEN, 60),
	GD_INT_INIT(LOWERED_OUR_INFLUENCE_TURNS_UNTIL_FORGIVEN, 40),
	GD_INT_INIT(PERFORMED_COUP_TURNS_UNTIL_FORGIVEN, 50),
	GD_INT_INIT(EXCAVATED_ARTIFACT_TURNS_UNTIL_FORGIVEN, 50),
	GD_INT_INIT(MADE_DEMAND_TURNS_UNTIL_FORGIVEN, 50),
	GD_INT_INIT(RELIGIOUS_CONVERSION_TURNS_UNTIL_FORGIVEN, 25),
	GD_INT_INIT(CAN_WORK_WATER_FROM_GAME_START, 1),
	GD_INT_INIT(NAVAL_PLOT_BLOCKADE_RANGE, 2),
	GD_INT_INIT(EVENT_MESSAGE_TIME, 10),
	GD_INT_INIT(START_YEAR, -4000),
	GD_INT_INIT(WEEKS_PER_MONTHS, 4),
	GD_INT_INIT(HIDDEN_START_TURN_OFFSET, 0),
	GD_INT_INIT(RECON_VISIBILITY_RANGE, 6),
	GD_INT_INIT(PLOT_VISIBILITY_RANGE, 1),
	GD_INT_INIT(UNIT_VISIBILITY_RANGE, 1),
	GD_INT_INIT(AIR_UNIT_REBASE_RANGE_MULTIPLIER, 200),
	GD_INT_INIT(MOUNTAIN_SEE_FROM_CHANGE, 2),
	GD_INT_INIT(MOUNTAIN_SEE_THROUGH_CHANGE, 2),
	GD_INT_INIT(HILLS_SEE_FROM_CHANGE, 1),
	GD_INT_INIT(HILLS_SEE_THROUGH_CHANGE, 1),
	GD_INT_INIT(SEAWATER_SEE_FROM_CHANGE, 1),
	GD_INT_INIT(SEAWATER_SEE_THROUGH_CHANGE, 1),
	GD_INT_INIT(MOVE_DENOMINATOR, 60),
	GD_INT_INIT(STARTING_DISTANCE_PERCENT, 12),
	GD_INT_INIT(MIN_CIV_STARTING_DISTANCE, 10),
	GD_INT_INIT(MIN_CITY_RANGE, 3),
	GD_INT_INIT(CITY_STARTING_RINGS, 1),
	GD_INT_INIT(OWNERSHIP_SCORE_DURATION_THRESHOLD, 20),
	GD_INT_INIT(NUM_VICTORY_POINT_AWARDS, 5),
	GD_INT_INIT(NUM_OR_TECH_PREREQS, 3),
	GD_INT_INIT(NUM_AND_TECH_PREREQS, 6),
	GD_INT_INIT(NUM_UNIT_AND_TECH_PREREQS, 3),
	GD_INT_INIT(NUM_BUILDING_AND_TECH_PREREQS, 3),
	GD_INT_INIT(NUM_BUILDING_RESOURCE_PREREQS, 5),
	GD_INT_INIT(MAX_WORLD_WONDERS_PER_CITY, -1),
	GD_INT_INIT(MAX_TEAM_WONDERS_PER_CITY, -1),
	GD_INT_INIT(MAX_NATIONAL_WONDERS_PER_CITY, -1),
	GD_INT_INIT(MAX_NATIONAL_WONDERS_PER_CITY_FOR_OCC, -1),
	GD_INT_INIT(MAX_BUILDINGS_PER_CITY, -1),
	GD_INT_INIT(INITIAL_CITY_POPULATION, 1),
	GD_INT_INIT(BASE_CITY_AIR_STACKING, 6),
	GD_INT_INIT(CITY_CAPTURE_POPULATION_PERCENT, 50),
	GD_INT_INIT(BASE_CITY_GROWTH_THRESHOLD, 15),
	GD_INT_INIT(FOOD_CONSUMPTION_PER_POPULATION, 2),
	GD_INT_INIT(HAPPINESS_PER_NATURAL_WONDER, 1),
	GD_INT_INIT(HAPPINESS_PER_EXTRA_LUXURY, 0),
	GD_INT_INIT(UNHAPPINESS_PER_POPULATION, 1),
	GD_INT_INIT(UNHAPPINESS_PER_CITY, 3),
	GD_INT_INIT(UNHAPPINESS_PER_CAPTURED_CITY, 5),
	GD_INT_INIT(UNHAPPY_GROWTH_PENALTY, -75),
	GD_INT_INIT(VERY_UNHAPPY_GROWTH_PENALTY, -100),
	GD_INT_INIT(VERY_UNHAPPY_PRODUCTION_PENALTY_PER_UNHAPPY, -2),
	GD_INT_INIT(VERY_UNHAPPY_MAX_PRODUCTION_PENALTY, -40),
	GD_INT_INIT(VERY_UNHAPPY_GOLD_PENALTY_PER_UNHAPPY, -2),
	GD_INT_INIT(VERY_UNHAPPY_MAX_GOLD_PENALTY, -40),
	GD_INT_INIT(VERY_UNHAPPY_COMBAT_PENALTY_PER_UNHAPPY, -2),
	GD_INT_INIT(VERY_UNHAPPY_MAX_COMBAT_PENALTY, -20),
	GD_INT_INIT(VERY_UNHAPPY_CANT_TRAIN_SETTLERS, 1),
	GD_INT_INIT(UNHAPPY_THRESHOLD, 50),
	GD_INT_INIT(VERY_UNHAPPY_THRESHOLD, -10),
	GD_INT_INIT(SUPER_UNHAPPY_THRESHOLD, -20),
	GD_INT_INIT(LOCAL_HAPPINESS_FOOD_MODIFIER, 2),
	GD_INT_INIT(LOCAL_UNHAPPINESS_FOOD_MODIFIER, 10),
	GD_INT_INIT(LOCAL_UNHAPPY_SETTLER_PRODUCTION_PENALTY, -10),
	GD_INT_INIT(LOCAL_UNHAPPY_COMBAT_UNIT_PRODUCTION_PENALTY, -10),
	GD_INT_INIT(UNHAPPY_MAX_UNIT_PRODUCTION_PENALTY, -75),
	GD_INT_INIT(GREAT_MUSICIAN_BLAST_HAPPINESS_CAPITAL, 0),
	GD_INT_INIT(GREAT_MUSICIAN_BLAST_HAPPINESS_GLOBAL, 0),
	GD_INT_INIT(YIELD_MEDIAN_PERCENTILE, 50),
	GD_INT_INIT(YIELD_MEDIAN_MIN_POP_REQUIREMENT, 3),
	GD_INT_INIT(TECH_COUNT_MEDIAN_PERCENTILE, 50),
	GD_INT_INIT(DISTRESS_MEDIAN_BASE_MODIFIER, 100),
	GD_INT_INIT(POVERTY_MEDIAN_BASE_MODIFIER, 100),
	GD_INT_INIT(ILLITERACY_MEDIAN_BASE_MODIFIER, 100),
	GD_INT_INIT(BOREDOM_MEDIAN_BASE_MODIFIER, 100),
	GD_INT_INIT(CAPITAL_NEED_MODIFIER, 25),
	GD_INT_INIT(TECH_NEED_MODIFIER_PERCENT_RESEARCHED, 0),
	GD_INT_INIT(TECH_NEED_MODIFIER_PER_TECH_ABOVE_MEDIAN, 0),
	GD_INT_INIT(TECH_NEED_MODIFIER_PER_TECH_BELOW_MEDIAN, 0),
	GD_INT_INIT(CITY_SIZE_NEED_MODIFIER, 0),
	GD_INT_INIT(EMPIRE_SIZE_NEED_MODIFIER_CITIES, 500),
	GD_INT_INIT(EMPIRE_SIZE_NEED_MODIFIER_POP, 125),
	GD_INT_INIT(EMPIRE_SIZE_NEED_MODIFIER_CAP, 100000),
	GD_INT_INIT(UNHAPPINESS_PER_SPECIALIST, 100),
	GD_INT_INIT(UNHAPPINESS_PER_X_PUPPET_CITIZENS, 4),
	GD_INT_INIT(WAR_WEARINESS_POPULATION_PERCENT_CAP, 34),
	GD_INT_INIT(UPRISING_COUNTER_MIN, 4),
	GD_INT_INIT(UPRISING_COUNTER_POSSIBLE, 3),
	GD_INT_INIT(UPRISING_NUM_BASE, 100),
	GD_INT_INIT(UPRISING_NUM_CITY_COUNT, 20),
	GD_INT_INIT(REVOLT_COUNTER_MIN, 10),
	GD_INT_INIT(STRATEGIC_RESOURCE_EXHAUSTED_PENALTY, -50),
	GD_INT_INIT(WLTKD_GROWTH_MULTIPLIER, 25),
	GD_INT_INIT(INDUSTRIAL_ROUTE_PRODUCTION_MOD, 25),
	GD_INT_INIT(RESOURCE_DEMAND_COUNTDOWN_BASE, 15),
	GD_INT_INIT(RESOURCE_DEMAND_COUNTDOWN_CAPITAL_ADD, 25),
	GD_INT_INIT(RESOURCE_DEMAND_COUNTDOWN_RAND, 10),
	GD_INT_INIT(GREAT_GENERAL_RANGE, 2),
	GD_INT_INIT(GREAT_GENERAL_STRENGTH_MOD, 15),
	GD_INT_INIT(BONUS_PER_ADJACENT_FRIEND, 10),
	GD_INT_INIT(POLICY_ATTACK_BONUS_MOD, 25),
	GD_INT_INIT(COMBAT_DAMAGE, 20),
	GD_INT_INIT(NONCOMBAT_UNIT_RANGED_DAMAGE, 40),
	GD_INT_INIT(NAVAL_COMBAT_DEFENDER_STRENGTH_MULTIPLIER, 100),
	GD_INT_INIT(INITIAL_GOLD_PER_UNIT_TIMES_100, 50),
	GD_INT_INIT(INITIAL_FREE_OUTSIDE_UNITS, 3),
	GD_INT_INIT(INITIAL_OUTSIDE_UNIT_GOLD_PERCENT, 0),
	GD_INT_INIT(UNIT_MAINTENANCE_GAME_MULTIPLIER, 8),
	GD_INT_INIT(UNIT_MAINTENANCE_GAME_EXPONENT_DIVISOR, 7),
	GD_INT_INIT(FREE_UNIT_HAPPINESS, 0),
	GD_INT_INIT(TRADE_ROUTE_BASE_GOLD, -100),
	GD_INT_INIT(TRADE_ROUTE_BASE_TARGET_TURNS, 30),
	GD_INT_INIT(TRADE_ROUTE_BASE_LAND_DISTANCE, 10),
	GD_INT_INIT(TRADE_ROUTE_BASE_LAND_MODIFIER, 0),
	GD_INT_INIT(TRADE_ROUTE_BASE_SEA_DISTANCE, 20),
	GD_INT_INIT(TRADE_ROUTE_BASE_SEA_MODIFIER, 100),
	GD_INT_INIT(TRADE_ROUTE_BASE_FOOD_VALUE, 300),
	GD_INT_INIT(TRADE_ROUTE_BASE_PRODUCTION_VALUE, 300),
	GD_INT_INIT(TRADE_ROUTE_SCIENCE_DIVISOR_TIMES100, 200),
	GD_INT_INIT(TRADE_ROUTE_CULTURE_DIVISOR_TIMES100, 200),
	GD_INT_INIT(TRADE_ROUTE_DIFFERENT_RESOURCE_VALUE, 50),
	GD_INT_INIT(TRADE_ROUTE_RIVER_CITY_MODIFIER, 25),
	GD_INT_INIT(TRADE_ROUTE_BASE_PLUNDER_GOLD, 100),
	GD_INT_INIT(TRADE_ROUTE_PLUNDER_TURNS_COUNTER, 30),
	GD_INT_INIT(TRADE_ROUTE_CS_ALLY_SCIENCE_DELTA, 1),
	GD_INT_INIT(TRADE_ROUTE_CS_FRIEND_SCIENCE_DELTA, 0),
	GD_INT_INIT(TRADE_ROUTE_CS_ALLY_CULTURE_DELTA, 1),
	GD_INT_INIT(TRADE_ROUTE_CS_FRIEND_CULTURE_DELTA, 0),
	GD_INT_INIT(TRADE_ROUTE_CS_ALLY_GOLD, 2),
	GD_INT_INIT(TRADE_ROUTE_CS_FRIEND_GOLD, 1),
	GD_INT_INIT(CITY_STATE_SCALE_PER_CITY_MOD, 0),
	GD_INT_INIT(TRADE_ROUTE_CAPITAL_POP_GOLD_MULTIPLIER, 15),
	GD_INT_INIT(TRADE_ROUTE_CITY_POP_GOLD_MULTIPLIER, 110),
	GD_INT_INIT(DEFICIT_UNIT_DISBANDING_THRESHOLD, -5),
	GD_INT_INIT(GOLDEN_AGE_BASE_THRESHOLD_INITIAL, 500),
	GD_INT_INIT(GOLDEN_AGE_BASE_THRESHOLD_HAPPINESS, 500),
	GD_INT_INIT(GOLDEN_AGE_EACH_GA_ADDITIONAL_HAPPINESS, 250),
	GD_INT_INIT(GOLDEN_AGE_THRESHOLD_CITY_MULTIPLIER, 1),
	GD_INT_INIT(GOLDEN_AGE_VISIBLE_THRESHOLD_DIVISOR, 5),
	GD_INT_INIT(BASE_GOLDEN_AGE_UNITS, 1),
	GD_INT_INIT(GOLDEN_AGE_UNITS_MULTIPLIER, 1),
	GD_INT_INIT(GOLDEN_AGE_LENGTH, 10),
	GD_INT_INIT(GOLDEN_AGE_GREAT_PEOPLE_MODIFIER, 100),
	GD_INT_INIT(MIN_UNIT_GOLDEN_AGE_TURNS, 3),
	GD_INT_INIT(GOLDEN_AGE_CULTURE_MODIFIER, 20),
	GD_INT_INIT(HILLS_EXTRA_MOVEMENT, 1),
	GD_INT_INIT(RIVER_EXTRA_MOVEMENT, 10),
	GD_INT_INIT(EXTRA_YIELD, 1),
	GD_INT_INIT(FORTIFY_MODIFIER_PER_TURN, 20),
	GD_INT_INIT(NUKE_FALLOUT_PROB, 50),
	GD_INT_INIT(NUKE_UNIT_DAMAGE_BASE, 30),
	GD_INT_INIT(NUKE_UNIT_DAMAGE_RAND_1, 40),
	GD_INT_INIT(NUKE_UNIT_DAMAGE_RAND_2, 40),
	GD_INT_INIT(NUKE_NON_COMBAT_DEATH_THRESHOLD, 6),
	GD_INT_INIT(NUKE_LEVEL1_POPULATION_DEATH_BASE, 30),
	GD_INT_INIT(NUKE_LEVEL1_POPULATION_DEATH_RAND_1, 20),
	GD_INT_INIT(NUKE_LEVEL1_POPULATION_DEATH_RAND_2, 20),
	GD_INT_INIT(NUKE_LEVEL2_POPULATION_DEATH_BASE, 60),
	GD_INT_INIT(NUKE_LEVEL2_POPULATION_DEATH_RAND_1, 10),
	GD_INT_INIT(NUKE_LEVEL2_POPULATION_DEATH_RAND_2, 10),
	GD_INT_INIT(NUKE_LEVEL2_ELIM_POPULATION_THRESHOLD, 5),
	GD_INT_INIT(NUKE_CITY_HIT_POINT_DAMAGE, 50),
	GD_INT_INIT(NUKE_BLAST_RADIUS, 2),
	GD_INT_INIT(TECH_COST_EXTRA_TEAM_MEMBER_MODIFIER, 50),
	GD_INT_INIT(TECH_COST_TOTAL_KNOWN_TEAM_MODIFIER, 30),
	GD_INT_INIT(TECH_COST_KNOWN_PREREQ_MODIFIER, 20),
	GD_INT_INIT(DIFFERENT_TEAM_FEATURE_PRODUCTION_PERCENT, 67),
	GD_INT_INIT(UNIT_PRODUCTION_PERCENT, 100),
	GD_INT_INIT(BUILDING_PRODUCTION_PERCENT, 100),
	GD_INT_INIT(PROJECT_PRODUCTION_PERCENT, 100),
	GD_INT_INIT(PRODUCTION_PENALTY_PER_UNIT_OVER_SUPPLY, 10),
	GD_INT_INIT(GROWTH_PENALTY_PER_UNIT_OVER_SUPPLY, 5),
	GD_INT_INIT(MAX_UNIT_SUPPLY_PRODMOD, 70),
	GD_INT_INIT(MAX_UNIT_SUPPLY_GROWTH_MOD, 70),
	GD_INT_INIT(UNIT_SUPPLY_BASE_TECH_REDUCTION_PER_ERA, 0),
	GD_INT_INIT(UNIT_SUPPLY_CITIES_TECH_REDUCTION_MULTIPLIER, 0),
	GD_INT_INIT(UNIT_SUPPLY_POPULATION_TECH_REDUCTION_MULTIPLIER, 0),
	GD_INT_INIT(UNIT_SUPPLY_WAR_WEARINESS_PERCENT_REDUCTION, 34),
	GD_INT_INIT(UNIT_SUPPLY_POPULATION_PUPPET_PERCENT, 100),
	GD_INT_INIT(MINOR_CIV_UNIT_SUPPLY_MODIFIER_CULTURED, 0),
	GD_INT_INIT(MINOR_CIV_UNIT_SUPPLY_MODIFIER_MILITARISTIC, 0),
	GD_INT_INIT(MINOR_CIV_UNIT_SUPPLY_MODIFIER_MARITIME, 0),
	GD_INT_INIT(MINOR_CIV_UNIT_SUPPLY_MODIFIER_MERCANTILE, 0),
	GD_INT_INIT(MINOR_CIV_UNIT_SUPPLY_MODIFIER_RELIGIOUS, 0),
	GD_INT_INIT(MINOR_CIV_UNIT_SUPPLY_MODIFIER_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_UNIT_SUPPLY_MODIFIER_NEUTRAL, 0),
	GD_INT_INIT(MINOR_CIV_UNIT_SUPPLY_MODIFIER_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_UNIT_SUPPLY_MODIFIER_IRRATIONAL, 0),
	GD_INT_INIT(MINOR_CIV_UNIT_SUPPLY_MULTIPLIER_PER_EXTRA_CITY, 0),
	GD_INT_INIT(UNIT_COST_WAR_WEARINESS_PERCENT_INCREASE, 75),
	GD_INT_INIT(MAXED_UNIT_GOLD_PERCENT, 100),
	GD_INT_INIT(MAXED_BUILDING_GOLD_PERCENT, 100),
	GD_INT_INIT(MAXED_PROJECT_GOLD_PERCENT, 300),
	GD_INT_INIT(CIRCUMNAVIGATE_FREE_MOVES, 0),
	GD_INT_INIT(BASE_CAPTURE_GOLD, 20),
	GD_INT_INIT(CAPTURE_GOLD_PER_POPULATION, 10),
	GD_INT_INIT(CAPTURE_GOLD_RAND1, 20),
	GD_INT_INIT(CAPTURE_GOLD_RAND2, 20),
	GD_INT_INIT(CAPTURE_GOLD_MAX_TURNS, 50),
	GD_INT_INIT(BARBARIAN_CITY_ATTACK_MODIFIER, 0),
	GD_INT_INIT(BUILDING_PRODUCTION_DECAY_TIME, 50),
	GD_INT_INIT(BUILDING_PRODUCTION_DECAY_PERCENT, 99),
	GD_INT_INIT(UNIT_PRODUCTION_DECAY_TIME, 10),
	GD_INT_INIT(UNIT_PRODUCTION_DECAY_PERCENT, 98),
	GD_INT_INIT(BASE_UNIT_UPGRADE_COST, 10),
	GD_INT_INIT(UNIT_UPGRADE_COST_PER_PRODUCTION, 2),
	GD_INT_INIT(UNIT_UPGRADE_COST_VISIBLE_DIVISOR, 5),
	GD_INT_INIT(UNIT_UPGRADE_COST_DISCOUNT_MAX, -75),
	GD_INT_INIT(RESEARCH_AGREEMENT_BOOST_DIVISOR, 3),
	GD_INT_INIT(MAX_INTERCEPTION_PROBABILITY, 100),
	GD_INT_INIT(MAX_EVASION_PROBABILITY, 90),
	GD_INT_INIT(MIN_WATER_SIZE_FOR_OCEAN, 10),
	GD_INT_INIT(WATER_POTENTIAL_CITY_WORK_FOR_AREA, 0),
	GD_INT_INIT(CITY_MAX_NUM_BUILDINGS, 1),
	GD_INT_INIT(CITY_MIN_SIZE_FOR_SETTLERS, 2),
	GD_INT_INIT(ADVANCED_START_ALLOW_UNITS_OUTSIDE_CITIES, 0),
	GD_INT_INIT(ADVANCED_START_MAX_UNITS_PER_CITY, 2),
	GD_INT_INIT(ADVANCED_START_CITY_COST, 84),
	GD_INT_INIT(ADVANCED_START_CITY_COST_INCREASE, 0),
	GD_INT_INIT(ADVANCED_START_POPULATION_COST, 150),
	GD_INT_INIT(ADVANCED_START_POPULATION_COST_INCREASE, 0),
	GD_INT_INIT(ADVANCED_START_VISIBILITY_COST, 2),
	GD_INT_INIT(ADVANCED_START_VISIBILITY_COST_INCREASE, 3),
	GD_INT_INIT(ADVANCED_START_CITY_PLACEMENT_MAX_RANGE, 6),
	GD_INT_INIT(NEW_CITY_BUILDING_VALUE_MODIFIER, -60),
	GD_INT_INIT(PATH_DAMAGE_WEIGHT, 0),
	GD_INT_INIT(PUPPET_GROWTH_MODIFIER, 0),
	GD_INT_INIT(PUPPET_PRODUCTION_MODIFIER, 0),
	GD_INT_INIT(PUPPET_SCIENCE_MODIFIER, -25),
	GD_INT_INIT(PUPPET_CULTURE_MODIFIER, -25),
	GD_INT_INIT(PUPPET_GOLD_MODIFIER, 0),
	GD_INT_INIT(PUPPET_FAITH_MODIFIER, 0),
	GD_INT_INIT(PUPPET_TOURISM_MODIFIER, 0),
	GD_INT_INIT(PUPPET_GOLDEN_AGE_MODIFIER, 0),
	GD_INT_INIT(BLOCKADE_GOLD_PENALTY, 0),
	GD_INT_INIT(BASE_POLICY_COST, 25),
	GD_INT_INIT(POLICY_COST_INCREASE_TO_BE_EXPONENTED, 3),
	GD_INT_INIT(POLICY_COST_VISIBLE_DIVISOR, 5),
	GD_INT_INIT(SWITCH_POLICY_BRANCHES_ANARCHY_TURNS, 2),
	GD_INT_INIT(SWITCH_POLICY_BRANCHES_TENETS_LOST, 2),
	GD_INT_INIT(POLICY_COST_DISCOUNT_MAX, -75),
	GD_INT_INIT(GOLD_PURCHASE_GOLD_PER_PRODUCTION, 30),
	GD_INT_INIT(GOLD_PURCHASE_VISIBLE_DIVISOR, 10),
	GD_INT_INIT(PROJECT_PURCHASING_DISABLED, 1),
	GD_INT_INIT(INFLUENCE_MOUNTAIN_COST, 3),
	GD_INT_INIT(INFLUENCE_HILL_COST, 1),
	GD_INT_INIT(INFLUENCE_RIVER_COST, 1),
	GD_INT_INIT(NUM_RESOURCE_QUANTITY_TYPES, 4),
	GD_INT_INIT(SCIENCE_PER_POPULATION, 1),
	GD_INT_INIT(RESEARCH_AGREEMENT_MOD, 0),
	GD_INT_INIT(BALANCE_BARBARIAN_HEAL_RATE, 0),
	GD_INT_INIT(BARBARIAN_CAMP_FIRST_TURN_PERCENT_OF_TARGET_TO_ADD, 33),
	GD_INT_INIT(BARBARIAN_CAMP_FIRST_TURN_PERCENT_PER_ERA, 0),
	GD_INT_INIT(BARBARIAN_CAMP_MINIMUM_ISLAND_SIZE, 2),
	GD_INT_INIT(BARBARIAN_CAMP_MINIMUM_DISTANCE_CAPITAL, 4),
	GD_INT_INIT(BARBARIAN_CAMP_MINIMUM_DISTANCE_ANOTHER_CAMP, 4),
	GD_INT_INIT(BARBARIAN_CAMP_MINIMUM_DISTANCE_RECENTLY_CLEARED_CAMP, 2),
	GD_INT_INIT(BARBARIAN_CAMP_CLEARED_MIN_TURNS_TO_RESPAWN, 15),
	GD_INT_INIT(BARBARIAN_CAMP_COASTAL_SPAWN_ROLL, 33),
	GD_INT_INIT(BARBARIAN_INITIAL_SPAWN_TURN, 0),
	GD_INT_INIT(BARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING, 2),
	GD_INT_INIT(BARBARIAN_CAMP_SPAWN_RATE, 2),
	GD_INT_INIT(BARBARIAN_CAMP_SPAWN_RATE_RAGING, -1),
	GD_INT_INIT(BARBARIAN_CAMP_SPAWN_RATE_CHILL, 1),
	GD_INT_INIT(BARBARIAN_CAMP_NUM_AFTER_INITIAL, 1),
	GD_INT_INIT(BARBARIAN_CAMP_NUM_AFTER_INITIAL_CHILL, 1),
	GD_INT_INIT(BARBARIAN_CAMP_NUM_AFTER_INITIAL_RAGING, 1),
	GD_INT_INIT(BARBARIAN_INITIAL_SPAWN_TURN_FROM_SPAWNER, 10),
	GD_INT_INIT(BARBARIAN_NAVAL_UNIT_START_TURN_SPAWN, 30),
	GD_INT_INIT(BARBARIAN_INITIAL_SPAWN_SPAWNER_DELAY, 0),
	GD_INT_INIT(BARBARIAN_MIN_SPAWN_DELAY, 2),
	GD_INT_INIT(BARBARIAN_SPAWN_DELAY_FROM_ENCAMPMENT, 12),
	GD_INT_INIT(BARBARIAN_SPAWN_DELAY_FROM_ENCAMPMENT_RAND, 9),
	GD_INT_INIT(BARBARIAN_SPAWN_DELAY_FROM_ENCAMPMENT_CHILL_MULTIPLIER, 200),
	GD_INT_INIT(BARBARIAN_SPAWN_DELAY_FROM_ENCAMPMENT_RAGING_MULTIPLIER, 50),
	GD_INT_INIT(BARBARIAN_ENCAMPMENT_SPAWN_DELAY_REDUCTION_PER_SPAWN, -1),
	GD_INT_INIT(BARBARIAN_ENCAMPMENT_MAX_SPAWN_DELAY_REDUCTION, -3),
	GD_INT_INIT(BARBARIAN_ENCAMPMENT_ATTACKED_DELAY_MULTIPLIER, 50),
	GD_INT_INIT(BARBARIAN_SPAWN_DELAY_FROM_CITY, 6),
	GD_INT_INIT(BARBARIAN_SPAWN_DELAY_FROM_CITY_RAND, 4),
	GD_INT_INIT(BARBARIAN_SPAWN_DELAY_FROM_CITY_CHILL_MULTIPLIER, 150),
	GD_INT_INIT(BARBARIAN_SPAWN_DELAY_FROM_CITY_RAGING_MULTIPLIER, 50),
	GD_INT_INIT(BARBARIAN_CITY_SPAWN_DELAY_REDUCTION_PER_SPAWN, -1),
	GD_INT_INIT(BARBARIAN_CITY_MAX_SPAWN_DELAY_REDUCTION, -3),
	GD_INT_INIT(BARBARIAN_CITY_ATTACKED_DELAY_MULTIPLIER, 50),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_INITIAL_ENCAMPMENT_CREATION_SPAWN, 1),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_INITIAL_ENCAMPMENT_CREATION_SPAWN_CHILL, -1),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_INITIAL_ENCAMPMENT_CREATION_SPAWN_RAGING, 0),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_INITIAL_ENCAMPMENT_CREATION_SPAWN_PER_ERA, 0),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_ENCAMPMENT_CREATION_SPAWN, 1),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_ENCAMPMENT_CREATION_SPAWN_CHILL, 0),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_ENCAMPMENT_CREATION_SPAWN_RAGING, 0),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_ENCAMPMENT_CREATION_SPAWN_PER_ERA, 0),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_CITY_CAPTURE_SPAWN, 0),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_CITY_CAPTURE_SPAWN_CHILL, 0),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_CITY_CAPTURE_SPAWN_RAGING, 0),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_CITY_CAPTURE_SPAWN_PER_ERA, 0),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_PER_ENCAMPMENT_SPAWN, 1),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_PER_ENCAMPMENT_SPAWN_CHILL, 0),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_PER_ENCAMPMENT_SPAWN_RAGING, 0),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_PER_ENCAMPMENT_SPAWN_PER_ERA, 0),
	GD_INT_INIT(MAX_BARBARIANS_FROM_CAMP_NEARBY, 2),
	GD_INT_INIT(MAX_BARBARIANS_FROM_CAMP_NEARBY_RANGE, 4),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_PER_CITY_SPAWN, 1),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_PER_CITY_SPAWN_CHILL, 0),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_PER_CITY_SPAWN_RAGING, 0),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_PER_CITY_SPAWN_PER_ERA, 0),
	GD_INT_INIT(MAX_BARBARIANS_FROM_CITY_NEARBY, 4),
	GD_INT_INIT(MAX_BARBARIANS_FROM_CITY_NEARBY_RANGE, 4),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_PLUNDER_TRADE_ROUTE_SPAWN, 1),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_PLUNDER_TRADE_ROUTE_SPAWN_CHILL, 0),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_PLUNDER_TRADE_ROUTE_SPAWN_RAGING, 0),
	GD_INT_INIT(BARBARIAN_NUM_UNITS_PLUNDER_TRADE_ROUTE_SPAWN_PER_ERA, 0),
	GD_INT_INIT(BARBARIAN_UNIT_SPAWN_NUM_CANDIDATES, 5),
	GD_INT_INIT(BARBARIAN_UNIT_SPAWN_NO_RESOURCE_MULTIPLIER, 150),
	GD_INT_INIT(BARBARIAN_UNIT_SPAWN_UU_MULTIPLIER, 150),
	GD_INT_INIT(BARBARIAN_UNIT_SPAWN_PREFERRED_TYPE, 200),
	GD_INT_INIT(MINOR_QUEST_REBELLION_BARB_SPAWN_INTERVAL, 4),
	GD_INT_INIT(MINOR_QUEST_REBELLION_BARBS_PER_CS_UNIT, 60),
	GD_INT_INIT(MINOR_QUEST_REBELLION_BARBS_PER_ERA_BASE, 0),
	GD_INT_INIT(MINOR_QUEST_REBELLION_BARBS_PER_ERA_RAND, 200),
	GD_INT_INIT(MINOR_QUEST_REBELLION_BARBS_MIN, 2),
	GD_INT_INIT(MINOR_QUEST_ACQUIRE_CITY_BONUS_XP, 100),
	GD_INT_INIT(GOLD_FROM_BARBARIAN_CONVERSION, 25),
	GD_INT_INIT(BARBARIAN_CITY_GOLD_RANSOM, 200),
	GD_INT_INIT(BARBARIAN_UNIT_GOLD_RANSOM, 100),
	GD_INT_INIT(EMBARKED_UNIT_MOVEMENT, 2),
	GD_INT_INIT(EMBARKED_VISIBILITY_RANGE, 1),
	GD_INT_INIT(DEFAULT_MAX_NUM_BUILDERS, -1),
	GD_INT_INIT(BARBARIAN_TECH_PERCENT, 75),
	GD_INT_INIT(CITY_RESOURCE_WLTKD_TURNS, 20),
	GD_INT_INIT(WLTKD_RESOURCE_RESET_TURNS, 0),
	GD_INT_INIT(MAX_SPECIALISTS_FROM_BUILDING, 4),
	GD_INT_INIT(GREAT_PERSON_THRESHOLD_BASE, 100),
	GD_INT_INIT(GREAT_PERSON_THRESHOLD_INCREASE, 100),
	GD_INT_INIT(CULTURE_BOMB_COOLDOWN, 10),
	GD_INT_INIT(CULTURE_BOMB_MINOR_FRIENDSHIP_CHANGE, -50),
	GD_INT_INIT(LANDMARK_MINOR_FRIENDSHIP_CHANGE, 50),
	GD_INT_INIT(UNIT_AUTO_EXPLORE_DISABLED, 0),
	GD_INT_INIT(UNIT_AUTO_EXPLORE_FULL_DISABLED, 0),
	GD_INT_INIT(UNIT_WORKER_AUTOMATION_DISABLED, 0),
	GD_INT_INIT(UNIT_DELETE_DISABLED, 0),
	GD_INT_INIT(MIN_START_AREA_TILES, 4),
	GD_INT_INIT(MIN_DISTANCE_OTHER_AREA_PERCENT, 75),
	GD_INT_INIT(MINOR_CIV_FOOD_REQUIREMENT, 2),
	GD_INT_INIT(MAJOR_CIV_FOOD_REQUIREMENT, 2),
	GD_INT_INIT(MIN_START_FOUND_VALUE_AS_PERCENT_OF_BEST, 50),
	GD_INT_INIT(START_AREA_FOOD_MULTIPLIER, 6),
	GD_INT_INIT(START_AREA_HAPPINESS_MULTIPLIER, 12),
	GD_INT_INIT(START_AREA_PRODUCTION_MULTIPLIER, 8),
	GD_INT_INIT(START_AREA_GOLD_MULTIPLIER, 2),
	GD_INT_INIT(START_AREA_SCIENCE_MULTIPLIER, 1),
	GD_INT_INIT(START_AREA_FAITH_MULTIPLIER, 1),
	GD_INT_INIT(START_AREA_RESOURCE_MULTIPLIER, 1),
	GD_INT_INIT(START_AREA_STRATEGIC_MULTIPLIER, 1),
	GD_INT_INIT(START_AREA_BUILD_ON_COAST_PERCENT, 20),
	GD_INT_INIT(SETTLER_FOOD_MULTIPLIER, 12),
	GD_INT_INIT(SETTLER_PRODUCTION_MULTIPLIER, 8),
	GD_INT_INIT(SETTLER_GOLD_MULTIPLIER, 8),
	GD_INT_INIT(SETTLER_SCIENCE_MULTIPLIER, 5),
	GD_INT_INIT(SETTLER_FAITH_MULTIPLIER, 4),
	GD_INT_INIT(SETTLER_STRATEGIC_MULTIPLIER, 3),
	GD_INT_INIT(SETTLER_HAPPINESS_MULTIPLIER, 8),
	GD_INT_INIT(SETTLER_RESOURCE_MULTIPLIER, 3),
	GD_INT_INIT(SETTLER_BUILD_ON_COAST_PERCENT, 40),
	GD_INT_INIT(CITY_RING_1_MULTIPLIER, 6),
	GD_INT_INIT(CITY_RING_2_MULTIPLIER, 6),
	GD_INT_INIT(CITY_RING_3_MULTIPLIER, 3),
	GD_INT_INIT(CITY_RING_4_MULTIPLIER, 1),
	GD_INT_INIT(CITY_RING_5_MULTIPLIER, 1),
	GD_INT_INIT(SETTLER_EVALUATION_DISTANCE, 8),
	GD_INT_INIT(SETTLER_DISTANCE_DROPOFF_MODIFIER, 4),
	GD_INT_INIT(BUILD_ON_RESOURCE_PERCENT, -10),
	GD_INT_INIT(BUILD_ON_RIVER_PERCENT, 35),
	GD_INT_INIT(CHOKEPOINT_STRATEGIC_VALUE, 10),
	GD_INT_INIT(HILL_STRATEGIC_VALUE, 2),
	GD_INT_INIT(BALANCE_BAD_TILES_STRATEGIC_VALUE, -34),
	GD_INT_INIT(BALANCE_FRESH_WATER_STRATEGIC_VALUE, 5),
	GD_INT_INIT(BALANCE_COAST_STRATEGIC_VALUE, 3),
	GD_INT_INIT(BALANCE_EMPIRE_BORDERLAND_STRATEGIC_VALUE, 30),
	GD_INT_INIT(MINOR_CIV_CONTACT_GOLD_FIRST, 30),
	GD_INT_INIT(MINOR_CIV_CONTACT_GOLD_OTHER, 15),
	GD_INT_INIT(COMBAT_AI_OFFENSE_DAMAGEWEIGHT, 100),
	GD_INT_INIT(COMBAT_AI_OFFENSE_DANGERWEIGHT, 100),
	GD_INT_INIT(MAJORS_CAN_MOVE_STARTING_SETTLER, 1),
	GD_INT_INIT(CS_CAN_MOVE_STARTING_SETTLER, 0),
	GD_INT_INIT(COMPLETE_KILLS_TURN_TIMER, -1),
	GD_INT_INIT(MAX_NUM_TENETS_LEVEL_1, 7),
	GD_INT_INIT(MAX_NUM_TENETS_LEVEL_2, 4),
	GD_INT_INIT(MAX_NUM_TENETS_LEVEL_3, 3),
	GD_INT_INIT(IGNORE_GLOBAL_TERRAIN_COSTS_INCLUDES_RIVERS, 1),
	GD_INT_INIT(IGNORE_SPECIFIC_TERRAIN_COSTS_INCLUDES_RIVERS, 0),
	GD_INT_INIT(DIPLOAI_LIMIT_VICTORY_PURSUIT_RANDOMIZATION, 0),
	GD_INT_INIT(DIPLOAI_ENABLE_NUCLEAR_GANDHI, 1),
	GD_INT_INIT(DIPLOAI_DISABLE_WAR_BRIBES, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_CITY_TRADING, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_VOLUNTARY_VASSALAGE, 0),
	GD_INT_INIT(DIPLOAI_NO_OTHER_HOST_VOTES, 0),
	GD_INT_INIT(DIPLOAI_NO_OTHER_WORLD_LEADER_VOTES, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_INSULT_MESSAGES, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_COMPLIMENT_MESSAGES, 0),
	GD_INT_INIT(DIPLOAI_NO_FAKE_OPINION_MODIFIERS, 1),
	GD_INT_INIT(DIPLOAI_SHOW_HIDDEN_OPINION_MODIFIERS, 0),
	GD_INT_INIT(DIPLOAI_SHOW_ALL_OPINION_VALUES, 0),
	GD_INT_INIT(DIPLOAI_SHOW_BASE_HUMAN_OPINION, 0),
	GD_INT_INIT(DIPLOAI_HIDE_OPINION_TABLE, 0),
	GD_INT_INIT(DIPLOAI_NO_FLAVOR_RANDOMIZATION, 0),
	GD_INT_INIT(DIPLOAI_TEMPORARY_FOR_PERMANENT_TRADING_SETTING, 0),
	GD_INT_INIT(DIPLOAI_THIRD_PARTY_PEACE_WARSCORE, 75),
	GD_INT_INIT(DIPLOAI_DISABLE_FRIENDSHIP_REQUESTS, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_GIFT_OFFERS, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_COOP_WAR_REQUESTS, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_HELP_REQUESTS, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_TRADE_OFFERS, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_PEACE_OFFERS, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_DEMANDS, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_INDEPENDENCE_REQUESTS, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_ALL_STATEMENTS, 0),
	GD_INT_INIT(DIPLOAI_PASSIVE_MODE, 0),
	GD_INT_INIT(DIPLOAI_AGGRESSIVE_MODE, 0),
	GD_INT_INIT(DIPLOAI_DISABLE_DOMINATION_ONLY_AGGRESSION, 0),
	GD_INT_INIT(DIPLOAI_ENABLE_DEBUG_MODE, 0),
	GD_INT_INIT(WAR_PROGRESS_INITIAL_VALUE, 100),
	GD_INT_INIT(WAR_PROGRESS_DECAY_VS_STRONGER, -5),
	GD_INT_INIT(WAR_PROGRESS_DECAY_VS_EQUAL, -4),
	GD_INT_INIT(WAR_PROGRESS_DECAY_VS_WEAKER, -3),
	GD_INT_INIT(WAR_PROGRESS_CAPTURED_WORKER, 10),
	GD_INT_INIT(WAR_PROGRESS_CAPTURED_SETTLER, 20),
	GD_INT_INIT(WAR_PROGRESS_PLUNDERED_TRADE_ROUTE, 10),
	GD_INT_INIT(WAR_PROGRESS_PILLAGED_IMPROVEMENT, 10),
	GD_INT_INIT(WAR_PROGRESS_STOLE_TILE, 20),
	GD_INT_INIT(WAR_PROGRESS_HIGH_VALUE_PILLAGE_MULTIPLIER, 200),
	GD_INT_INIT(WAR_PROGRESS_KILLED_UNIT, 20),
	GD_INT_INIT(WAR_PROGRESS_CAPTURED_CITY, 100),
	GD_INT_INIT(WAR_PROGRESS_LOST_WORKER, -5),
	GD_INT_INIT(WAR_PROGRESS_LOST_SETTLER, -10),
	GD_INT_INIT(WAR_PROGRESS_LOST_TRADE_ROUTE, -5),
	GD_INT_INIT(WAR_PROGRESS_LOST_IMPROVEMENT, -5),
	GD_INT_INIT(WAR_PROGRESS_LOST_TILE, -10),
	GD_INT_INIT(WAR_PROGRESS_LOST_UNIT, -10),
	GD_INT_INIT(WAR_PROGRESS_LOST_CITY, -50),
	GD_INT_INIT(WAR_PROGRESS_PER_STRATEGIC_DEFICIT, -5),
	GD_INT_INIT(WAR_PROGRESS_PER_UNHAPPY, -4),
	GD_INT_INIT(WAR_PROGRESS_CAPITAL_MULTIPLIER, 200),
	GD_INT_INIT(WAR_PROGRESS_HOLY_CITY_MULTIPLIER, 150),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_BONUS_FRIENDSHIP, 5),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_BONUS_CULTURE, 5),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_BONUS_FAITH, 5),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_BONUS_GOLD, 25),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_BONUS_FOOD, 10),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_BONUS_UNIT, 10),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_XP_PER_ERA, 5),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_XP_RANDOM, 5),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_PLAYER_MULTIPLIER, 2),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_PLAYER_DIVISOR, 1),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_SUBSEQUENT_TEAM_MULTIPLIER, 1),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_SUBSEQUENT_TEAM_DIVISOR, 2),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_FRIENDLY_BONUS_MULTIPLIER, 3),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_FRIENDLY_BONUS_DIVISOR, 2),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_FRIENDLY_UNIT_MULTIPLIER, 2),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_FRIENDLY_UNIT_DIVISOR, 1),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_HOSTILE_BONUS_MULTIPLIER, 1),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_HOSTILE_BONUS_DIVISOR, 2),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_HOSTILE_UNIT_MULTIPLIER, 0),
	GD_INT_INIT(MINOR_CIV_FIRST_CONTACT_HOSTILE_UNIT_DIVISOR, 1),
	GD_INT_INIT(MINOR_CIV_GOLD_PERCENT, 120),
	GD_INT_INIT(MINOR_CIV_TECH_PERCENT, 40),
	GD_INT_INIT(MINOR_POLICY_RESOURCE_MULTIPLIER, 200),
	GD_INT_INIT(MINOR_POLICY_RESOURCE_HAPPINESS_MULTIPLIER, 150),
	GD_INT_INIT(MINOR_GOLD_GIFT_LARGE, 1000),
	GD_INT_INIT(MINOR_GOLD_GIFT_MEDIUM, 500),
	GD_INT_INIT(MINOR_GOLD_GIFT_SMALL, 250),
	GD_INT_INIT(MINOR_CIV_TILE_IMPROVEMENT_GIFT_COST, 200),
	GD_INT_INIT(MINOR_CIV_BUYOUT_COST, 500),
	GD_INT_INIT(BALANCE_MARRIAGE_COST_BASE, 200),
	GD_INT_INIT(BALANCE_MARRIAGE_COST_INCREASE_PER_PREVIOUS_MARRIAGE, 200),
	GD_INT_INIT(MINOR_CIV_BUYOUT_TURNS, 5),
	GD_INT_INIT(MINOR_FRIENDSHIP_FROM_TRADE_MISSION, 30),
	GD_INT_INIT(MINOR_FRIENDSHIP_ANCHOR_DEFAULT, 0),
	GD_INT_INIT(MINOR_FRIENDSHIP_ANCHOR_MOD_PROTECTED, 5),
	GD_INT_INIT(MINOR_FRIENDSHIP_ANCHOR_MOD_WARY_OF, -20),
	GD_INT_INIT(MINOR_UNIT_GIFT_TRAVEL_TURNS, 3),
	GD_INT_INIT(PLOT_UNIT_LIMIT, 1),
	GD_INT_INIT(CITY_UNIT_LIMIT, 1),
	GD_INT_INIT(ZONE_OF_CONTROL_ENABLED, 1),
	GD_INT_INIT(FIRE_SUPPORT_DISABLED, 1),
	GD_INT_INIT(MAX_HIT_POINTS, 100),
	GD_INT_INIT(MAX_CITY_HIT_POINTS, 200),
	GD_INT_INIT(CITY_HIT_POINTS_HEALED_PER_TURN, 20),
	GD_INT_INIT(HILLS_EXTRA_DEFENSE, 25),
	GD_INT_INIT(RIVER_ATTACK_MODIFIER, -20),
	GD_INT_INIT(AMPHIB_ATTACK_MODIFIER, -50),
	GD_INT_INIT(ENEMY_HEAL_RATE, 10),
	GD_INT_INIT(NEUTRAL_HEAL_RATE, 10),
	GD_INT_INIT(FRIENDLY_HEAL_RATE, 20),
	GD_INT_INIT(CITY_HEAL_RATE, 25),
	GD_INT_INIT(INSTA_HEAL_RATE, 50),
	GD_INT_INIT(ATTACK_SAME_STRENGTH_MIN_DAMAGE, 2400),
	GD_INT_INIT(ATTACK_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE, 1200),
	GD_INT_INIT(RANGE_ATTACK_SAME_STRENGTH_MIN_DAMAGE, 2400),
	GD_INT_INIT(RANGE_ATTACK_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE, 1200),
	GD_INT_INIT(INTERCEPTION_SAME_STRENGTH_MIN_DAMAGE, 2400),
	GD_INT_INIT(INTERCEPTION_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE, 1200),
	GD_INT_INIT(AIR_SWEEP_INTERCEPTION_DAMAGE_MOD, -50),
	GD_INT_INIT(WOUNDED_DAMAGE_MULTIPLIER, 33),
	GD_INT_INIT(CITY_STRENGTH_DEFAULT, 800),
	GD_INT_INIT(CITY_STRENGTH_POPULATION_CHANGE, 40),
	GD_INT_INIT(CITY_STRENGTH_TECH_MULTIPLIER, 1),
	GD_INT_INIT(CITY_STRENGTH_UNIT_DIVISOR, 500),
	GD_INT_INIT(CITY_STRENGTH_HILL_CHANGE, 500),
	GD_INT_INIT(CITY_STRENGTH_THRESHOLD_FOR_BONUSES, 10),
	GD_INT_INIT(CITY_ATTACKING_DAMAGE_MOD, 0),
	GD_INT_INIT(ATTACKING_CITY_MELEE_DAMAGE_MOD, 0),
	GD_INT_INIT(MAX_CITY_ATTACK_RANGE, 2),
	GD_INT_INIT(CITY_ATTACK_RANGE, 2),
	GD_INT_INIT(CAN_CITY_USE_INDIRECT_FIRE, 1),
	GD_INT_INIT(CITY_RANGED_ATTACK_STRENGTH_MULTIPLIER, -40),
	GD_INT_INIT(CITY_CAPTURE_DAMAGE_PERCENT, 50),
	GD_INT_INIT(EXPERIENCE_PER_LEVEL, 10),
	GD_INT_INIT(EXPERIENCE_ATTACKING_UNIT_MELEE, 5),
	GD_INT_INIT(EXPERIENCE_DEFENDING_UNIT_MELEE, 4),
	GD_INT_INIT(EXPERIENCE_ATTACKING_UNIT_AIR, 4),
	GD_INT_INIT(EXPERIENCE_DEFENDING_UNIT_AIR, 2),
	GD_INT_INIT(EXPERIENCE_ATTACKING_UNIT_RANGED, 2),
	GD_INT_INIT(EXPERIENCE_DEFENDING_UNIT_RANGED, 2),
	GD_INT_INIT(EXPERIENCE_ATTACKING_AIR_SWEEP, 5),
	GD_INT_INIT(EXPERIENCE_DEFENDING_AIR_SWEEP_AIR, 5),
	GD_INT_INIT(EXPERIENCE_DEFENDING_AIR_SWEEP_GROUND, 2),
	GD_INT_INIT(EXPERIENCE_ATTACKING_CITY_MELEE, 5),
	GD_INT_INIT(EXPERIENCE_ATTACKING_CITY_RANGED, 3),
	GD_INT_INIT(EXPERIENCE_ATTACKING_CITY_AIR, 4),
	GD_INT_INIT(BARBARIAN_MAX_XP_VALUE, 30),
	GD_INT_INIT(MINOR_MAX_XP_VALUE, -1),
	GD_INT_INIT(COMBAT_EXPERIENCE_IN_BORDERS_PERCENT, 100),
	GD_INT_INIT(GREAT_GENERALS_THRESHOLD, 200),
	GD_INT_INIT(GREAT_GENERALS_THRESHOLD_INCREASE, 50),
	GD_INT_INIT(GREAT_GENERALS_THRESHOLD_INCREASE_TEAM, 50),
	GD_INT_INIT(UNIT_DEATH_XP_GREAT_GENERAL_LOSS, 50),
	GD_INT_INIT(CRAMPED_RANGE_FROM_CITY, 5),
	GD_INT_INIT(CRAMPED_USABLE_PLOT_PERCENT, 25),
	GD_INT_INIT(PROXIMITY_NEIGHBORS_CLOSEST_CITY_REQUIREMENT, 8),
	GD_INT_INIT(PROXIMITY_CLOSE_CLOSEST_CITY_POSSIBILITY, 16),
	GD_INT_INIT(PROXIMITY_FAR_DISTANCE_MAX, 24),
	GD_INT_INIT(PLOT_BASE_COST, 50),
	GD_INT_INIT(PLOT_ADDITIONAL_COST_PER_PLOT, 5),
	GD_INT_INIT(PLOT_COST_APPEARANCE_DIVISOR, 5),
	GD_INT_INIT(CULTURE_COST_FIRST_PLOT, 15),
	GD_INT_INIT(CULTURE_COST_LATER_PLOT_MULTIPLIER, 10),
	GD_INT_INIT(CULTURE_COST_VISIBLE_DIVISOR, 5),
	GD_INT_INIT(CULTURE_PLOT_COST_MOD_MINIMUM, -85),
	GD_INT_INIT(MINOR_CIV_PLOT_CULTURE_COST_MULTIPLIER, 150),
	GD_INT_INIT(MAXIMUM_WORK_PLOT_DISTANCE, 3),
	GD_INT_INIT(MAXIMUM_BUY_PLOT_DISTANCE, 3),
	GD_INT_INIT(MAXIMUM_ACQUIRE_PLOT_DISTANCE, 5),
	GD_INT_INIT(PLOT_INFLUENCE_BASE_MULTIPLIER, 100),
	GD_INT_INIT(PLOT_INFLUENCE_DISTANCE_MULTIPLIER, 100),
	GD_INT_INIT(PLOT_INFLUENCE_DISTANCE_DIVISOR, 3),
	GD_INT_INIT(PLOT_INFLUENCE_RING_COST, 100),
	GD_INT_INIT(PLOT_INFLUENCE_WATER_COST, 25),
	GD_INT_INIT(PLOT_INFLUENCE_RESOURCE_COST, -105),
	GD_INT_INIT(PLOT_INFLUENCE_NW_COST, -105),
	GD_INT_INIT(PLOT_BUY_RESOURCE_COST, -100),
	GD_INT_INIT(PLOT_INFLUENCE_YIELD_POINT_COST, -1),
	GD_INT_INIT(PLOT_INFLUENCE_NO_ADJACENT_OWNED_COST, 1000),
	GD_INT_INIT(OWN_UNITED_NATIONS_VOTE_BONUS, 1),
	GD_INT_INIT(HISTORY_LOCAL_NUM_BEST_CITIES, 1),
	GD_INT_INIT(HISTORY_NUM_TURNS_TO_AVERAGE, 10),
	GD_INT_INIT(SCORE_CITY_MULTIPLIER, 8),
	GD_INT_INIT(SCORE_POPULATION_MULTIPLIER, 4),
	GD_INT_INIT(SCORE_LAND_MULTIPLIER, 1),
	GD_INT_INIT(SCORE_WONDER_MULTIPLIER, 25),
	GD_INT_INIT(SCORE_TECH_MULTIPLIER, 4),
	GD_INT_INIT(SCORE_FUTURE_TECH_MULTIPLIER, 10),
	GD_INT_INIT(SCORE_POLICY_MULTIPLIER, 4),
	GD_INT_INIT(SCORE_GREAT_WORK_MULTIPLIER, 4),
	GD_INT_INIT(SCORE_BELIEF_MULTIPLIER, 20),
	GD_INT_INIT(SCORE_RELIGION_CITIES_MULTIPLIER, 1),
	GD_INT_INIT(MIN_GAME_TURNS_ELAPSED_TO_TEST_VICTORY, 10),
	GD_INT_INIT(ZERO_SUM_COMPETITION_WONDERS_VICTORY_POINTS, 5),
	GD_INT_INIT(ZERO_SUM_COMPETITION_POLICIES_VICTORY_POINTS, 5),
	GD_INT_INIT(ZERO_SUM_COMPETITION_GREAT_PEOPLE_VICTORY_POINTS, 5),
	GD_INT_INIT(MAX_CITY_DIST_HIGHWATER_MARK, 3),
	GD_INT_INIT(HEAVY_RESOURCE_THRESHOLD, 3),
	GD_INT_INIT(PROGRESS_POPUP_TURN_FREQUENCY, 25),
	GD_INT_INIT(SETTLER_PRODUCTION_SPEED, 0),
	GD_INT_INIT(BUY_PLOTS_DISABLED, 0),
	GD_INT_INIT(WARLORD_EXTRA_EXPERIENCE_PER_UNIT_PERCENT, 0),
	GD_INT_INIT(BUILDING_SALE_DIVISOR, 4),
	GD_INT_INIT(DISBAND_UNIT_REFUND_PERCENT, 25),
	GD_INT_INIT(MINOR_CIV_ROUTE_QUEST_WEIGHT, 1000),
	GD_INT_INIT(WITHDRAW_MOD_ENEMY_MOVES, -20),
	GD_INT_INIT(WITHDRAW_MOD_BLOCKED_TILE, -20),
	GD_INT_INIT(AI_OPERATIONAL_MAX_RECRUIT_TURNS_DEFAULT, 5),
	GD_INT_INIT(AI_OPERATIONAL_MAX_RECRUIT_TURNS_ENEMY_TERRITORY, 10),
	GD_INT_INIT(AI_GOLD_TREASURY_BUFFER, 150),
	GD_INT_INIT(BALANCE_CS_WAR_COOLDOWN_RATE, 50),
	GD_INT_INIT(BALANCE_FOLLOWER_GROWTH_BONUS, 0),
	GD_INT_INIT(BALANCE_FOLLOWER_FOOD_BONUS, 0),
	GD_INT_INIT(RELIGION_FOUND_AUTO_SPREAD_PRESSURE, 0),
	GD_INT_INIT(FRIENDS_GOLD_FLAT_BONUS_AMOUNT_INDUSTRIAL, 4),
	GD_INT_INIT(FRIENDS_GOLD_FLAT_BONUS_AMOUNT_RENAISSANCE, 3),
	GD_INT_INIT(FRIENDS_GOLD_FLAT_BONUS_AMOUNT_MEDIEVAL, 2),
	GD_INT_INIT(FRIENDS_GOLD_FLAT_BONUS_AMOUNT_CLASSICAL, 1),
	GD_INT_INIT(FRIENDS_GOLD_FLAT_BONUS_AMOUNT_ANCIENT, 1),
	GD_INT_INIT(ALLIES_GOLD_FLAT_BONUS_AMOUNT_INDUSTRIAL, 6),
	GD_INT_INIT(ALLIES_GOLD_FLAT_BONUS_AMOUNT_RENAISSANCE, 5),
	GD_INT_INIT(ALLIES_GOLD_FLAT_BONUS_AMOUNT_MEDIEVAL, 4),
	GD_INT_INIT(ALLIES_GOLD_FLAT_BONUS_AMOUNT_CLASSICAL, 3),
	GD_INT_INIT(ALLIES_GOLD_FLAT_BONUS_AMOUNT_ANCIENT, 2),
	GD_INT_INIT(FRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_INDUSTRIAL, 10),
	GD_INT_INIT(FRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_RENAISSANCE, 6),
	GD_INT_INIT(FRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_MEDIEVAL, 4),
	GD_INT_INIT(FRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_CLASSICAL, 2),
	GD_INT_INIT(FRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_ANCIENT, 1),
	GD_INT_INIT(ALLIES_SCIENCE_FLAT_BONUS_AMOUNT_INDUSTRIAL, 10),
	GD_INT_INIT(ALLIES_SCIENCE_FLAT_BONUS_AMOUNT_RENAISSANCE, 8),
	GD_INT_INIT(ALLIES_SCIENCE_FLAT_BONUS_AMOUNT_MEDIEVAL, 6),
	GD_INT_INIT(ALLIES_SCIENCE_FLAT_BONUS_AMOUNT_CLASSICAL, 4),
	GD_INT_INIT(ALLIES_SCIENCE_FLAT_BONUS_AMOUNT_ANCIENT, 3),
	GD_INT_INIT(BALANCE_MAX_CS_ALLY_STRENGTH, 5),
	GD_INT_INIT(BALANCE_CS_PLEDGE_TO_PROTECT_DEFENSE_BONUS, 5),
	GD_INT_INIT(BALANCE_CS_PLEDGE_TO_PROTECT_DEFENSE_BONUS_MAX, 25),
	GD_INT_INIT(BALANCE_CS_ALLIANCE_DEFENSE_BONUS, 25),
	GD_INT_INIT(UNIT_AUTO_EXTRA_AUTOMATIONS_DISABLED, 0),
	GD_INT_INIT(BALANCE_GPP_RATE_IN_CAPITAL_PER_MARRIAGE, 0),
	GD_INT_INIT(BALANCE_MARRIAGE_RESTING_POINT_INCREASE, 200),
	GD_INT_INIT(BALANCE_SPY_RESPAWN_TIMER, 5),
	GD_INT_INIT(BALANCE_SPY_TO_PLAYER_RATIO, 20),
	GD_INT_INIT(BALANCE_SPY_POINT_THRESHOLD_MAX, 100),
	GD_INT_INIT(BALANCE_SPY_POINT_THRESHOLD_MIN, 33),
	GD_INT_INIT(BALANCE_SPY_POINT_MAJOR_PLAYER_MULTIPLIER, 2),
	GD_INT_INIT(BALANCE_BASIC_ATTACK_ARMY_SIZE, 6),
	GD_INT_INIT(BALANCE_ARMY_NAVY_START_SIZE, 3),
	GD_INT_INIT(BALANCE_FAITH_PERCENTAGE_VALUE, 10),
	GD_INT_INIT(BALANCE_SCIENCE_PERCENTAGE_VALUE, 10),
	GD_INT_INIT(BALANCE_GA_PERCENTAGE_VALUE, 25),
	GD_INT_INIT(BALANCE_CULTURE_PERCENTAGE_VALUE, 33),
	GD_INT_INIT(BALANCE_WONDER_BEATEN_CONSOLATION_PRIZE, 2),
	GD_INT_INIT(BALANCE_SCIENCE_INFLUENCE_LEVEL_EXOTIC, 0),
	GD_INT_INIT(BALANCE_SCIENCE_INFLUENCE_LEVEL_FAMILIAR, 1),
	GD_INT_INIT(BALANCE_SCIENCE_INFLUENCE_LEVEL_POPULAR, 2),
	GD_INT_INIT(BALANCE_SCIENCE_INFLUENCE_LEVEL_INFLUENTIAL, 3),
	GD_INT_INIT(BALANCE_SCIENCE_INFLUENCE_LEVEL_DOMINANT, 4),
	GD_INT_INIT(BALANCE_CONQUEST_REDUCTION_BOOST, 0),
	GD_INT_INIT(BALANCE_GOLD_INFLUENCE_LEVEL_EXOTIC, 200),
	GD_INT_INIT(BALANCE_GOLD_INFLUENCE_LEVEL_FAMILIAR, 400),
	GD_INT_INIT(BALANCE_GOLD_INFLUENCE_LEVEL_POPULAR, 600),
	GD_INT_INIT(BALANCE_GOLD_INFLUENCE_LEVEL_INFLUENTIAL, 800),
	GD_INT_INIT(BALANCE_GOLD_INFLUENCE_LEVEL_DOMINANT, 1000),
	GD_INT_INIT(BALANCE_GROWTH_INFLUENCE_LEVEL_EXOTIC, 5),
	GD_INT_INIT(BALANCE_GROWTH_INFLUENCE_LEVEL_FAMILIAR, 10),
	GD_INT_INIT(BALANCE_GROWTH_INFLUENCE_LEVEL_POPULAR, 15),
	GD_INT_INIT(BALANCE_GROWTH_INFLUENCE_LEVEL_INFLUENTIAL, 20),
	GD_INT_INIT(BALANCE_GROWTH_INFLUENCE_LEVEL_DOMINANT, 25),
	GD_INT_INIT(BALANCE_INFLUENCE_BOOST_PROTECTION_MINOR, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_FRIENDLY, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_HOSTILE, 0),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_GOLD_MERCANTILE, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_GOLD_MARITIME, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_SCIENCE_RELIGIOUS, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_CULTURE_CULTURED, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_CULTURE_NEUTRAL, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_CULTURE_IRRATIONAL, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_FAITH_RELIGIOUS, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_FAITH_NEUTRAL, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_GAP_CULTURED, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_GAP_RELIGIOUS, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_GAP_IRRATIONAL, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_FOOD_MARITIME, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_FOOD_MERCANTILE, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_FOOD_NEUTRAL, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_PRODUCTION_MILITARISTIC, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_TOURISM_MILITARISTIC, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_TOURISM_CULTURED, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_TOURISM_NEUTRAL, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_TOURISM_IRRATIONAL, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_GPP_CULTURED, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_GPP_NEUTRAL, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_GPP_IRRATIONAL, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_GPP_GLOBAL_RELIGIOUS, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_GPP_GLOBAL_CULTURED, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_GPP_GLOBAL_NEUTRAL, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_GENERAL_POINTS_MILITARISTIC, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_GENERAL_POINTS_CULTURED, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_ADMIRAL_POINTS_MARITIME, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_ADMIRAL_POINTS_CULTURED, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_EXPERIENCE_MILITARISTIC, 100),
	GD_INT_INIT(MINOR_CIV_QUEST_REWARD_EXPERIENCE_RELIGIOUS, 100),
	GD_INT_INIT(BALANCE_MOD_POLICY_BRANCHES_NEEDED_IDEOLOGY, 3),
	GD_INT_INIT(BALANCE_MOD_POLICIES_NEEDED_IDEOLOGY, 18),
	GD_INT_INIT(BALANCE_MINOR_PROTECTION_MINIMUM_DURATION, 10),
	GD_INT_INIT(BALANCE_SCOUT_XP_BASE, 1),
	GD_INT_INIT(BALANCE_SCOUT_XP_RANDOM_VALUE, 12),
	GD_INT_INIT(BALANCE_CORE_WORLD_WONDER_SAME_ERA_COST_MODIFIER, 25),
	GD_INT_INIT(BALANCE_CORE_WORLD_WONDER_PREVIOUS_ERA_COST_MODIFIER, 15),
	GD_INT_INIT(BALANCE_CORE_WORLD_WONDER_SECOND_PREVIOUS_ERA_COST_MODIFIER, 10),
	GD_INT_INIT(BALANCE_CORE_WORLD_WONDER_EARLIER_ERA_COST_MODIFIER, 5),
	GD_INT_INIT(GWAM_THRESHOLD_DECREASE, 0),
	GD_INT_INIT(BALANCE_BUILDING_INVESTMENT_BASELINE, -50),
	GD_INT_INIT(BALANCE_UNIT_INVESTMENT_BASELINE, -50),
	GD_INT_INIT(OPEN_BORDERS_MODIFIER_TRADE_GOLD, 20),
	GD_INT_INIT(BALANCE_CORE_PRODUCTION_DESERT_IMPROVEMENT, 0),
	GD_INT_INIT(COMBAT_CAPTURE_HEALTH, 50),
	GD_INT_INIT(COMBAT_CAPTURE_MIN_CHANCE, 10),
	GD_INT_INIT(COMBAT_CAPTURE_MAX_CHANCE, 80),
	GD_INT_INIT(COMBAT_CAPTURE_RATIO_MULTIPLIER, 40),
	GD_INT_INIT(RELIGION_MIN_FAITH_FIRST_PANTHEON, 10),
	GD_INT_INIT(RELIGION_MIN_FAITH_FIRST_PROPHET, 200),
	GD_INT_INIT(RELIGION_MIN_FAITH_FIRST_GREAT_PERSON, 1000),
	GD_INT_INIT(RELIGION_GAME_FAITH_DELTA_NEXT_PANTHEON, 5),
	GD_INT_INIT(RELIGION_MIN_FAITH_SECOND_PROPHET, 600),
	GD_INT_INIT(RELIGION_FAITH_DELTA_NEXT_PROPHET, 100),
	GD_INT_INIT(RELIGION_FAITH_DELTA_NEXT_GREAT_PERSON, 500),
	GD_INT_INIT(RELIGION_BASE_CHANCE_PROPHET_SPAWN, 5),
	GD_INT_INIT(RELIGION_ATHEISM_PRESSURE_PER_POP, 100),
	GD_INT_INIT(RELIGION_INITIAL_FOUNDING_CITY_PRESSURE, 5000),
	GD_INT_INIT(RELIGION_PER_TURN_FOUNDING_CITY_PRESSURE, 5),
	GD_INT_INIT(RELIGION_MISSIONARY_PRESSURE_MULTIPLIER, 10),
	GD_INT_INIT(RELIGION_ADJACENT_CITY_DISTANCE, 9),
	GD_INT_INIT(RELIGION_MAXIMUM_FIXED_AMOUNT, 1),
	GD_INT_INIT(RELIGION_MAXIMUM_PER_PLAYER_DIVISOR, 200),
	GD_INT_INIT(RELIGION_MAXIMUM_CAP, 8),
	GD_INT_INIT(ESPIONAGE_GATHERING_INTEL_COST_PERCENT, 1000),
	GD_INT_INIT(ESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT, 25),
	GD_INT_INIT(ESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT, 100),
	GD_INT_INIT(ESPIONAGE_TURNS_BETWEEN_CITY_STATE_ELECTIONS, 15),
	GD_INT_INIT(ESPIONAGE_INFLUENCE_GAINED_FOR_RIGGED_ELECTION, 20),
	GD_INT_INIT(ESPIONAGE_INFLUENCE_LOST_FOR_RIGGED_ELECTION, 5),
	GD_INT_INIT(ESPIONAGE_SURVEILLANCE_SIGHT_RANGE, 1),
	GD_INT_INIT(ESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP, 20),
	GD_INT_INIT(ESPIONAGE_COUP_MULTIPLY_CONSTANT, 3),
	GD_INT_INIT(ESPIONAGE_CONSECUTIVE_RIGGING_INFLUENCE_MODIFIER, 40),
	GD_INT_INIT(ESPIONAGE_NP_BASE, 20),
	GD_INT_INIT(ESPIONAGE_NP_PER_SPY_RANK, 10),
	GD_INT_INIT(ESPIONAGE_NP_CULTURAL_INFLUENCE, 10),
	GD_INT_INIT(ESPIONAGE_NP_PER_TECHNOLOGY_BEHIND, 2),
	GD_INT_INIT(ESPIONAGE_NP_MAX_NUM_TECH, 10),
	GD_INT_INIT(ESPIONAGE_NP_REDUCTION_PER_SECURITY_POINT, 160),
	GD_INT_INIT(ESPIONAGE_MAX_NUM_SECURITY_POINTS, 50),
	GD_INT_INIT(ESPIONAGE_SECURITY_BASE, 10),
	GD_INT_INIT(ESPIONAGE_SECURITY_NOT_ALL_HAVE_SPIES, 1000),
	GD_INT_INIT(ESPIONAGE_SECURITY_PREVIOUS_CITY_MISSIONS, 2),
	GD_INT_INIT(ESPIONAGE_SECURITY_PER_POPULATION, -2),
	GD_INT_INIT(ESPIONAGE_SECURITY_PER_POPULATION_BUILDING_SCALER, 360),
	GD_INT_INIT(ESPIONAGE_SECURITY_PER_TRADE_ROUTE, -1),
	GD_INT_INIT(ESPIONAGE_SECURITY_PER_EXCESS_UNHAPPINESS, -4),
	GD_INT_INIT(ESPIONAGE_SPY_EXPERIENCE_DENOMINATOR, 100),
	GD_INT_INIT(ESPIONAGE_XP_PER_TURN_COUNTERSPY, 0),
	GD_INT_INIT(ESPIONAGE_XP_PER_TURN_DIPLOMAT, 0),
	GD_INT_INIT(ESPIONAGE_XP_PER_TURN_OFFENSIVE, 0),
	GD_INT_INIT(ESPIONAGE_XP_PER_TURN_CITYSTATE, 0),
	GD_INT_INIT(ESPIONAGE_XP_RIGGING_SUCCESS, 0),
	GD_INT_INIT(ESPIONAGE_XP_UNCOVER_INTRIGUE, 0),
	GD_INT_INIT(ESPIONAGE_SPY_XP_MISSION_SUCCESS_PERCENT, 0),
	GD_INT_INIT(ESPIONAGE_COUNTERSPY_CHANGE_FOCUS_COOLDOWN, 5),
	GD_INT_INIT(INTERNATIONAL_TRADE_BASE, 100),
	GD_INT_INIT(INTERNATIONAL_TRADE_EXCLUSIVE_CONNECTION, 0),
	GD_INT_INIT(INTERNATIONAL_TRADE_CITY_GPT_DIVISOR, 20),
	GD_INT_INIT(PILLAGE_HEAL_AMOUNT, 25),
	GD_INT_INIT(CITY_CONNECTIONS_CONNECT_TO_CAPITAL, 1),
	GD_INT_INIT(BASE_CULTURE_PER_GREAT_WORK, 2),
	GD_INT_INIT(BASE_TOURISM_PER_GREAT_WORK, 2),
	GD_INT_INIT(TOURISM_MODIFIER_SHARED_RELIGION, 25),
	GD_INT_INIT(TOURISM_MODIFIER_SHARED_RELIGION_MAX, 0),
	GD_INT_INIT(TOURISM_MODIFIER_SHARED_RELIGION_TYPE, 0),
	GD_INT_INIT(TOURISM_MODIFIER_TRADE_ROUTE, 25),
	GD_INT_INIT(TOURISM_MODIFIER_OPEN_BORDERS, 25),
	GD_INT_INIT(TOURISM_MODIFIER_DIFFERENT_IDEOLOGIES, -34),
	GD_INT_INIT(TOURISM_MODIFIER_DIPLOMAT, 25),
	GD_INT_INIT(MINIMUM_TOURISM_BLAST_STRENGTH, 100),
	GD_INT_INIT(CULTURE_LEVEL_EXOTIC, 10),
	GD_INT_INIT(CULTURE_LEVEL_FAMILIAR, 30),
	GD_INT_INIT(CULTURE_LEVEL_POPULAR, 60),
	GD_INT_INIT(CULTURE_LEVEL_INFLUENTIAL, 100),
	GD_INT_INIT(CULTURE_LEVEL_DOMINANT, 200),
	GD_INT_INIT(IDEOLOGY_PERCENT_CLEAR_VICTORY_PREF, 25),
	GD_INT_INIT(IDEOLOGY_SCORE_GRAND_STRATS, 1000),
	GD_INT_INIT(IDEOLOGY_SCORE_HAPPINESS, 10),
	GD_INT_INIT(IDEOLOGY_SCORE_PER_FREE_TENET, 45),
	GD_INT_INIT(IDEOLOGY_SCORE_HOSTILE, 500),
	GD_INT_INIT(IDEOLOGY_SCORE_GUARDED, 250),
	GD_INT_INIT(IDEOLOGY_SCORE_AFRAID, 150),
	GD_INT_INIT(IDEOLOGY_SCORE_FRIENDLY, 25),
	GD_INT_INIT(MIN_DIG_SITES_PER_MAJOR_CIV, 5),
	GD_INT_INIT(MAX_DIG_SITES_PER_MAJOR_CIV, 8),
	GD_INT_INIT(PERCENT_SITES_HIDDEN, 30),
	GD_INT_INIT(PERCENT_HIDDEN_SITES_WRITING, 30),
	GD_INT_INIT(SAPPED_CITY_ATTACK_MODIFIER, 50),
	GD_INT_INIT(BLOCKADED_CITY_ATTACK_MODIFIER, 0),
	GD_INT_INIT(EXOTIC_GOODS_GOLD_MIN, 100),
	GD_INT_INIT(EXOTIC_GOODS_GOLD_MAX, 400),
	GD_INT_INIT(EXOTIC_GOODS_XP_MIN, 10),
	GD_INT_INIT(EXOTIC_GOODS_XP_MAX, 30),
	GD_INT_INIT(TEMPORARY_CULTURE_BOOST_MOD, 100),
	GD_INT_INIT(TEMPORARY_TOURISM_BOOST_MOD, 100),
	GD_INT_INIT(LEAGUE_SESSION_INTERVAL_BASE_TURNS, 12),
	GD_INT_INIT(LEAGUE_SESSION_SOON_WARNING_TURNS, 5),
	GD_INT_INIT(LEAGUE_MEMBER_PROPOSALS_BASE, 1),
	GD_INT_INIT(LEAGUE_MEMBER_VOTES_BASE, 1),
	GD_INT_INIT(LEAGUE_PROPOSERS_PER_SESSION, 2),
	GD_INT_INIT(LEAGUE_NUM_LEADERS_FOR_EXTRA_VOTES, 2),
	GD_INT_INIT(LEAGUE_PROJECT_PROGRESS_PERCENT_WARNING, 33),
	GD_INT_INIT(HELP_REQUEST_TURN_LIMIT_MIN, 20),
	GD_INT_INIT(HELP_REQUEST_TURN_LIMIT_RAND, 10),
	GD_INT_INIT(SHARE_OPINION_TURN_BUFFER, 20),
	GD_INT_INIT(VASSAL_TOURISM_MODIFIER, 33),
	GD_INT_INIT(VASSALAGE_VASSAL_TAX_PERCENT_MINIMUM, 0),
	GD_INT_INIT(VASSALAGE_VASSAL_TAX_PERCENT_MAXIMUM, 25),
	GD_INT_INIT(VASSALAGE_VASSAL_UNIT_MAINT_COST_PERCENT, 10),
	GD_INT_INIT(VASSAL_SCORE_PERCENT, 50),
	GD_INT_INIT(VASSAL_HAPPINESS_PERCENT, 20),
	GD_INT_INIT(VASSAL_PRESSURE_PERCENT, 100),
	GD_INT_INIT(VASSALAGE_FREE_YIELD_FROM_VASSAL_PERCENT, 20),
	GD_INT_INIT(VASSALAGE_VASSAL_LOST_CITIES_THRESHOLD, 75),
	GD_INT_INIT(VASSALAGE_VASSAL_POPULATION_THRESHOLD, 300),
	GD_INT_INIT(VASSALAGE_VASSAL_MASTER_CITY_PERCENT_THRESHOLD, 60),
	GD_INT_INIT(VASSALAGE_VASSAL_MASTER_POP_PERCENT_THRESHOLD, 60),
	GD_INT_INIT(VASSALAGE_CAPITULATE_BASE_THRESHOLD, 100),
	GD_INT_INIT(VASSALAGE_LIBERATE_BASE_THRESHOLD, 100),
	GD_INT_INIT(VASSALAGE_TREATMENT_THRESHOLD_DISAGREE, 1),
	GD_INT_INIT(VASSALAGE_TREATMENT_THRESHOLD_MISTREATED, 25),
	GD_INT_INIT(VASSALAGE_TREATMENT_THRESHOLD_UNHAPPY, 50),
	GD_INT_INIT(VASSALAGE_TREATMENT_THRESHOLD_ENSLAVED, 80),
	GD_INT_INIT(VICTORY_DOMINATION_CONTROL_PERCENT, 67),

	// -- floats -- //
	GD_FLOAT_INIT(AI_STRATEGY_NEED_IMPROVEMENT_CITY_RATIO, 0.34f),
	GD_FLOAT_INIT(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER, 0.2f),
	GD_FLOAT_INIT(AI_CITYSTRATEGY_YIELD_DEFICIENT_FOOD, 0.5f),
	GD_FLOAT_INIT(AI_CITYSTRATEGY_YIELD_DEFICIENT_PRODUCTION, 1.0f),
	GD_FLOAT_INIT(AI_CITYSTRATEGY_YIELD_DEFICIENT_GOLD, 1.5f),
	GD_FLOAT_INIT(AI_CITYSTRATEGY_YIELD_DEFICIENT_SCIENCE, 2.5f),
	GD_FLOAT_INIT(AI_CITYSTRATEGY_YIELD_DEFICIENT_CULTURE, 2.5f),
	GD_FLOAT_INIT(AI_CITYSTRATEGY_YIELD_DEFICIENT_FAITH, 2.5f),
	GD_FLOAT_INIT(UNHAPPINESS_PER_POPULATION_FLOAT, 0.0f),
	GD_FLOAT_INIT(UNHAPPINESS_PER_OCCUPIED_POPULATION, 1.34f),
	GD_FLOAT_INIT(GLOBAL_GROWTH_PENALTY_PER_UNHAPPY, 2.5f),
	GD_FLOAT_INIT(GLOBAL_SETTLER_PRODUCTION_PENALTY_PER_UNHAPPY, 2.5f),
	GD_FLOAT_INIT(UNIT_UPGRADE_COST_MULTIPLIER_PER_ERA, 0.0f),
	GD_FLOAT_INIT(UNIT_UPGRADE_COST_EXPONENT, 1.0f),
	GD_FLOAT_INIT(UNHAPPINESS_PER_RELIGIOUS_MINORITY_POP, 0.5f),
	GD_FLOAT_INIT(UNHAPPINESS_PER_STARVING_POP, 1.0f),
	GD_FLOAT_INIT(UNHAPPINESS_PER_PILLAGED_TILE, 0.5f),
	GD_FLOAT_INIT(UNHAPPINESS_PER_ISOLATED_POP, 0.34f),
	GD_FLOAT_INIT(BALANCE_CORE_CORP_OFFICE_FRANCHISE_CONVERSION, 0.5f),
	GD_FLOAT_INIT(BALANCE_CORE_CORP_OFFICE_TR_CONVERSION, 1.0f),
	GD_FLOAT_INIT(DIPLO_VICTORY_CIV_DELEGATES_COEFFICIENT, 1.443f),
	GD_FLOAT_INIT(DIPLO_VICTORY_CIV_DELEGATES_CONSTANT, 7.000f),
	GD_FLOAT_INIT(DIPLO_VICTORY_CS_DELEGATES_COEFFICIENT, 16.023f),
	GD_FLOAT_INIT(DIPLO_VICTORY_CS_DELEGATES_CONSTANT, -13.758f),
	GD_FLOAT_INIT(AI_PRODUCTION_WEIGHT_BASE_MOD, 0.15f),
	GD_FLOAT_INIT(AI_PRODUCTION_WEIGHT_MOD_PER_TURN_LEFT, 0.015f),
	GD_FLOAT_INIT(AI_RESEARCH_WEIGHT_BASE_MOD, 0.2f),
	GD_FLOAT_INIT(AI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT, 0.035f),
	GD_FLOAT_INIT(HURRY_GOLD_PRODUCTION_EXPONENT, 0.75f),
	GD_FLOAT_INIT(CITY_ZOOM_LEVEL_1, 500.0f),
	GD_FLOAT_INIT(CITY_ZOOM_LEVEL_2, 700.0f),
	GD_FLOAT_INIT(CITY_ZOOM_LEVEL_3, 800.0f),
	GD_FLOAT_INIT(CITY_ZOOM_OFFSET, 20.0f),
	GD_FLOAT_INIT(CULTURE_COST_LATER_PLOT_EXPONENT, 1.1f),
	GD_FLOAT_INIT(POST_COMBAT_TEXT_DELAY, 2.0f),
	GD_FLOAT_INIT(FLAVOR_STANDARD_LOG10_TILES_PER_PLAYER, 2.1f),
	GD_FLOAT_INIT(AI_STRATEGY_DEFEND_MY_LANDS_UNITS_PER_CITY, 1.0f),
	GD_FLOAT_INIT(GOLD_GIFT_FRIENDSHIP_EXPONENT, 1.01f),
	GD_FLOAT_INIT(GOLD_GIFT_FRIENDSHIP_DIVISOR, 9.8f),
	GD_FLOAT_INIT(CITY_GROWTH_MULTIPLIER, 8.0f),
	GD_FLOAT_INIT(CITY_GROWTH_EXPONENT, 1.5f),
	GD_FLOAT_INIT(POLICY_COST_EXPONENT, 2.01f),
	GD_FLOAT_INIT(POLICY_COST_EXTRA_VALUE, 0.0f),
	GD_FLOAT_INIT(CITY_STRENGTH_TECH_BASE, 5.5f),
	GD_FLOAT_INIT(CITY_STRENGTH_TECH_EXPONENT, 2.8f),
	GD_FLOAT_INIT(LEAGUE_PROJECT_REWARD_TIER_1_THRESHOLD, 0.5f),
	GD_FLOAT_INIT(LEAGUE_PROJECT_REWARD_TIER_2_THRESHOLD, 1.0f),
	GD_FLOAT_INIT(OPINION_WEIGHT_VASSAL_TAX_EXPONENT, 1.5f),
	GD_FLOAT_INIT(TECH_COST_ERA_EXPONENT, 0.7f),
	GD_FLOAT_INIT(VASSALAGE_VASSAL_CITY_POP_EXPONENT, 0.8f),
	GD_FLOAT_INIT(MINOR_INFLUENCE_SCALING_DECAY_EXPONENT, 1.5f),
	GD_FLOAT_INIT(APPROACH_SHIFT_PERCENT, 0.30f),
	GD_FLOAT_INIT(DISTRESS_MEDIAN_RATE_CHANGE, 0.65f),
	GD_FLOAT_INIT(POVERTY_MEDIAN_RATE_CHANGE, 0.65f),
	GD_FLOAT_INIT(ILLITERACY_MEDIAN_RATE_CHANGE, 0.65f),
	GD_FLOAT_INIT(BOREDOM_MEDIAN_RATE_CHANGE, 0.65f),

	// -- post defines -- //
	GD_INT_INIT(LAND_TERRAIN, 0),
	GD_INT_INIT(DEEP_WATER_TERRAIN, 6),
	GD_INT_INIT(SHALLOW_WATER_TERRAIN, 5),
	GD_INT_INIT(RUINS_IMPROVEMENT, 0),
	GD_INT_INIT(NUKE_FEATURE, 6),
	GD_INT_INIT(ARTIFACT_RESOURCE, 35),
	GD_INT_INIT(HIDDEN_ARTIFACT_RESOURCE, 39),
	GD_INT_INIT(CAPITAL_BUILDINGCLASS, 28),
	GD_INT_INIT(WALLS_BUILDINGCLASS, -1),
	GD_INT_INIT(DEFAULT_SPECIALIST, 0),
	GD_INT_INIT(NUKE_TRIGGER_PROJECT, -1),
	GD_INT_INIT(SPACE_RACE_TRIGGER_PROJECT, 1),
	GD_INT_INIT(SPACESHIP_CAPSULE, 2),
	GD_INT_INIT(SPACESHIP_BOOSTER, 5),
	GD_INT_INIT(SPACESHIP_STASIS, 3),
	GD_INT_INIT(SPACESHIP_ENGINE, 4),
	GD_INT_INIT(INITIAL_CITY_ROUTE_TYPE, 0),
	GD_INT_INIT(AI_HANDICAP, 8),
	GD_INT_INIT(MULTIPLAYER_HANDICAP, 3),
	GD_INT_INIT(STANDARD_HANDICAP, 1),
	GD_INT_INIT(STANDARD_GAMESPEED, 2),
	GD_INT_INIT(STANDARD_ERA, 0),
	GD_INT_INIT(LAST_EMBARK_ART_ERA, 4),
	GD_INT_INIT(LAST_UNIT_ART_ERA, 4),
	GD_INT_INIT(LAST_BRIDGE_ART_ERA, 5),
	GD_INT_INIT(BARBARIAN_HANDICAP, 1),
	GD_INT_INIT(BARBARIAN_CIVILIZATION, 19),
	GD_INT_INIT(BARBARIAN_LEADER, 3),
	GD_INT_INIT(MINOR_CIV_HANDICAP, 3),
	GD_INT_INIT(MINOR_CIVILIZATION, 18),
	GD_INT_INIT(PROMOTION_EMBARKATION, 76),
	GD_INT_INIT(PROMOTION_DEFENSIVE_EMBARKATION, 77),
	GD_INT_INIT(PROMOTION_ALLWATER_EMBARKATION, 146),
	GD_INT_INIT(PROMOTION_DEEPWATER_EMBARKATION, -1),
	GD_INT_INIT(PROMOTION_DEFENSIVE_DEEPWATER_EMBARKATION, -1),
	GD_INT_INIT(PROMOTION_FLAGSHIP, -1),
	GD_INT_INIT(PROMOTION_OCEAN_IMPASSABLE_UNTIL_ASTRONOMY, 115),
	GD_INT_INIT(PROMOTION_OCEAN_IMPASSABLE, 116),
	GD_INT_INIT(PROMOTION_ONLY_DEFENSIVE, -1),
	GD_INT_INIT(PROMOTION_UNWELCOME_EVANGELIST, -1),
	GD_INT_INIT(BARBARIAN_CAMP_IMPROVEMENT, 1),
	GD_INT_INIT(EMBASSY_IMPROVEMENT, -1),
	GD_INT_INIT(PROMOTION_GOODY_HUT_PICKER, -1),
	GD_INT_INIT(POLICY_BRANCH_FREEDOM, -1),
	GD_INT_INIT(POLICY_BRANCH_AUTOCRACY, -1),
	GD_INT_INIT(POLICY_BRANCH_ORDER, -1),
	GD_INT_INIT(POLICY_BRANCH_HERITAGE, -1),
	GD_INT_INIT(RELIGION_LAST_FOUND_ERA, 3),
	GD_INT_INIT(RELIGION_GP_FAITH_PURCHASE_ERA, 4),
	GD_INT_INIT(IDEOLOGY_START_ERA, 4),
	GD_INT_INIT(IDEOLOGY_PREREQ_ERA, 4),
	GD_INT_INIT(ANCIENT_ERA, -1),
	GD_INT_INIT(MEDIEVAL_ERA, -1),
	GD_INT_INIT(INDUSTRIAL_ERA, -1),
	GD_INT_INIT(TOURISM_START_TECH, 0),
	GD_INT_INIT(TOURISM_START_ERA, 0),
	GD_INT_INIT(JUGGERNAUT_PROMOTION, -1),
	GD_INT_INIT(MARCH_PROMOTION, -1),
	GD_INT_INIT(MARCH_SKIRMISHER_PROMOTION, -1),
	GD_INT_INIT(MORALE_PROMOTION, -1),
	GD_INT_INIT(INQUISITION_EFFECTIVENESS, 100),
	GD_INT_INIT(INQUISITOR_CONVERSION_REDUCTION_FACTOR, 2),

	////////////// END DEFINES //////////////////

	m_pEconomicAIStrategies(NULL),
	m_pCitySpecializations(NULL),
	m_pMilitaryAIStrategies(NULL),
	m_pAIGrandStrategies(NULL),
	m_pPolicies(NULL),
	m_pTechs(NULL),
	m_pBuildings(NULL),
	m_pEmphases(NULL),
	m_pTraits(NULL),
	m_pReligions(NULL),
	m_pBeliefs(NULL),
	m_pSpyPassiveBonuses(NULL),
	m_pSpyPassiveBonusesDiplomat(NULL),
	m_pLeagueSpecialSessions(NULL),
	m_pLeagueNames(NULL),
	m_pLeagueProjects(NULL),
	m_pLeagueProjectRewards(NULL),
	m_pResolutions(NULL),
	m_pAchievements(NULL),
#if defined(MOD_BALANCE_CORE)
	m_pCorporations(NULL),
	m_pContracts(NULL),
#endif
	m_pGameDatabase(NULL),
	m_saveVersion(SAVE_VERSION_LATEST),
	m_gameDataHash()
{
}

CvGlobals::~CvGlobals()
{
	uninit();
}

//cannot use GC.getGame().getActivePlayer() in observer mode
PlayerTypes GetCurrentPlayer()
{
	for(int i = 0; i < MAX_PLAYERS; ++i)
	{
		CvPlayerAI& kPlayer = GET_PLAYER( (PlayerTypes)i );
		if (kPlayer.isTurnActive())
			return (PlayerTypes)i;
	}
	return NO_PLAYER;
}

#if defined(MOD_DEBUG_MINIDUMP)
#ifdef WIN32
/************************************************************************************************/
/* MINIDUMP_MOD                           04/10/11                                terkhen       */
/* See http://www.debuginfo.com/articles/effminidumps.html                                      */
/*                                                                                              */
/* Originally for Civ 4, ported by ls612 to Civ 5                                               */
/* See http://forums.civfanatics.com/showthread.php?t=498919                                    */
/************************************************************************************************/

#pragma comment(lib, "dbghelp.lib")
void CreateMiniDump(EXCEPTION_POINTERS* pep)
{
	// Initialize debug symbols
	HANDLE hProcess = GetCurrentProcess();
	SymInitialize(hProcess, NULL, TRUE);

	// Get timestamp
	SYSTEMTIME st;
	GetLocalTime(&st);
	TCHAR szTimestamp[64];
	_stprintf_s(szTimestamp, sizeof(szTimestamp) / sizeof(TCHAR),
		_T("%04d%02d%02d_%02d%02d%02d"),
		st.wYear, st.wMonth, st.wDay,
		st.wHour, st.wMinute, st.wSecond);

	// Extract just version number and commit hash from CURRENT_GAMECORE_VERSION
	char shortVersion[64];
	const char* fullVersion = CURRENT_GAMECORE_VERSION;
	const char* versionStart = strchr(fullVersion, '-');
	if (versionStart) {
		versionStart++; // Skip the '-'
		const char* spaceAfterVersion = strchr(versionStart, ' ');
		if (spaceAfterVersion) {
			// Copy just the version number (e.g. "4.16")
			size_t versionLen = spaceAfterVersion - versionStart;
			strncpy_s(shortVersion, sizeof(shortVersion), versionStart, versionLen);
			shortVersion[versionLen] = '\0';

			// Add the commit hash if present
			const char* commitHash = spaceAfterVersion + 1;
			const char* nextSpace = strchr(commitHash, ' ');
			if (nextSpace) {
				strcat_s(shortVersion, sizeof(shortVersion), "_");
				strncat_s(shortVersion, sizeof(shortVersion), commitHash, nextSpace - commitHash);
			}
		}
	}
	else {
		strcpy_s(shortVersion, sizeof(shortVersion), "unknown");
	}

	// Generate dump filename with version, commit hash and build type
	TCHAR szDumpPath[MAX_PATH];
	_stprintf_s(szDumpPath, MAX_PATH, _T("CvMiniDump_%s_%hs_%s.dmp"),
		szTimestamp,
		shortVersion,
#ifdef VPDEBUG
		_T("Debug")
#else
		_T("Release")
#endif
	);

	HANDLE hFile = CreateFile(szDumpPath, GENERIC_READ | GENERIC_WRITE,
		0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);

	if ((hFile == NULL) || (hFile == INVALID_HANDLE_VALUE)) {
		return;
	}

	MINIDUMP_EXCEPTION_INFORMATION mdei;
	mdei.ThreadId = GetCurrentThreadId();
	mdei.ExceptionPointers = pep;
	mdei.ClientPointers = FALSE;

	// Configure dump type based on build
	MINIDUMP_TYPE mdt;
#ifdef VPDEBUG
	OutputDebugString(_T("Creating Debug minidump\n"));
	mdt = (MINIDUMP_TYPE)(
		MiniDumpWithFullMemory |             // Complete memory snapshot
		MiniDumpWithFullMemoryInfo |         // Memory state information
		MiniDumpWithHandleData |             // Handle usage
		MiniDumpWithUnloadedModules |        // Track unloaded DLLs
		MiniDumpWithThreadInfo |             // Extended thread information
		MiniDumpWithProcessThreadData |      // Process thread data
		MiniDumpWithCodeSegs |               // Code segments
		MiniDumpWithDataSegs |               // Data segments
		MiniDumpWithPrivateReadWriteMemory | // Private memory
		MiniDumpWithFullAuxiliaryState |     // Auxiliary state (handles, GDI objects)
		MINIDUMP_TYPE(0x00000040) |          // MiniDumpWithTokenInformation
		MINIDUMP_TYPE(0x00000400) |          // MiniDumpWithPrivateWriteCopyMemory
		MINIDUMP_TYPE(0x00020000) |          // MiniDumpIgnoreInaccessibleMemory
		MiniDumpWithIndirectlyReferencedMemory | // Memory referenced by locals
		MINIDUMP_TYPE(0x00000800)            // MiniDumpWithModuleHeaders
		);
#else
	OutputDebugString(_T("Creating Release minidump\n"));
	mdt = (MINIDUMP_TYPE)(
		MiniDumpNormal |                    // Basic info
		MiniDumpWithThreadInfo |            // Thread information
		MINIDUMP_TYPE(0x00020000)           // MiniDumpIgnoreInaccessibleMemory
		);
#endif

	// Add version info
	MINIDUMP_USER_STREAM_INFORMATION additional_streams;
	MINIDUMP_USER_STREAM user_streams[1];
	char version_info[256];

	sprintf_s(version_info, sizeof(version_info),
		"Version: %s", CURRENT_GAMECORE_VERSION);

	user_streams[0].Type = 0x00000003;  // MinidumpCommentStreamA
	user_streams[0].Buffer = version_info;
	user_streams[0].BufferSize = static_cast<ULONG>(strlen(version_info) + 1);

	additional_streams.UserStreamCount = 1;
	additional_streams.UserStreamArray = user_streams;

	// Write the dump
	MiniDumpWriteDump(
		GetCurrentProcess(),
		GetCurrentProcessId(),
		hFile,
		mdt,
		(pep != NULL) ? &mdei : NULL,
		&additional_streams,
		NULL);

	CloseHandle(hFile);
}

LONG WINAPI CustomFilter(EXCEPTION_POINTERS* ExceptionInfo)
{
	CreateMiniDump(ExceptionInfo);
	return EXCEPTION_EXECUTE_HANDLER;
}
#endif

//
// allocate
//
void CvGlobals::init()
{
#if defined(MOD_DEBUG_MINIDUMP)
	SetUnhandledExceptionFilter(CustomFilter);
#ifdef VPDEBUG
	OutputDebugString(_T("Debug MiniDump handler installed\n"));
#else
	OutputDebugString(_T("Release MiniDump handler installed\n"));
#endif
#endif // WIN32
#endif // defined(MOD_DEBUG_MINIDUMP)

	//
	// These vars are used to initialize the globals.
	//
	int aiPlotDirectionX[NUM_DIRECTION_TYPES + 2] =
	{
		0,	// DIRECTION_NORTHEAST
		1,	// DIRECTION_EAST
		1,	// DIRECTION_SOUTHEAST
		0,	// DIRECTION_SOUTHWEST
		-1,	// DIRECTION_WEST
		-1,	// DIRECTION_NORTHWEST
		0,	// DUMMY
		0,	// NONE
	};

	int aiPlotDirectionY[NUM_DIRECTION_TYPES + 2] =
	{
		1,	// DIRECTION_NORTHEAST
		0,	// DIRECTION_EAST
		-1,	// DIRECTION_SOUTHEAST
		-1,	// DIRECTION_SOUTHWEST
		0,	// DIRECTION_WEST
		1,	// DIRECTION_NORTHWEST
		0,	// DUMMY
		0,	// NONE
	};

	// these are now in hex-space coords

	int aiRingPlotXOffset[MAX_CITY_PLOTS] =
	{
		//	0
		0,
		//	1	2	3	4	5	6
		0,  1,  1,  0, -1, -1,
		//	7	8	9	10	11	12	13	14	15	16	17	18
		0,  1,  2,  2,  2,  1,  0,  -1, -2, -2, -2, -1,
		//	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36
		0,  1,  2,  3,  3,  3,  3,  2,  1,  0,  -1, -2, -3, -3, -3, -3, -2, -1,
		//	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60
		0,  1,  2,  3,  4,  4,  4,  4,  4,  3,  2,  1,  0,  -1,  -2, -3, -4, -4, -4, -4, -4, -3, -2, -1,
		//	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84  85  86  87  88  89  90
		0,  1,  2,  3,  4,  5,  5,  5,  5,  5,  5,  4,  3,  2,  1,  0,  -1, -2, -3, -4, -5, -5, -5, -5, -5, -5, -4, -3, -2, -1,
		// The pattern for the Nth ring is 0 .. N, (N-1) * N, N .. -N, (N-1) * -N, -N .. -1
	};


	int aiRingPlotYOffset[MAX_CITY_PLOTS] =
	{
		//	0
		0,
		//	1	2	3	4	5	6
		1,  0, -1, -1,  0,  1,
		//	7	8	9	10	11	12	13	14	15	16	17	18
		2,  1,  0, -1,	-2, -2, -2, -1,  0,  1,  2,  2,
		//	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36
		3,  2,  1,  0,  -1, -2, -3, -3, -3, -3, -2, -1,  0,  1,  2,  3,  3,  3,
		//	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60
		4,  3,  2,  1,  0, -1, -2, -3, -4, -4, -4, -4, -4, -3, -2, -1,  0,  1,  2,  3,  4,  4,  4,  4,
		//	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84  85  86  87  88  89  90
		5,  4,  3,  2,  1,  0,  -1, -2, -3, -4, -5, -5, -5, -5, -5, -5, -4, -3, -2, -1,  0,  1,  2,  3, 4,  5,  5,  5,  5,  5,
		// The pattern for the Nth ring is N .. -N, (N-1) * -N, -N .. N, (N-1) * N
	};


	int aiRingFromLinearOffset[MAX_CITY_PLOTS] =
	{
		0,
		1,  1,  1,  1,  1,  1,
		2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
		4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
		5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
		// The pattern for the Nth ring is (6*N) N
	};


	int aaiRingPlotIndex[2*MAX_CITY_RADIUS+1][2*MAX_CITY_RADIUS+1] =
	{
		// this is the 5 ring layout
		//	 -5  -4  -3  -2  -1   0   1   2   3  4  5  -- in the Y direction
		{-1, -1, -1, -1, -1, 81, 82, 83, 84, 85, 86,}, // -5 hex-space x
		{-1, -1, -1, -1, 80, 53, 54, 55, 56, 57, 87,}, // -4 hex-space x
		{-1, -1, -1, 79, 52, 31, 32, 33, 34, 58, 88,}, // -3 hex-space x
		{-1, -1, 78, 51, 30, 15, 16, 17, 35, 59, 89,}, // -2 hex-space x
		{-1, 77, 50, 29, 14,  5,  6, 18, 36, 60, 90,}, // -1 hex-space x
		{76, 49, 28, 13,  4,  0,  1,  7, 19, 37, 61,}, //  0 hex-space x
		{75, 48, 27, 12,  3,  2,  8, 20, 38, 62, -1,}, //  1 hex-space x
		{74, 47, 26, 11, 10,  9, 21, 39, 63, -1, -1,}, //  2 hex-space x
		{73, 46, 25, 24, 23, 22, 40, 64, -1, -1, -1,}, //  3 hex-space x
		{72, 45, 44, 43, 42, 41, 65, -1, -1, -1, -1,}, //  4 hex-space x
		{71, 70, 69, 68, 67, 66, -1, -1, -1, -1, -1,}, //  5 hex-space x
		// There is no pattern to this, adding a ring requires adding a new row at the top and bottom AND a -1 entry at the start and end of each existing row
	};

	DirectionTypes aeTurnRightDirection[NUM_DIRECTION_TYPES] =
	{
		DIRECTION_EAST,			// DIRECTION_NORTHEAST or DIRECTION_NORTH (deprecated)
		DIRECTION_SOUTHEAST,	// DIRECTION_EAST
		DIRECTION_SOUTHWEST,	// DIRECTION_SOUTHEAST
		DIRECTION_WEST,			// DIRECTION_SOUTHWEST or DIRECTION_SOUTH (deprecated)
		DIRECTION_NORTHWEST,	// DIRECTION_WEST
		DIRECTION_NORTHEAST,	// DIRECTION_NORTHWEST
	};

	DirectionTypes aeTurnLeftDirection[NUM_DIRECTION_TYPES] =
	{
		DIRECTION_NORTHWEST,	// DIRECTION_NORTHEAST or DIRECTION_NORTH (deprecated)
		DIRECTION_NORTHEAST,	// DIRECTION_EAST
		DIRECTION_EAST,			// DIRECTION_SOUTHEAST
		DIRECTION_SOUTHEAST,	// DIRECTION_SOUTHWEST or DIRECTION_SOUTH (deprecated)
		DIRECTION_SOUTHWEST,	// DIRECTION_WEST
		DIRECTION_WEST,			// DIRECTION_NORTHWEST
	};

	CvAssertMsg(gDLL != NULL, "Civ app needs to set gDLL");
	m_asyncRand = FNEW(CvRandom("UiRng"), c_eCiv5GameplayDLL, 0);

	gDLL->InitGlobals();	// some globals need to be allocated outside the dll

	m_game = FNEW(CvGame, c_eCiv5GameplayDLL, 0);
	m_map = FNEW(CvMap, c_eCiv5GameplayDLL, 0);

	m_pEconomicAIStrategies = FNEW(CvEconomicAIStrategyXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pCitySpecializations = FNEW(CvCitySpecializationXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pMilitaryAIStrategies = FNEW(CvMilitaryAIStrategyXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pAIGrandStrategies = FNEW(CvAIGrandStrategyXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pAICityStrategies = FNEW(CvAICityStrategies, c_eCiv5GameplayDLL, 0);
	m_pPolicies = FNEW(CvPolicyXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pTechs = FNEW(CvTechXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pBuildings = FNEW(CvBuildingXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pUnits = FNEW(CvUnitXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pProjects = FNEW(CvProjectXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pPromotions = FNEW(CvPromotionXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pImprovements = FNEW(CvImprovementXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pEmphases = FNEW(CvEmphasisXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pTraits = FNEW(CvTraitXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pReligions = FNEW(CvReligionXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pBeliefs = FNEW(CvBeliefXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pSpyPassiveBonuses = FNEW(CvSpyPassiveBonusXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pSpyPassiveBonusesDiplomat = FNEW(CvSpyPassiveBonusDiplomatXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pLeagueSpecialSessions = FNEW(CvLeagueSpecialSessionXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pLeagueNames = FNEW(CvLeagueNameXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pLeagueProjects = FNEW(CvLeagueProjectXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pLeagueProjectRewards = FNEW(CvLeagueProjectRewardXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pResolutions = FNEW(CvResolutionXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pNotifications = FNEW(CvNotificationXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pAchievements = FNEW(CvAchievementXMLEntries, c_eCiv5GameplayDLL, 0);
#if defined(MOD_BALANCE_CORE)
	m_pCorporations = FNEW(CvCorporationXMLEntries, c_eCiv5GameplayDLL, 0);
	m_pContracts = FNEW(CvContractXMLEntries, c_eCiv5GameplayDLL, 0);
#endif

	CvPlayerAI::initStatics();
	CvTeam::initStatics();

	memcpy(m_aiPlotDirectionX, aiPlotDirectionX, sizeof(m_aiPlotDirectionX));
	memcpy(m_aiPlotDirectionY, aiPlotDirectionY, sizeof(m_aiPlotDirectionY));
	memcpy(m_aiRingPlotXOffset, aiRingPlotXOffset, sizeof(m_aiRingPlotXOffset));
	memcpy(m_aiRingPlotYOffset, aiRingPlotYOffset, sizeof(m_aiRingPlotYOffset));
	memcpy(m_aiRingFromLinearOffset, aiRingFromLinearOffset, sizeof(m_aiRingFromLinearOffset));
	memcpy(m_aeTurnLeftDirection, aeTurnLeftDirection, sizeof(m_aeTurnLeftDirection));
	memcpy(m_aeTurnRightDirection, aeTurnRightDirection, sizeof(m_aeTurnRightDirection));
	memcpy(m_aaiRingPlotIndex, aaiRingPlotIndex, sizeof(m_aaiRingPlotIndex));

	m_pathFinder = new CvTwoLayerPathFinder();
	m_interfacePathFinder = new CvTwoLayerPathFinder();
	m_stepFinder = new CvStepFinder();
}

//
// free
//
void CvGlobals::uninit()
{
	CvPlayerAI::freeStatics();
	CvTeam::freeStatics();

	SAFE_DELETE(m_map);
	SAFE_DELETE(m_game);
	SAFE_DELETE(m_asyncRand);

	deleteInfoArrays();

	SAFE_DELETE(m_pEconomicAIStrategies);
	SAFE_DELETE(m_pCitySpecializations);
	SAFE_DELETE(m_pMilitaryAIStrategies);
	SAFE_DELETE(m_pAIGrandStrategies);
	SAFE_DELETE(m_pPolicies);
	SAFE_DELETE(m_pBuildings);
	SAFE_DELETE(m_pUnits);
	SAFE_DELETE(m_pProjects);
	SAFE_DELETE(m_pPromotions);
	SAFE_DELETE(m_pEmphases);
	SAFE_DELETE(m_pTraits);
	SAFE_DELETE(m_pReligions);
	SAFE_DELETE(m_pBeliefs);
#if defined(MOD_BALANCE_CORE)
	SAFE_DELETE(m_pCorporations);
	SAFE_DELETE(m_pContracts);
#endif
	SAFE_DELETE(m_pSpyPassiveBonuses);
	SAFE_DELETE(m_pSpyPassiveBonusesDiplomat);
	SAFE_DELETE(m_pLeagueSpecialSessions);
	SAFE_DELETE(m_pLeagueNames);
	SAFE_DELETE(m_pLeagueProjects);
	SAFE_DELETE(m_pLeagueProjectRewards);
	SAFE_DELETE(m_pResolutions);
	SAFE_DELETE(m_pNotifications);
	SAFE_DELETE(m_pAchievements);
	SAFE_DELETE(m_pImprovements); // player uses the improvement count in deallocating.
	SAFE_DELETE(m_pTechs);        // improvements uses tech to deallocate. arrghh!

	m_kGlobalDefinesLookup.Release();

	if(gDLL)
		gDLL->UninitGlobals();	// free globals allocated outside the dll

	SAFE_DELETE(m_pathFinder);
	SAFE_DELETE(m_interfacePathFinder);
	SAFE_DELETE(m_stepFinder);

	// already deleted outside of the dll, set to null for safety
	m_pathFinder=NULL;
	m_interfacePathFinder=NULL;
	m_stepFinder=NULL;
}

//------------------------------------------------------------------------------
CvCity* CvGlobals::UnwrapCityPointer(ICvCity1* pCity)
{
	return (NULL != pCity)? static_cast<CvDllCity*>(pCity)->GetInstance() : NULL;
}
//------------------------------------------------------------------------------
CvInterfacePtr<ICvCity1> CvGlobals::WrapCityPointer(CvCity* pCity)
{
	return CvInterfacePtr<ICvCity1>((NULL != pCity)? new CvDllCity(pCity) : NULL);
}
//------------------------------------------------------------------------------
CvDeal* CvGlobals::UnwrapDealPointer(ICvDeal1* pDeal)
{
	return (NULL != pDeal)? static_cast<CvDllDeal*>(pDeal)->GetInstance() : NULL;
}
//------------------------------------------------------------------------------
CvInterfacePtr<ICvDeal1> CvGlobals::WrapDealPointer(CvDeal* pDeal)
{
	return CvInterfacePtr<ICvDeal1>((NULL != pDeal)? new CvDllDeal(pDeal) : NULL);
}
//------------------------------------------------------------------------------
CvPlot* CvGlobals::UnwrapPlotPointer(ICvPlot1* pPlot)
{
	return (NULL != pPlot)? static_cast<CvDllPlot*>(pPlot)->GetInstance() : NULL;
}
//------------------------------------------------------------------------------
CvInterfacePtr<ICvPlot1> CvGlobals::WrapPlotPointer(CvPlot* pPlot)
{
	return CvInterfacePtr<ICvPlot1>((NULL != pPlot)? new CvDllPlot(pPlot) : NULL);
}
//------------------------------------------------------------------------------
CvRandom* CvGlobals::UnwrapRandomPointer(ICvRandom1* pRandom)
{
	return (NULL != pRandom)? static_cast<CvDllRandom*>(pRandom)->GetInstance() : NULL;
}
//------------------------------------------------------------------------------
CvInterfacePtr<ICvRandom1> CvGlobals::WrapRandomPointer(CvRandom* pRandom)
{
	return CvInterfacePtr<ICvRandom1>((NULL != pRandom)? new CvDllRandom(pRandom) : NULL);
}
//------------------------------------------------------------------------------
CvInterfacePtr<ICvUnit1> CvGlobals::WrapUnitPointer(CvUnit* pUnit)
{
	return CvInterfacePtr<ICvUnit1>((NULL != pUnit)? new CvDllUnit(pUnit) : NULL);
}
//------------------------------------------------------------------------------
CvUnit* CvGlobals::UnwrapUnitPointer(ICvUnit1* pUnit)
{
	return (NULL != pUnit)? static_cast<CvDllUnit*>(pUnit)->GetInstance() : NULL;
}
//------------------------------------------------------------------------------
CvGlobals& CvGlobals::getInstance()
{
	return gGlobals;
}

CvRandom& CvGlobals::getASyncRand()
{
	return *m_asyncRand;
}

void CvGlobals::InitializePathfinders(int iX, int iY, bool bWx, bool bWy)
{
	if (m_pathFinder)
	{
		m_pathFinder->Initialize(iX, iY, bWx, bWy);
		m_pathFinder->SetName("unit pf");
	}
	if (m_interfacePathFinder)
	{
		m_interfacePathFinder->Initialize(iX, iY, bWx, bWy);
		m_interfacePathFinder->SetName("iface pf");
	}
	if (m_stepFinder)
	{
		m_stepFinder->Initialize(iX, iY, bWx, bWy);
		m_stepFinder->SetName("stepfinder");
	}
}

CvTwoLayerPathFinder& CvGlobals::GetPathFinder()
{
	//important, avoid deadlocks
	return gDLL->IsGameCoreThread() ? *m_pathFinder : *m_interfacePathFinder;
}

CvStepFinder& CvGlobals::GetStepFinder()
{
	return *m_stepFinder;
}

ICvDLLDatabaseUtility1* CvGlobals::getDatabaseLoadUtility()
{
	if(m_pkDatabaseLoadUtility == NULL)
		m_pkDatabaseLoadUtility = new CvDllDatabaseUtility(DB);

	//By using query interface, we implicitly increment the reference count and avoid
	//a new allocation.
	return m_pkDatabaseLoadUtility->QueryInterface<ICvDLLDatabaseUtility1>();
}

std::vector<CvInterfaceModeInfo*>& CvGlobals::getInterfaceModeInfo()
{
	return m_paInterfaceModeInfo;
}

CvInterfaceModeInfo* CvGlobals::getInterfaceModeInfo(InterfaceModeTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < NUM_INTERFACEMODE_TYPES);
	if(e > -1 && e < (int)m_paInterfaceModeInfo.size())
		return m_paInterfaceModeInfo[e];
	else
		return NULL;
}

bool CvGlobals::getLogging() const
{
	return m_bLogging;
}

void CvGlobals::setLogging(bool bLoggingEnabled)
{
	m_bLogging = bLoggingEnabled;
}

int CvGlobals::getRandLogging() const
{
	return m_iRandLogging;
}

void CvGlobals::setRandLogging(int iRandLoggingFlags)
{
	m_iRandLogging = iRandLoggingFlags;
}

bool CvGlobals::getAILogging() const
{
	return m_bAILogging;
}

void CvGlobals::setAILogging(bool bEnable)
{
	m_bAILogging = bEnable;
}

bool CvGlobals::getAIPerfLogging() const
{
	return m_bAIPerfLogging;
}

void CvGlobals::setAIPerfLogging(bool bEnable)
{
	m_bAIPerfLogging = bEnable;
}

bool CvGlobals::GetBuilderAILogging() const
{
	return m_bBuilderAILogging;
}

void CvGlobals::SetBuilderAILogging(bool bEnable)
{
	m_bBuilderAILogging = bEnable;
}

bool CvGlobals::getPlayerAndCityAILogSplit() const
{
	return m_bPlayerAndCityAILogSplit;
}

void CvGlobals::setPlayerAndCityAILogSplit(bool bEnable)
{
	m_bPlayerAndCityAILogSplit = bEnable;
}

const CvString CvGlobals::getDiploMinorLogFileName(const CvPlayer* pPlayer) const
{
	// Open the log file
	if (GC.getPlayerAndCityAILogSplit())
		return CvString("DiplomacyAI_MinorCiv_Log_") + pPlayer->getCivilizationShortDescription() + ".csv";

	//default
	return CvString("DiplomacyAI_MinorCiv_Log.csv");
}

const CvString CvGlobals::getDiploPeaceLogFileName(const CvPlayer* pPlayer) const
{
	// Open the log file
	if (GC.getPlayerAndCityAILogSplit())
		return CvString("DiplomacyAI_Peace_Log_") + pPlayer->getCivilizationShortDescription() + ".csv";

	//default
	return CvString("DiplomacyAI_Peace_Log.csv");
}

bool CvGlobals::GetTutorialLogging() const
{
	return m_bTutorialLogging;
}

void CvGlobals::SetTutorialLogging(bool bEnable)
{
	m_bTutorialLogging = bEnable;
}

bool CvGlobals::GetTutorialDebugging() const
{
	return m_bTutorialDebugging;
}

void CvGlobals::SetTutorialDebugging(bool bEnable)
{
	m_bTutorialDebugging = bEnable;
}

bool CvGlobals::GetAllowRClickMovementWhileScrolling() const
{
	return m_bAllowRClickMovementWhileCameraScrolling;
}

void CvGlobals::SetAllowRClickMovementWhileScrolling(bool bAllow)
{
	m_bAllowRClickMovementWhileCameraScrolling = bAllow;
}

bool CvGlobals::GetPostTurnAutosaves() const
{
	return m_bPostTurnAutosaves;
}

void CvGlobals::SetPostTurnAutosaves(bool bEnable)
{
	m_bPostTurnAutosaves = bEnable;
}


int* CvGlobals::getRingFromLinearOffset()
{
	return m_aiRingFromLinearOffset;
}

int CvGlobals::getRingIterationIndexHex(int i, int j)
{
	CvAssertMsg(i < (2*MAX_CITY_RADIUS+1), "Index out of bounds");
	CvAssertMsg(i > -1, "Index out of bounds");
	if(i < 0 || i >= (2*MAX_CITY_RADIUS+1)) return -1;

	CvAssertMsg(j < (2*MAX_CITY_RADIUS+1), "Index out of bounds");
	CvAssertMsg(j > -1, "Index out of bounds");
	if(j < 0 || j >= (2*MAX_CITY_RADIUS+1)) return -1;

	return m_aaiRingPlotIndex[i][j];
}

DirectionTypes* CvGlobals::getTurnLeftDirection()
{
	return m_aeTurnLeftDirection;
}

DirectionTypes CvGlobals::getTurnLeftDirection(int i)
{
	CvAssertMsg(i < NUM_DIRECTION_TYPES, "Index out of bounds");
	CvAssertMsg(i > -1, "Index out of bounds");

	if(i < 0 || i >= NUM_DIRECTION_TYPES) return NO_DIRECTION;

	return m_aeTurnLeftDirection[i];
}

DirectionTypes* CvGlobals::getTurnRightDirection()
{
	return m_aeTurnRightDirection;
}

DirectionTypes CvGlobals::getTurnRightDirection(int i)
{
	CvAssertMsg(i < NUM_DIRECTION_TYPES, "Index out of bounds");
	CvAssertMsg(i > -1, "Index out of bounds");

	if(i < 0 || i >= NUM_DIRECTION_TYPES) return NO_DIRECTION;

	return m_aeTurnRightDirection[i];
}

int CvGlobals::getNumWorldInfos()
{
	return GetGameDatabase()->Count("Worlds");
}

int CvGlobals::getNumClimateInfos()
{
	return GetGameDatabase()->Count("Climates");
}

int CvGlobals::getNumSeaLevelInfos()
{
	return GetGameDatabase()->Count("SeaLevels");
}

int CvGlobals::GetNumColorInfos()
{
	return (int)m_paColorInfo.size();
}

std::vector<CvColorInfo*>& CvGlobals::GetColorInfo()
{
	return m_paColorInfo;
}

CvColorInfo* CvGlobals::GetColorInfo(ColorTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GetNumColorInfos());
	if(e > -1 && e < (int)m_paColorInfo.size())
		return m_paColorInfo[e];
	else
		return NULL;
}


int CvGlobals::GetNumPlayerColorInfos()
{
	return (int)m_paPlayerColorInfo.size();
}

std::vector<CvPlayerColorInfo*>& CvGlobals::GetPlayerColorInfo()
{
	return m_paPlayerColorInfo;
}

CvPlayerColorInfo* CvGlobals::GetPlayerColorInfo(PlayerColorTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GetNumPlayerColorInfos());
	if(e > -1 && e < (int)m_paPlayerColorInfo.size())
		return m_paPlayerColorInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumEntityEventInfos()
{
	return (int)m_paEntityEventInfo.size();
}

std::vector<CvEntityEventInfo*>& CvGlobals::getEntityEventInfo()
{
	return m_paEntityEventInfo;
}

CvEntityEventInfo* CvGlobals::getEntityEventInfo(EntityEventTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumEntityEventInfos());
	if(e > -1 && e < (int)m_paEntityEventInfo.size())
		return m_paEntityEventInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumMultiUnitFormationInfos()
{
	return (int)m_paMultiUnitFormationInfo.size();
}

std::vector<CvMultiUnitFormationInfo*>& CvGlobals::getMultiUnitFormationInfo()
{
	return m_paMultiUnitFormationInfo;
}

CvMultiUnitFormationInfo* CvGlobals::getMultiUnitFormationInfo(int i)
{
	CvAssert(i > -1);
	CvAssert(i < GC.getNumMultiUnitFormationInfos());
	if(i > -1 && i < (int)m_paMultiUnitFormationInfo.size())
		return m_paMultiUnitFormationInfo[i];
	else
		return NULL;
}

int CvGlobals::getNumPlotInfos()
{
	return (int)m_paPlotInfo.size();
}

std::vector<CvPlotInfo*>& CvGlobals::getPlotInfo()
{
	return m_paPlotInfo;
}

CvPlotInfo* CvGlobals::getPlotInfo(PlotTypes ePlotNum)
{
	CvAssert(ePlotNum > -1);
	CvAssert(ePlotNum < GC.getNumPlotInfos());
	if(ePlotNum > -1 && ePlotNum < (int)m_paPlotInfo.size())
		return m_paPlotInfo[ePlotNum];
	else
		return NULL;
}

int CvGlobals::getNumGreatPersonInfos()
{
	return (int)m_paGreatPersonInfo.size();
}

std::vector<CvGreatPersonInfo*>& CvGlobals::getGreatPersonInfo()
{
	return m_paGreatPersonInfo;
}

CvGreatPersonInfo* CvGlobals::getGreatPersonInfo(GreatPersonTypes eGreatPersonNum)
{
	CvAssert(eGreatPersonNum > -1);
	CvAssert(eGreatPersonNum < GC.getNumGreatPersonInfos());
	if (eGreatPersonNum > -1 && eGreatPersonNum < (int)m_paGreatPersonInfo.size())
		return m_paGreatPersonInfo[eGreatPersonNum];
	else
		return NULL;
}

int CvGlobals::getNumTerrainInfos()
{
	return (int)m_paTerrainInfo.size();
}

std::vector<CvTerrainInfo*>& CvGlobals::getTerrainInfo()
{
	return m_paTerrainInfo;
}

CvTerrainInfo* CvGlobals::getTerrainInfo(TerrainTypes eTerrainNum)
{
	CvAssert(eTerrainNum > -1);
	CvAssert(eTerrainNum < GC.getNumTerrainInfos());
	if(eTerrainNum > -1 && eTerrainNum < (int)m_paTerrainInfo.size())
		return m_paTerrainInfo[eTerrainNum];
	else
		return NULL;
}

int CvGlobals::getNumResourceClassInfos()
{
	return (int)m_paResourceClassInfo.size();
}

std::vector<CvResourceClassInfo*>& CvGlobals::getResourceClassInfo()
{
	return m_paResourceClassInfo;
}

CvResourceClassInfo* CvGlobals::getResourceClassInfo(ResourceClassTypes eResourceNum)
{
	CvAssert(eResourceNum > -1);
	CvAssert(eResourceNum < GC.getNumResourceClassInfos());
	if(eResourceNum > -1 && eResourceNum < (int)m_paResourceClassInfo.size())
		return m_paResourceClassInfo[eResourceNum];
	else
		return NULL;
}


int CvGlobals::getNumResourceInfos()
{
	return (int)m_paResourceInfo.size();
}

std::vector<CvResourceInfo*>& CvGlobals::getResourceInfo()
{
	return m_paResourceInfo;
}

CvResourceInfo* CvGlobals::getResourceInfo(ResourceTypes eResourceNum)
{
	CvAssert(eResourceNum > -1);
	CvAssert(eResourceNum < GC.getNumResourceInfos());
	if(eResourceNum > -1 && eResourceNum < (int)m_paResourceInfo.size())
		return m_paResourceInfo[eResourceNum];
	else
		return NULL;
}

int CvGlobals::getNumFeatureInfos()
{
	return (int)m_paFeatureInfo.size();
}

std::vector<CvFeatureInfo*>& CvGlobals::getFeatureInfo()
{
	return m_paFeatureInfo;
}

CvFeatureInfo* CvGlobals::getFeatureInfo(FeatureTypes eFeatureNum)
{
	CvAssert(eFeatureNum > -1);
	CvAssert(eFeatureNum < GC.getNumFeatureInfos());
	if(eFeatureNum > -1 && eFeatureNum < (int)m_paFeatureInfo.size())
		return m_paFeatureInfo[eFeatureNum];
	else
		return NULL;
}

int& CvGlobals::getNumPlayableCivilizationInfos()
{
	return m_iNumPlayableCivilizationInfos;
}

int& CvGlobals::getNumAIPlayableCivilizationInfos()
{
	return m_iNumAIPlayableCivilizationInfos;
}

int CvGlobals::getNumCivilizationInfos()
{
	return (int)m_paCivilizationInfo.size();
}

std::vector<CvCivilizationInfo*>& CvGlobals::getCivilizationInfo()
{
	return m_paCivilizationInfo;
}

CvCivilizationInfo* CvGlobals::getCivilizationInfo(CivilizationTypes eCivilizationNum)
{
	CvAssert(eCivilizationNum > -1);
	CvAssert(eCivilizationNum < GC.getNumCivilizationInfos());
	if(eCivilizationNum > -1 && eCivilizationNum < (int)m_paCivilizationInfo.size())
		return m_paCivilizationInfo[eCivilizationNum];
	else
		return NULL;
}

CivilizationTypes CvGlobals::getCivilizationInfoIndex(const char* pszType)
{
	CvAssert(pszType != NULL);
	if(pszType != NULL)
	{
		int iIndex = 0;
		for(std::vector<CvCivilizationInfo*>::iterator itr = m_paCivilizationInfo.begin(); itr != m_paCivilizationInfo.end(); ++itr, ++iIndex)
		{
			const char* szType = (*itr)->GetType();
			if(szType && strcmp(szType, pszType) == 0)
				return (CivilizationTypes)iIndex;
		}
	}
	return NO_CIVILIZATION;
}

int CvGlobals::getNumMinorCivInfos()
{
	return (int)m_paMinorCivInfo.size();
}

int CvGlobals::GetNumPlayableMinorCivs() const
{
	int iFound = 0;
	int iCurrentMinorIndex = 0;

	for(; iCurrentMinorIndex < (int)m_paMinorCivInfo.size(); iCurrentMinorIndex++)
	{
		if(m_paMinorCivInfo[iCurrentMinorIndex] != NULL)
		{
			iFound++;
		}
	}

	return iFound;
}

std::vector<CvMinorCivInfo*>& CvGlobals::getMinorCivInfo()
{
	return m_paMinorCivInfo;
}

CvMinorCivInfo* CvGlobals::getMinorCivInfo(MinorCivTypes eMinorCivNum)
{
	CvAssert(eMinorCivNum > -1);
	CvAssert(eMinorCivNum < GC.getNumMinorCivInfos());
	if(eMinorCivNum > -1 && eMinorCivNum < (int)m_paMinorCivInfo.size())
		return m_paMinorCivInfo[eMinorCivNum];
	else
		return NULL;
}

int CvGlobals::getNumLeaderHeadInfos()
{
	return (int)m_paLeaderHeadInfo.size();
}

std::vector<CvLeaderHeadInfo*>& CvGlobals::getLeaderHeadInfo()
{
	return m_paLeaderHeadInfo;
}

CvLeaderHeadInfo* CvGlobals::getLeaderHeadInfo(LeaderHeadTypes eLeaderHeadNum)
{
	CvAssert(eLeaderHeadNum > -1);
	CvAssert(eLeaderHeadNum < GC.getNumLeaderHeadInfos());
	if(eLeaderHeadNum > -1 && eLeaderHeadNum < (int)m_paLeaderHeadInfo.size())
		return m_paLeaderHeadInfo[eLeaderHeadNum];
	else
		return NULL;
}

int CvGlobals::getNumUnitInfos()
{
	return m_pUnits->GetNumUnits();
}

std::vector<CvUnitEntry*>& CvGlobals::getUnitInfo()
{
	return m_pUnits->GetUnitEntries();
}

CvUnitEntry* CvGlobals::getUnitInfo(UnitTypes eUnitNum)
{
	CvAssert(eUnitNum > -1);
	CvAssert(eUnitNum < GC.getNumUnitInfos());
	if(eUnitNum > -1 && eUnitNum < GC.getNumUnitInfos())
		return m_pUnits->GetUnitEntries()[eUnitNum];
	else
		return NULL;
}

CvUnitXMLEntries* CvGlobals::GetGameUnits() const
{
	return m_pUnits;
}

int CvGlobals::getNumSpecialUnitInfos()
{
	return (int)m_paSpecialUnitInfo.size();
}

std::vector<CvSpecialUnitInfo*>& CvGlobals::getSpecialUnitInfo()
{
	return m_paSpecialUnitInfo;
}

CvSpecialUnitInfo* CvGlobals::getSpecialUnitInfo(SpecialUnitTypes eSpecialUnitNum)
{
	CvAssert(eSpecialUnitNum > -1);
	CvAssert(eSpecialUnitNum < GC.getNumSpecialUnitInfos());
	if(eSpecialUnitNum > -1 && eSpecialUnitNum < (int)m_paSpecialUnitInfo.size())
		return m_paSpecialUnitInfo[eSpecialUnitNum];
	else
		return NULL;
}

int CvGlobals::getNumVoteSourceInfos()
{
	return (int)m_paVoteSourceInfo.size();
}

std::vector<CvVoteSourceInfo*>& CvGlobals::getVoteSourceInfo()
{
	return m_paVoteSourceInfo;
}

CvVoteSourceInfo* CvGlobals::getVoteSourceInfo(VoteSourceTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumVoteSourceInfos());
	if(e > -1 && e < (int)m_paVoteSourceInfo.size())
		return m_paVoteSourceInfo[e];
	else
		return NULL;
}

#if defined(MOD_BALANCE_CORE_EVENTS)
int CvGlobals::getNumEventInfos()
{
	return (int)m_paEventInfo.size();
}

std::vector<CvModEventInfo*>& CvGlobals::getEventInfo()
{
	return m_paEventInfo;
}

CvModEventInfo* CvGlobals::getEventInfo(EventTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumEventInfos());
	if(e > -1 && e < (int)m_paEventInfo.size())
		return m_paEventInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumEventChoiceInfos()
{
	return (int)m_paEventChoiceInfo.size();
}

std::vector<CvModEventChoiceInfo*>& CvGlobals::getEventChoiceInfo()
{
	return m_paEventChoiceInfo;
}

CvModEventChoiceInfo* CvGlobals::getEventChoiceInfo(EventChoiceTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumEventChoiceInfos());
	if(e > -1 && e < (int)m_paEventChoiceInfo.size())
		return m_paEventChoiceInfo[e];
	else
		return NULL;
}
int CvGlobals::getNumCityEventInfos()
{
	return (int)m_paCityEventInfo.size();
}

std::vector<CvModCityEventInfo*>& CvGlobals::getCityEventInfo()
{
	return m_paCityEventInfo;
}

CvModCityEventInfo* CvGlobals::getCityEventInfo(CityEventTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumCityEventInfos());
	if(e > -1 && e < (int)m_paCityEventInfo.size())
		return m_paCityEventInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumCityEventChoiceInfos()
{
	return (int)m_paCityEventChoiceInfo.size();
}

std::vector<CvModEventCityChoiceInfo*>& CvGlobals::getCityEventChoiceInfo()
{
	return m_paCityEventChoiceInfo;
}

CvModEventCityChoiceInfo* CvGlobals::getCityEventChoiceInfo(CityEventChoiceTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumCityEventChoiceInfos());
	if(e > -1 && e < (int)m_paCityEventChoiceInfo.size())
		return m_paCityEventChoiceInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumEventLinkingInfos()
{
	return (int)m_paEventLinkingInfo.size();
}

std::vector<CvEventLinkingInfo*>& CvGlobals::getEventLinkingInfo()
{
	return m_paEventLinkingInfo;
}

CvEventLinkingInfo* CvGlobals::getEventLinkingInfo(EventTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumEventLinkingInfos());
	if(e > -1 && e < (int)m_paEventLinkingInfo.size())
		return m_paEventLinkingInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumEventChoiceLinkingInfos()
{
	return (int)m_paEventChoiceLinkingInfo.size();
}

std::vector<CvEventChoiceLinkingInfo*>& CvGlobals::getEventChoiceLinkingInfo()
{
	return m_paEventChoiceLinkingInfo;
}

CvEventChoiceLinkingInfo* CvGlobals::getEventChoiceLinkingInfo(EventChoiceTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumEventChoiceLinkingInfos());
	if(e > -1 && e < (int)m_paEventChoiceLinkingInfo.size())
		return m_paEventChoiceLinkingInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumCityEventLinkingInfos()
{
	return (int)m_paCityEventLinkingInfo.size();
}

std::vector<CvCityEventLinkingInfo*>& CvGlobals::getCityEventLinkingInfo()
{
	return m_paCityEventLinkingInfo;
}

CvCityEventLinkingInfo* CvGlobals::getCityEventLinkingInfo(CityEventTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumCityEventLinkingInfos());
	if(e > -1 && e < (int)m_paCityEventLinkingInfo.size())
		return m_paCityEventLinkingInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumCityEventChoiceLinkingInfos()
{
	return (int)m_paCityEventChoiceLinkingInfo.size();
}

std::vector<CvCityEventChoiceLinkingInfo*>& CvGlobals::getCityEventChoiceLinkingInfo()
{
	return m_paCityEventChoiceLinkingInfo;
}

CvCityEventChoiceLinkingInfo* CvGlobals::getCityEventChoiceLinkingInfo(CityEventChoiceTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumCityEventChoiceLinkingInfos());
	if(e > -1 && e < (int)m_paCityEventChoiceLinkingInfo.size())
		return m_paCityEventChoiceLinkingInfo[e];
	else
		return NULL;
}
#endif

int CvGlobals::getNumUnitCombatClassInfos()
{
	return (int)m_paUnitCombatClassInfo.size();
}

std::vector<CvBaseInfo*>& CvGlobals::getUnitCombatClassInfo()
{
	return m_paUnitCombatClassInfo;
}

CvBaseInfo* CvGlobals::getUnitCombatClassInfo(UnitCombatTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumUnitCombatClassInfos());
	if(e > -1 && e < (int)m_paUnitCombatClassInfo.size())
		return m_paUnitCombatClassInfo[e];
	else
		return NULL;
}

std::vector<CvBaseInfo*>& CvGlobals::getUnitAIInfo()
{
	return m_paUnitAIInfos;
}

CvBaseInfo* CvGlobals::getUnitAIInfo(UnitAITypes eUnitAINum)
{
	CvAssert(eUnitAINum >= 0);
	CvAssert(eUnitAINum < NUM_UNITAI_TYPES);
	if(eUnitAINum > -1 && eUnitAINum < (int)m_paUnitAIInfos.size())
		return m_paUnitAIInfos[eUnitAINum];
	else
		return NULL;
}

int CvGlobals::getNumGameOptionInfos()
{
	return (int)m_paGameOptionInfos.size();
}

std::vector<CvGameOptionInfo*>& CvGlobals::getGameOptionInfo()
{
	return m_paGameOptionInfos;
}

CvGameOptionInfo* CvGlobals::getGameOptionInfo(GameOptionTypes eGameOptionNum)
{
	CvAssert(eGameOptionNum >= 0);
	CvAssert(eGameOptionNum < GC.getNumGameOptionInfos());
	if(eGameOptionNum > -1 && eGameOptionNum < (int)m_paGameOptionInfos.size())
		return m_paGameOptionInfos[eGameOptionNum];
	else
		return NULL;
}

int CvGlobals::getNumMPOptionInfos()
{
	return (int)m_paMPOptionInfos.size();
}

std::vector<CvMPOptionInfo*>& CvGlobals::getMPOptionInfo()
{
	return m_paMPOptionInfos;
}

CvMPOptionInfo* CvGlobals::getMPOptionInfo(MultiplayerOptionTypes eMPOptionNum)
{
	CvAssert(eMPOptionNum >= 0);
	CvAssert(eMPOptionNum < GC.getNumMPOptionInfos());
	if(eMPOptionNum > -1 && eMPOptionNum < (int)m_paMPOptionInfos.size())
		return m_paMPOptionInfos[eMPOptionNum];
	else
		return NULL;
}

std::vector<CvPlayerOptionInfo*>& CvGlobals::getPlayerOptionInfo()
{
	return m_paPlayerOptionInfos;
}

CvPlayerOptionInfo* CvGlobals::getPlayerOptionInfo(PlayerOptionTypes ePlayerOptionNum)
{
	CvAssert(ePlayerOptionNum >= 0);
	if(ePlayerOptionNum > -1 && ePlayerOptionNum < (int)m_paPlayerOptionInfos.size())
		return m_paPlayerOptionInfos[ePlayerOptionNum];
	else
		return NULL;
}

std::vector<CvYieldInfo*>& CvGlobals::getYieldInfo()
{
	return m_paYieldInfo;
}

CvYieldInfo* CvGlobals::getYieldInfo(YieldTypes eYieldNum)
{
	CvAssert(eYieldNum > -1);
	CvAssert(eYieldNum < NUM_YIELD_TYPES);
	if(eYieldNum > -1 && eYieldNum < (int)m_paYieldInfo.size())
		return m_paYieldInfo[eYieldNum];
	else
		return NULL;
}

int CvGlobals::getNumRouteInfos()
{
	return (int)m_paRouteInfo.size();
}

std::vector<CvRouteInfo*>& CvGlobals::getRouteInfo()
{
	return m_paRouteInfo;
}

CvRouteInfo* CvGlobals::getRouteInfo(RouteTypes eRouteNum)
{
	CvAssert(eRouteNum > -1);
	CvAssert(eRouteNum < GC.getNumRouteInfos());
	if(eRouteNum > -1 && eRouteNum < (int)m_paRouteInfo.size())
		return m_paRouteInfo[eRouteNum];
	else
		return NULL;
}

int CvGlobals::getNumImprovementInfos()
{
	return m_pImprovements->GetNumImprovements();
}

std::vector<CvImprovementEntry*>& CvGlobals::getImprovementInfo()
{
	return m_pImprovements->GetImprovementEntries();
}

CvImprovementEntry* CvGlobals::getImprovementInfo(ImprovementTypes eImprovementNum)
{
	CvAssert(eImprovementNum > -1);
	CvAssert(eImprovementNum < GC.getNumImprovementInfos());
	if(eImprovementNum > -1 && eImprovementNum < GC.getNumImprovementInfos())
		return m_pImprovements->GetImprovementEntries()[eImprovementNum];
	else
		return NULL;
}

CvImprovementXMLEntries* CvGlobals::GetGameImprovements() const
{
	return m_pImprovements;
}

int CvGlobals::getNumBuildInfos()
{
	return (int)m_paBuildInfo.size();
}

std::vector<CvBuildInfo*>& CvGlobals::getBuildInfo()
{
	return m_paBuildInfo;
}

CvBuildInfo* CvGlobals::getBuildInfo(BuildTypes eBuildNum)
{
	CvAssert(eBuildNum > -1);
	CvAssert(eBuildNum < GC.getNumBuildInfos());
	if(eBuildNum > -1 && eBuildNum < (int)m_paBuildInfo.size())
		return m_paBuildInfo[eBuildNum];
	else
		return NULL;
}

int CvGlobals::getNumHandicapInfos()
{
	return (int)m_paHandicapInfo.size();
}

std::vector<CvHandicapInfo*>& CvGlobals::getHandicapInfo()
{
	return m_paHandicapInfo;
}

CvHandicapInfo* CvGlobals::getHandicapInfo(HandicapTypes eHandicapNum)
{
	CvAssert(eHandicapNum > -1);
	CvAssert(eHandicapNum < GC.getNumHandicapInfos());
	if(eHandicapNum > -1 && eHandicapNum < (int)m_paHandicapInfo.size())
		return m_paHandicapInfo[eHandicapNum];
	else
		return NULL;
}

int CvGlobals::getNumGameSpeedInfos()
{
	return (int)m_paGameSpeedInfo.size();
}

std::vector<CvGameSpeedInfo*>& CvGlobals::getGameSpeedInfo()
{
	return m_paGameSpeedInfo;
}

CvGameSpeedInfo* CvGlobals::getGameSpeedInfo(GameSpeedTypes eGameSpeedNum)
{
	CvAssert(eGameSpeedNum > -1);
	CvAssert(eGameSpeedNum < GC.getNumGameSpeedInfos());
	if(eGameSpeedNum > -1 && eGameSpeedNum < (int)m_paGameSpeedInfo.size())
		return m_paGameSpeedInfo[eGameSpeedNum];
	else
		return NULL;
}

#if defined(MOD_EVENTS_DIPLO_MODIFIERS)
int CvGlobals::getNumDiploModifierInfos()
{
	return (int)m_paDiploModifierInfo.size();
}

std::vector<CvDiploModifierInfo*>& CvGlobals::getDiploModifierInfo()
{
	return m_paDiploModifierInfo;
}

CvDiploModifierInfo* CvGlobals::getDiploModifierInfo(DiploModifierTypes eDiploModifierNum)
{
	CvAssert(eDiploModifierNum > -1);
	CvAssert(eDiploModifierNum < GC.getNumDiploModifierInfos());
	if(eDiploModifierNum > -1 && eDiploModifierNum < (int)m_paDiploModifierInfo.size())
		return m_paDiploModifierInfo[eDiploModifierNum];
	else
		return NULL;
}

#endif

int CvGlobals::getNumProcessInfos()
{
	return (int)m_paProcessInfo.size();
}

std::vector<CvProcessInfo*>& CvGlobals::getProcessInfo()
{
	return m_paProcessInfo;
}

CvProcessInfo* CvGlobals::getProcessInfo(ProcessTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumProcessInfos());
	if(e > -1 && e < (int)m_paProcessInfo.size())
		return m_paProcessInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumVoteInfos()
{
	return (int)m_paVoteInfo.size();
}

std::vector<CvVoteInfo*>& CvGlobals::getVoteInfo()
{
	return m_paVoteInfo;
}

CvVoteInfo* CvGlobals::getVoteInfo(VoteTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumVoteInfos());
	if(e > -1 && e < (int)m_paVoteInfo.size())
		return m_paVoteInfo[e];
	else
		return NULL;
}

int CvGlobals::getNumProjectInfos()
{
	return m_pProjects->GetNumProjects();
}

std::vector<CvProjectEntry*>& CvGlobals::getProjectInfo()
{
	return m_pProjects->GetProjectEntries();
}

CvProjectEntry* CvGlobals::getProjectInfo(ProjectTypes e)
{
	CvAssert(e > -1);
	CvAssert(e < GC.getNumProjectInfos());
	if(e > -1 && e < GC.getNumProjectInfos())
		return m_pProjects->GetProjectEntries()[e];
	else
		return NULL;
}

CvProjectXMLEntries* CvGlobals::GetGameProjects() const
{
	return m_pProjects;
}

int CvGlobals::getNumBuildingClassInfos()
{
	return (int)m_paBuildingClassInfo.size();
}

std::vector<CvBuildingClassInfo*>& CvGlobals::getBuildingClassInfo()
{
	return m_paBuildingClassInfo;
}

CvBuildingClassInfo* CvGlobals::getBuildingClassInfo(BuildingClassTypes eBuildingClassNum)
{
	CvAssert(eBuildingClassNum > -1);
	CvAssert(eBuildingClassNum < GC.getNumBuildingClassInfos());
	if(eBuildingClassNum > -1 && eBuildingClassNum < (int)m_paBuildingClassInfo.size())
		return m_paBuildingClassInfo[eBuildingClassNum];
	else
		return NULL;
}

int CvGlobals::getNumBuildingInfos()
{
	return m_pBuildings->GetNumBuildings();
}

std::vector<CvBuildingEntry*>& CvGlobals::getBuildingInfo()
{
	return m_pBuildings->GetBuildingEntries();
}

CvBuildingEntry* CvGlobals::getBuildingInfo(BuildingTypes eBuildingNum)
{
	CvAssert(eBuildingNum > -1);
	CvAssert(eBuildingNum < GC.getNumBuildingInfos());
	if(eBuildingNum > -1 && eBuildingNum < GC.getNumBuildingInfos())
		return m_pBuildings->GetBuildingEntries()[eBuildingNum];
	else
		return NULL;
}

CvBuildingXMLEntries* CvGlobals::GetGameBuildings() const
{
	return m_pBuildings;
}

void CvGlobals::GameDataPostCache()
{
	for (int iI = 0; iI < getNumBuildingInfos(); iI++)
	{
		const BuildingTypes eOuter = static_cast<BuildingTypes>(iI);
		CvBuildingEntry* pOuter = GC.getBuildingInfo(eOuter);
		if (pOuter==NULL)
			continue;

		for (int iJ = 0; iJ < getNumBuildingInfos(); iJ++)
		{
			const BuildingTypes eInner = static_cast<BuildingTypes>(iJ);
			CvBuildingEntry* pInner = GC.getBuildingInfo(eInner);
			if (pInner==NULL)
				continue;

			bool bHasInteraction = false;
			for (int iK = 0; iK < NUM_YIELD_TYPES; iK++)
			{
				YieldTypes eYield = (YieldTypes)iK;

				if (pOuter->GetBuildingClassYieldChange(pInner->GetBuildingClassType(), eYield) > 0)
					bHasInteraction = true;
				if (pOuter->GetBuildingClassLocalYieldChange(pInner->GetBuildingClassType(), eYield) > 0)
					bHasInteraction = true;
				if (pOuter->GetBuildingClassYieldModifier(pInner->GetBuildingClassType(), eYield) > 0)
					bHasInteraction = true;
			}

			if (bHasInteraction)
				m_buildingInteractionLookup[eOuter].push_back(eInner);
		}
	}

	calcGameDataHash();
}

template <typename T>
static void HashGameDataCombine(CvGlobals::GameDataHash& seed, std::size_t& word, const T& container)
{
	// FNV-1a hash algorithm
	const unsigned int fnv_prime = 0x01000193; // 16777619
	const unsigned int fnv_offset_basis = 0x811c9dc5; // 2166136261

	// Hash the size of the container.
	{
		const unsigned int containerSize = static_cast<unsigned int>(container.size());
		seed[word] ^= (containerSize ^ fnv_offset_basis) * fnv_prime;
		if (++word >= 4)
			word = 0;
	}

	// Hash all the members of the container.
	typedef typename T::const_iterator It;
	const It begin = container.begin();
	const It end = container.end();
	for (It it = begin; it != end; ++it) {
		unsigned int infoHash;
		// FIXME - NULL entries in the database make no sense yet they're here anyway??
		// We have no choice but to hash these as well because they impact the database order.
		if (*it == 0)
			infoHash = fnv_offset_basis;
		else
			infoHash = FString::Hash((*it)->GetType());
		seed[word] ^= (infoHash ^ fnv_offset_basis) * fnv_prime;
		if (++word >= 4)
			word = 0;
	}

}

void CvGlobals::calcGameDataHash()
{
	// FNV-1a hash algorithm
	const unsigned int fnv_offset_basis = 0x811c9dc5; // 2166136261

	// 128 bits ought to be enough to prevent collisions.
	m_gameDataHash[0] = fnv_offset_basis;
	m_gameDataHash[1] = fnv_offset_basis;
	m_gameDataHash[2] = fnv_offset_basis;
	m_gameDataHash[3] = fnv_offset_basis;
	std::size_t writeWord = 0;

	HashGameDataCombine(m_gameDataHash, writeWord, m_paColorInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paPlayerColorInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paPlotInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paGreatPersonInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paTerrainInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paYieldInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paRouteInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paFeatureInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paResourceClassInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paResourceInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paBuildInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paHandicapInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paGameSpeedInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paDiploModifierInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paTurnTimerInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paCivilizationInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paMinorCivInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paLeaderHeadInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paProcessInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paVoteInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paBuildingClassInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paUnitClassInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paSpecialUnitInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paVoteSourceInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paEventInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paEventChoiceInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paCityEventInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paCityEventChoiceInfo);
	//HashGameDataCombine(m_gameDataHash, writeWord, m_paEventLinkingInfo);
	//HashGameDataCombine(m_gameDataHash, writeWord, m_paEventChoiceLinkingInfo);
	//HashGameDataCombine(m_gameDataHash, writeWord, m_paCityEventLinkingInfo);
	//HashGameDataCombine(m_gameDataHash, writeWord, m_paCityEventChoiceLinkingInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paContractInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paUnitCombatClassInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paUnitAIInfos);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paGameOptionInfos);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paMPOptionInfos);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paPlayerOptionInfos);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paSpecialistInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paActionInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paMissionInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paControlInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paCommandInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paAutomateInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_aEraInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paHurryInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paVictoryInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paSmallAwardInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paEntityEventInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paUnitDomainInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_paMultiUnitFormationInfo);
	HashGameDataCombine(m_gameDataHash, writeWord, m_pEconomicAIStrategies->GetEconomicAIStrategyEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pCitySpecializations->GetCitySpecializationEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pMilitaryAIStrategies->GetMilitaryAIStrategyEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pAIGrandStrategies->GetAIGrandStrategyEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pAICityStrategies->GetAICityStrategyEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pPolicies->GetPolicyEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pTechs->GetTechEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pBuildings->GetBuildingEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pUnits->GetUnitEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pProjects->GetProjectEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pPromotions->GetPromotionEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pImprovements->GetImprovementEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pEmphases->GetEmphasisEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pTraits->GetTraitEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pReligions->GetReligionEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pBeliefs->GetBeliefEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pSpyPassiveBonuses->GetSpyPassiveBonusEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pSpyPassiveBonusesDiplomat->GetSpyPassiveBonusDiplomatEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pLeagueSpecialSessions->GetLeagueSpecialSessionEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pLeagueNames->GetLeagueNameEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pLeagueProjects->GetLeagueProjectEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pLeagueProjectRewards->GetLeagueProjectRewardEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pResolutions->GetResolutionEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pNotifications->GetNotificationEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pAchievements->GetAchievementEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pCorporations->GetCorporationEntries());
	HashGameDataCombine(m_gameDataHash, writeWord, m_pContracts->GetContractEntries());
}

const vector<BuildingTypes>& CvGlobals::getBuildingInteractions(BuildingTypes eRefBuilding) const
{
	static vector<BuildingTypes> emptyResult;

	map<BuildingTypes, vector<BuildingTypes>>::const_iterator it = m_buildingInteractionLookup.find(eRefBuilding);
	if (it != m_buildingInteractionLookup.end())
		return it->second;
	else
		return emptyResult;
}

int CvGlobals::getNumUnitClassInfos()
{
	return (int)m_paUnitClassInfo.size();
}

std::vector<CvUnitClassInfo*>& CvGlobals::getUnitClassInfo()
{
	return m_paUnitClassInfo;
}

CvUnitClassInfo* CvGlobals::getUnitClassInfo(UnitClassTypes eUnitClassNum)
{
	CvAssert(eUnitClassNum > -1);
	CvAssert(eUnitClassNum < GC.getNumUnitClassInfos());
	if(eUnitClassNum > -1 && eUnitClassNum < (int)m_paUnitClassInfo.size())
		return m_paUnitClassInfo[eUnitClassNum];
	else
		return NULL;
}

int CvGlobals::getNumActionInfos()
{
	return (int)m_paActionInfo.size();
}

std::vector<CvActionInfo*>& CvGlobals::getActionInfo()
{
	return m_paActionInfo;
}

CvActionInfo* CvGlobals::getActionInfo(int i)
{
	CvAssertMsg(i < getNumActionInfos(), "Index out of bounds");
	CvAssertMsg(i > -1, "Index out of bounds");
	if(i > -1 && i < (int)m_paActionInfo.size())
		return m_paActionInfo[i];
	else
		return NULL;
}

std::vector<CvMissionInfo*>& CvGlobals::getMissionInfo()
{
	return m_paMissionInfo;
}

CvMissionInfo* CvGlobals::getMissionInfo(MissionTypes eMissionNum)
{
	CvAssert(eMissionNum > -1);
	CvAssert(static_cast<unsigned int>(eMissionNum) < CvTypes::getNUM_MISSION_TYPES());
	if(eMissionNum > -1 && eMissionNum < (int)m_paMissionInfo.size())
		return m_paMissionInfo[eMissionNum];
	else
		return NULL;
}

std::vector<CvControlInfo*>& CvGlobals::getControlInfo()
{
	return m_paControlInfo;
}

CvControlInfo* CvGlobals::getControlInfo(ControlTypes eControlNum)
{
	CvAssert(eControlNum > -1);
	CvAssert(eControlNum < NUM_CONTROL_TYPES);
	if(eControlNum > -1 && eControlNum < (int)m_paControlInfo.size())
		return m_paControlInfo[eControlNum];
	else
		return NULL;
}

std::vector<CvCommandInfo*>& CvGlobals::getCommandInfo()
{
	return m_paCommandInfo;
}

CvCommandInfo* CvGlobals::getCommandInfo(CommandTypes eCommandNum)
{
	CvAssert(eCommandNum > -1);
	CvAssert(eCommandNum < NUM_COMMAND_TYPES);
	if(eCommandNum > -1 && eCommandNum < (int)m_paCommandInfo.size())
		return m_paCommandInfo[eCommandNum];
	else
		return NULL;
}

int CvGlobals::getNumAutomateInfos()
{
	return (int)m_paAutomateInfo.size();
}

std::vector<CvAutomateInfo*>& CvGlobals::getAutomateInfo()
{
	return m_paAutomateInfo;
}

CvAutomateInfo* CvGlobals::getAutomateInfo(int iAutomateNum)
{
	CvAssertMsg(iAutomateNum < getNumAutomateInfos(), "Index out of bounds");
	CvAssertMsg(iAutomateNum > -1, "Index out of bounds");
	if(iAutomateNum > -1 && iAutomateNum < (int)m_paAutomateInfo.size())
		return m_paAutomateInfo[iAutomateNum];
	else
		return NULL;
}

int CvGlobals::getNumPromotionInfos()
{
	return (int)m_pPromotions->GetPromotionEntries().size();
}

std::vector<CvPromotionEntry*>& CvGlobals::getPromotionInfo()
{
	return m_pPromotions->GetPromotionEntries();
}

CvPromotionEntry* CvGlobals::getPromotionInfo(PromotionTypes ePromotionNum)
{
	CvAssert(ePromotionNum > -1);
	CvAssert(ePromotionNum < GC.getNumPromotionInfos());
	if(ePromotionNum > -1 && ePromotionNum < GC.getNumPromotionInfos())
		return m_pPromotions->GetPromotionEntries()[ePromotionNum];
	else
		return NULL;
}

CvPromotionXMLEntries* CvGlobals::GetGamePromotions() const
{
	return m_pPromotions;
}

int CvGlobals::getNumSpecialistInfos()
{
	return (int)m_paSpecialistInfo.size();
}

std::vector<CvSpecialistInfo*>& CvGlobals::getSpecialistInfo()
{
	return m_paSpecialistInfo;
}

CvSpecialistInfo* CvGlobals::getSpecialistInfo(SpecialistTypes eSpecialistNum)
{
	CvAssert(eSpecialistNum > -1);
	CvAssert(eSpecialistNum < GC.getNumSpecialistInfos());
	if(eSpecialistNum > -1 && eSpecialistNum < (int)m_paSpecialistInfo.size())
		return m_paSpecialistInfo[eSpecialistNum];
	else
		return NULL;
}

int CvGlobals::getNumEconomicAIStrategyInfos()
{
	return (int)m_pEconomicAIStrategies->GetEconomicAIStrategyEntries().size();
}

std::vector<CvEconomicAIStrategyXMLEntry*>& CvGlobals::getEconomicAIStrategyInfo()
{
	return m_pEconomicAIStrategies->GetEconomicAIStrategyEntries();
}

CvEconomicAIStrategyXMLEntry* CvGlobals::getEconomicAIStrategyInfo(EconomicAIStrategyTypes eAIStrategyNum)
{
	FAssert(eAIStrategyNum > -1);
	FAssert(eAIStrategyNum < GC.getNumEconomicAIStrategyInfos());
	if(eAIStrategyNum > -1 && eAIStrategyNum < GC.getNumEconomicAIStrategyInfos())
		return m_pEconomicAIStrategies->GetEconomicAIStrategyEntries()[eAIStrategyNum];
	else
		return NULL;
}

CvEconomicAIStrategyXMLEntries* CvGlobals::GetGameEconomicAIStrategies() const
{
	return m_pEconomicAIStrategies;
}

int CvGlobals::getNumCitySpecializationInfos()
{
	return (int)m_pCitySpecializations->GetCitySpecializationEntries().size();
}

std::vector<CvCitySpecializationXMLEntry*>& CvGlobals::getCitySpecializationInfo()
{
	return m_pCitySpecializations->GetCitySpecializationEntries();
}

CvCitySpecializationXMLEntry* CvGlobals::getCitySpecializationInfo(CitySpecializationTypes eCitySpecialization)
{
	CvAssert(eCitySpecialization > -1);
	CvAssert(eCitySpecialization < GC.getNumCitySpecializationInfos());
	if(eCitySpecialization > -1 && eCitySpecialization < GC.getNumCitySpecializationInfos())
		return m_pCitySpecializations->GetCitySpecializationEntries()[eCitySpecialization];
	else
		return NULL;
}

CvCitySpecializationXMLEntries* CvGlobals::GetGameCitySpecializations() const
{
	return m_pCitySpecializations;
}

int CvGlobals::getNumMilitaryAIStrategyInfos()
{
	return (int)m_pMilitaryAIStrategies->GetMilitaryAIStrategyEntries().size();
}

std::vector<CvMilitaryAIStrategyXMLEntry*>& CvGlobals::getMilitaryAIStrategyInfo()
{
	return m_pMilitaryAIStrategies->GetMilitaryAIStrategyEntries();
}

CvMilitaryAIStrategyXMLEntry* CvGlobals::getMilitaryAIStrategyInfo(MilitaryAIStrategyTypes eAIStrategyNum)
{
	FAssert(eAIStrategyNum < GC.getNumMilitaryAIStrategyInfos());
	return m_pMilitaryAIStrategies->GetMilitaryAIStrategyEntries()[eAIStrategyNum];
}

CvMilitaryAIStrategyXMLEntries* CvGlobals::GetGameMilitaryAIStrategies() const
{
	return m_pMilitaryAIStrategies;
}

int CvGlobals::getNumAIGrandStrategyInfos()
{
	return (int)m_pAIGrandStrategies->GetAIGrandStrategyEntries().size();
}

std::vector<CvAIGrandStrategyXMLEntry*>& CvGlobals::getAIGrandStrategyInfo()
{
	return m_pAIGrandStrategies->GetAIGrandStrategyEntries();
}

CvAIGrandStrategyXMLEntry* CvGlobals::getAIGrandStrategyInfo(AIGrandStrategyTypes eAIGrandStrategyNum)
{
	if (eAIGrandStrategyNum == NO_AIGRANDSTRATEGY)
		return NULL;

	return m_pAIGrandStrategies->GetAIGrandStrategyEntries()[eAIGrandStrategyNum];
}

CvAIGrandStrategyXMLEntries* CvGlobals::GetGameAIGrandStrategies() const
{
	return m_pAIGrandStrategies;
}

int CvGlobals::getNumAICityStrategyInfos()
{
	return (int)m_pAICityStrategies->GetAICityStrategyEntries().size();
}

std::vector<CvAICityStrategyEntry*>& CvGlobals::getAICityStrategyInfo()
{
	return m_pAICityStrategies->GetAICityStrategyEntries();
}

CvAICityStrategyEntry* CvGlobals::getAICityStrategyInfo(AICityStrategyTypes eAICityStrategyNum)
{
	CvAssert(eAICityStrategyNum > -1);
	CvAssert(eAICityStrategyNum < GC.getNumAICityStrategyInfos());
	return m_pAICityStrategies->GetAICityStrategyEntries()[eAICityStrategyNum];
}

CvAICityStrategies* CvGlobals::GetGameAICityStrategies() const
{
	return m_pAICityStrategies;
}

int CvGlobals::getNumPolicyInfos()
{
	return (int)m_pPolicies->GetPolicyEntries().size();
}

std::vector<CvPolicyEntry*>& CvGlobals::getPolicyInfo()
{
	return m_pPolicies->GetPolicyEntries();
}

CvPolicyEntry* CvGlobals::getPolicyInfo(PolicyTypes ePolicyNum)
{
	CvAssert(ePolicyNum > -1);
	CvAssert(ePolicyNum < GC.getNumPolicyInfos());
	return m_pPolicies->GetPolicyEntries()[ePolicyNum];
}

CvPolicyXMLEntries* CvGlobals::GetGamePolicies() const
{
	return m_pPolicies;
}

int CvGlobals::getNumPolicyBranchInfos()
{
	return (int)m_pPolicies->GetPolicyBranchEntries().size();
}

std::vector<CvPolicyBranchEntry*>& CvGlobals::getPolicyBranchInfo()
{
	return m_pPolicies->GetPolicyBranchEntries();
}

CvPolicyBranchEntry* CvGlobals::getPolicyBranchInfo(PolicyBranchTypes ePolicyBranchNum)
{
	CvAssert(ePolicyBranchNum > -1);
	CvAssert(ePolicyBranchNum < GC.getNumPolicyBranchInfos());
	return m_pPolicies->GetPolicyBranchEntries()[ePolicyBranchNum];
}

int CvGlobals::getNumEmphasisInfos()
{
	return (int)m_pEmphases->GetEmphasisEntries().size();
}

std::vector<CvEmphasisEntry*>& CvGlobals::getEmphasisInfo()
{
	return m_pEmphases->GetEmphasisEntries();
}

CvEmphasisEntry* CvGlobals::getEmphasisInfo(EmphasizeTypes eEmphasisNum)
{
	CvAssert(eEmphasisNum > -1);
	CvAssert(eEmphasisNum < GC.getNumEmphasisInfos());
	return m_pEmphases->GetEmphasisEntries()[eEmphasisNum];
}

CvEmphasisXMLEntries* CvGlobals::GetGameEmphases() const
{
	return m_pEmphases;
}

int CvGlobals::getNumTraitInfos()
{
	return (int)m_pTraits->GetTraitEntries().size();
}

std::vector<CvTraitEntry*>& CvGlobals::getTraitInfo()
{
	return m_pTraits->GetTraitEntries();
}

CvTraitEntry* CvGlobals::getTraitInfo(TraitTypes eTraitNum)
{
	CvAssert(eTraitNum > -1);
	CvAssert(eTraitNum < GC.getNumTraitInfos());
	return m_pTraits->GetTraitEntries()[eTraitNum];
}

CvTraitXMLEntries* CvGlobals::GetGameTraits() const
{
	return m_pTraits;
}

int CvGlobals::getNumReligionInfos()
{
	return (int)m_pReligions->GetReligionEntries().size();
}

std::vector<CvReligionEntry*>& CvGlobals::getReligionInfo()
{
	return m_pReligions->GetReligionEntries();
}

CvReligionEntry* CvGlobals::getReligionInfo(ReligionTypes eReligionNum)
{
	CvAssert(eReligionNum > -1);
	CvAssert(eReligionNum < GC.getNumReligionInfos());
	return m_pReligions->GetReligionEntries()[eReligionNum];
}

CvReligionXMLEntries* CvGlobals::GetGameReligions() const
{
	return m_pReligions;
}

int CvGlobals::getNumBeliefInfos()
{
	return (int)m_pBeliefs->GetBeliefEntries().size();
}

std::vector<CvBeliefEntry*>& CvGlobals::getBeliefInfo()
{
	return m_pBeliefs->GetBeliefEntries();
}

CvBeliefEntry* CvGlobals::getBeliefInfo(BeliefTypes eBeliefNum)
{
	CvAssert(eBeliefNum > -1);
	CvAssert(eBeliefNum < GC.getNumBeliefInfos());
	return m_pBeliefs->GetBeliefEntries()[eBeliefNum];
}

CvBeliefXMLEntries* CvGlobals::GetGameBeliefs() const
{
	return m_pBeliefs;
}

#if defined(MOD_BALANCE_CORE)
int CvGlobals::getNumCorporationInfos()
{
	return (int)m_pCorporations->GetCorporationEntries().size();
}

std::vector<CvCorporationEntry*>& CvGlobals::getCorporationInfo()
{
	return m_pCorporations->GetCorporationEntries();
}

CvCorporationEntry* CvGlobals::getCorporationInfo(CorporationTypes eCorporationNum)
{
	CvAssert(eCorporationNum > -1);
	CvAssert(eCorporationNum < GC.getNumCorporationInfos());
	return m_pCorporations->GetCorporationEntries()[eCorporationNum];
}

CvCorporationXMLEntries* CvGlobals::GetGameCorporations() const
{
	return m_pCorporations;
}

int CvGlobals::getNumContractInfos()
{
	return (int)m_paContractInfo.size();
}

std::vector<CvContractEntry*>& CvGlobals::getContractInfo()
{
	return m_paContractInfo;
}

CvContractEntry* CvGlobals::getContractInfo(ContractTypes eContract)
{
	CvAssert(eContract > -1);
	CvAssert(eContract < GC.getNumContractInfos());
	return m_paContractInfo[eContract];
}

CvContractXMLEntries* CvGlobals::GetGameContracts() const
{
	return m_pContracts;
}
#endif

int CvGlobals::getNumSpyPassiveBonusInfos()
{
	return (int) m_pSpyPassiveBonuses->GetSpyPassiveBonusEntries().size();
}

std::vector<CvSpyPassiveBonusEntry*>& CvGlobals::getSpyPassiveBonusInfo()
{
	return m_pSpyPassiveBonuses->GetSpyPassiveBonusEntries();
}

_Ret_maybenull_ CvSpyPassiveBonusEntry* CvGlobals::getSpyPassiveBonusInfo(SpyPassiveBonusTypes eSpyPassiveBonusNum)
{
	CvAssert(eSpyPassiveBonusNum > -1);
	CvAssert(eSpyPassiveBonusNum < GC.getNumSpyPassiveBonusInfos());
	return m_pSpyPassiveBonuses->GetSpyPassiveBonusEntries()[eSpyPassiveBonusNum];
}

CvSpyPassiveBonusXMLEntries* CvGlobals::GetGameSpyPassiveBonuses() const
{
	return m_pSpyPassiveBonuses;
}

int CvGlobals::getNumSpyPassiveBonusDiplomatInfos()
{
	return (int) m_pSpyPassiveBonusesDiplomat->GetSpyPassiveBonusDiplomatEntries().size();
}

std::vector<CvSpyPassiveBonusDiplomatEntry*>& CvGlobals::getSpyPassiveBonusDiplomatInfo()
{
	return m_pSpyPassiveBonusesDiplomat->GetSpyPassiveBonusDiplomatEntries();
}

_Ret_maybenull_ CvSpyPassiveBonusDiplomatEntry* CvGlobals::getSpyPassiveBonusDiplomatInfo(SpyPassiveBonusDiplomatTypes eSpyPassiveBonusDiplomatNum)
{
	CvAssert(eSpyPassiveBonusDiplomatNum > -1);
	CvAssert(eSpyPassiveBonusDiplomatNum < GC.getNumSpyPassiveBonusDiplomatInfos());
	return m_pSpyPassiveBonusesDiplomat->GetSpyPassiveBonusDiplomatEntries()[eSpyPassiveBonusDiplomatNum];
}

CvSpyPassiveBonusDiplomatXMLEntries* CvGlobals::GetGameSpyPassiveBonusesDiplomat() const
{
	return m_pSpyPassiveBonusesDiplomat;
}

int CvGlobals::getNumLeagueSpecialSessionInfos()
{
	return (int) m_pLeagueSpecialSessions->GetLeagueSpecialSessionEntries().size();
}

std::vector<CvLeagueSpecialSessionEntry*>& CvGlobals::getLeagueSpecialSessionInfo()
{
	return m_pLeagueSpecialSessions->GetLeagueSpecialSessionEntries();
}

_Ret_maybenull_ CvLeagueSpecialSessionEntry* CvGlobals::getLeagueSpecialSessionInfo(LeagueSpecialSessionTypes eLeagueSpecialSessionNum)
{
	CvAssert(eLeagueSpecialSessionNum > -1);
	CvAssert(eLeagueSpecialSessionNum < GC.getNumLeagueSpecialSessionInfos());
	return m_pLeagueSpecialSessions->GetLeagueSpecialSessionEntries()[eLeagueSpecialSessionNum];
}

CvLeagueSpecialSessionXMLEntries* CvGlobals::GetGameLeagueSpecialSessions() const
{
	return m_pLeagueSpecialSessions;
}

int CvGlobals::getNumLeagueNameInfos()
{
	return (int) m_pLeagueNames->GetLeagueNameEntries().size();
}

std::vector<CvLeagueNameEntry*>& CvGlobals::getLeagueNameInfo()
{
	return m_pLeagueNames->GetLeagueNameEntries();
}

CvLeagueNameEntry* CvGlobals::getLeagueNameInfo(LeagueNameTypes eLeagueNameNum)
{
	CvAssert(eLeagueNameNum > -1);
	CvAssert(eLeagueNameNum < GC.getNumLeagueNameInfos());
	return m_pLeagueNames->GetLeagueNameEntries()[eLeagueNameNum];
}

CvLeagueNameXMLEntries* CvGlobals::GetGameLeagueNames() const
{
	return m_pLeagueNames;
}

int CvGlobals::getNumLeagueProjectInfos()
{
	return (int) m_pLeagueProjects->GetLeagueProjectEntries().size();
}

std::vector<CvLeagueProjectEntry*>& CvGlobals::getLeagueProjectInfo()
{
	return m_pLeagueProjects->GetLeagueProjectEntries();
}

CvLeagueProjectEntry* CvGlobals::getLeagueProjectInfo(LeagueProjectTypes eLeagueProjectNum)
{
	CvAssert(eLeagueProjectNum > -1);
	CvAssert(eLeagueProjectNum < GC.getNumLeagueProjectInfos());
	return m_pLeagueProjects->GetLeagueProjectEntries()[eLeagueProjectNum];
}

CvLeagueProjectXMLEntries* CvGlobals::GetGameLeagueProjects() const
{
	return m_pLeagueProjects;
}

int CvGlobals::getNumLeagueProjectRewardInfos()
{
	return (int) m_pLeagueProjectRewards->GetLeagueProjectRewardEntries().size();
}

std::vector<CvLeagueProjectRewardEntry*>& CvGlobals::getLeagueProjectRewardInfo()
{
	return m_pLeagueProjectRewards->GetLeagueProjectRewardEntries();
}

CvLeagueProjectRewardEntry* CvGlobals::getLeagueProjectRewardInfo(LeagueProjectRewardTypes eLeagueProjectRewardNum)
{
	CvAssert(eLeagueProjectRewardNum > -1);
	CvAssert(eLeagueProjectRewardNum < GC.getNumLeagueProjectRewardInfos());
	return m_pLeagueProjectRewards->GetLeagueProjectRewardEntries()[eLeagueProjectRewardNum];
}

CvLeagueProjectRewardXMLEntries* CvGlobals::GetGameLeagueProjectRewards() const
{
	return m_pLeagueProjectRewards;
}

int CvGlobals::getNumResolutionInfos()
{
	return (int) m_pResolutions->GetResolutionEntries().size();
}

std::vector<CvResolutionEntry*>& CvGlobals::getResolutionInfo()
{
	return m_pResolutions->GetResolutionEntries();
}

CvResolutionEntry* CvGlobals::getResolutionInfo(ResolutionTypes eResolutionNum)
{
	if (eResolutionNum == NO_RESOLUTION || eResolutionNum >= m_pResolutions->GetNumResolutions())
		return NULL;

	return m_pResolutions->GetResolutionEntries()[eResolutionNum];
}

CvResolutionXMLEntries* CvGlobals::GetGameResolutions() const
{
	return m_pResolutions;
}

int CvGlobals::getNumTechInfos()
{
	return (int)m_pTechs->GetTechEntries().size();
}

std::vector<CvTechEntry*>& CvGlobals::getTechInfo()
{
	return m_pTechs->GetTechEntries();
}

CvTechEntry* CvGlobals::getTechInfo(TechTypes eTechNum)
{
	CvAssert(eTechNum > -1);
	CvAssert(eTechNum < GC.getNumTechInfos());
	return m_pTechs->GetTechEntries()[eTechNum];
}

CvTechXMLEntries* CvGlobals::GetGameTechs() const
{
	return m_pTechs;
}

int CvGlobals::getNumEraInfos()
{
	return (int)m_aEraInfo.size();
}

std::vector<CvEraInfo*>& CvGlobals::getEraInfo()
{
	return m_aEraInfo;
}

CvEraInfo* CvGlobals::getEraInfo(EraTypes eEraNum)
{
	CvAssert(eEraNum > -1);
	CvAssert(eEraNum < GC.getNumEraInfos());
	return m_aEraInfo[eEraNum];
}

int CvGlobals::getNumHurryInfos()
{
	return (int)m_paHurryInfo.size();
}

std::vector<CvHurryInfo*>& CvGlobals::getHurryInfo()
{
	return m_paHurryInfo;
}

CvHurryInfo* CvGlobals::getHurryInfo(HurryTypes eHurryNum)
{
	CvAssert(eHurryNum > -1);
	CvAssert(eHurryNum < GC.getNumHurryInfos());
	return m_paHurryInfo[eHurryNum];
}

int CvGlobals::getNumVictoryInfos()
{
	return (int)m_paVictoryInfo.size();
}

std::vector<CvVictoryInfo*>& CvGlobals::getVictoryInfo()
{
	return m_paVictoryInfo;
}

CvVictoryInfo* CvGlobals::getVictoryInfo(VictoryTypes eVictoryNum)
{
	CvAssert(eVictoryNum > -1);
	CvAssert(eVictoryNum < GC.getNumVictoryInfos());
	return m_paVictoryInfo[eVictoryNum];
}

int CvGlobals::getNumSmallAwardInfos()
{
	return (int)m_paSmallAwardInfo.size();
}

std::vector<CvSmallAwardInfo*>& CvGlobals::getSmallAwardInfo()	// For Moose - XML Load Util, CvInfos
{
	return m_paSmallAwardInfo;
}

CvSmallAwardInfo* CvGlobals::getSmallAwardInfo(SmallAwardTypes eSmallAwardNum)
{
	CvAssert(eSmallAwardNum > -1);
	CvAssert(eSmallAwardNum < GC.getNumSmallAwardInfos());
	return m_paSmallAwardInfo[eSmallAwardNum];
}

//////////////////////////////////////////////////////////////////////////
int CvGlobals::getNumUnitDomainInfos()
{
	return (int)m_paUnitDomainInfo.size();
}

std::vector<CvDomainInfo*>& CvGlobals::getUnitDomainInfo()
{
	return m_paUnitDomainInfo;
}

CvDomainInfo* CvGlobals::getUnitDomainInfo(DomainTypes eDomainNum)
{
	CvAssert(eDomainNum > -1);
	CvAssert(eDomainNum < GC.getNumUnitDomainInfos());
	return m_paUnitDomainInfo[eDomainNum];
}

//////////////////////////////////////////////////////////////////////////
void CvGlobals::LogMessage(const char* szMessage)
{
	if(getLogging())
	{
		FILogFile* pLog = LOGFILEMGR.GetLog("GameCore.log", 0);
		if(pLog)
			pLog->Msg(szMessage);
	}
}

CvNotificationXMLEntries* CvGlobals::GetNotificationEntries()
{
	return m_pNotifications;
}

int CvGlobals::getNumAchievementInfos()
{
	return m_pAchievements->GetNumAchievements();
}

std::vector<CvAchievementInfo*>& CvGlobals::getAchievementInfo()
{
	return m_pAchievements->GetAchievementEntries();
}

CvAchievementInfo* CvGlobals::getAchievementInfo(EAchievement eAchievementNum)
{
	CvAssert(eAchievementNum > -1);
	CvAssert(eAchievementNum < GC.getNumAchievementInfos());
	if(eAchievementNum > -1 && eAchievementNum < GC.getNumAchievementInfos())
		return m_pAchievements->GetAchievementEntries()[eAchievementNum];
	else
		return NULL;
}

CvAchievementXMLEntries* CvGlobals::GetGameAchievements() const
{
	return m_pAchievements;
}

CvString*& CvGlobals::getFootstepAudioTags()
{
	return m_paszFootstepAudioTags;
}

CvString& CvGlobals::getFootstepAudioTags(int i)
{
//	CvAssertMsg(i < getNumFootstepAudioTags(), "Index out of bounds")
	CvAssertMsg(i > -1, "Index out of bounds");
	return m_paszFootstepAudioTags[i];
}

const char** CvGlobals::GetHexDebugLayerNames()
{
	static const char* hexDebugLayerNames[] =
	{
		"StartSiteEvaluationLayer",
		"SettlerSiteEvaluationLayer",
		"VisibilityLayer",
		"RevealedLayer",
		"DangerLayer",
		"TacticalAnalysisLayer",
		"ArtifactLayer",
		"TargetingPathLayer",
		NULL
	};
	return hexDebugLayerNames;
}

float CvGlobals::GetHexDebugLayerScale(const char* szLayerName)
{
	std::string strLayerName = szLayerName;
	float fScale = 1.0f;

	if(strLayerName == "SettlerSiteEvaluationLayer")
	{
		fScale = 1.5f;
	}
	if(strLayerName == "ArtifactLayer")
	{
		fScale = 2.0f;
	}

	return fScale;
}

bool CvGlobals::GetHexDebugLayerString(CvPlot* pkPlot, const char* szLayerName, PlayerTypes ePlayer, char* szBuffer, unsigned int uiBufferLength)
{
	std::string strLayerName = szLayerName;
	if(strLayerName == "StartSiteEvaluationLayer")
	{
		if(!pkPlot->isWater())
		{
			const int iValue = GC.getGame().GetStartSiteEvaluator()->PlotFoundValue(pkPlot, NULL, vector<int>());
			sprintf_s(szBuffer, uiBufferLength, "%d", iValue);
		}
	}
	else if(strLayerName == "SettlerSiteEvaluationLayer")
	{
		if(!pkPlot->isWater() && ePlayer != NO_PLAYER)
		{
			CvPlayerAI& kPlayer = GET_PLAYER(ePlayer);
			const int iValue = kPlayer.getPlotFoundValue(pkPlot->getX(), pkPlot->getY());
			sprintf_s(szBuffer, uiBufferLength, "%d", iValue);
		}
	}
	else if(strLayerName == "VisibilityLayer")
	{
		if(ePlayer != NO_PLAYER)
		{
			CvPlayerAI& kPlayer = GET_PLAYER(ePlayer);
			const TeamTypes eTeam = kPlayer.getTeam();

			if(pkPlot->isVisible(eTeam))
			{
				sprintf_s(szBuffer, uiBufferLength, "Vis %d", kPlayer.GetID());
			}
		}
	}
	else if(strLayerName == "RevealedLayer")
	{
		if(ePlayer != NO_PLAYER)
		{
			CvPlayerAI& kPlayer = GET_PLAYER(ePlayer);
			const TeamTypes eTeam = kPlayer.getTeam();
			if(pkPlot->isRevealed(eTeam))
			{
				sprintf_s(szBuffer, uiBufferLength, "Rev %d", kPlayer.GetID());

			}
		}
	}
	else if(strLayerName == "DangerLayer")
	{
		if(ePlayer != NO_PLAYER)
		{
			CvPlayerAI& kPlayer = GET_PLAYER(ePlayer);
			const int iValue = kPlayer.GetPlotDanger(*pkPlot, false);

			sprintf_s(szBuffer, uiBufferLength, "%d", iValue);
		}
	}
	else if(strLayerName == "ArtifactLayer")
	{
		const int iValue = pkPlot->GetArchaeologicalRecord().m_eArtifactType; // this is a copy
		sprintf_s(szBuffer, uiBufferLength, "%d", iValue);
	}
	else if(strLayerName == "TacticalAnalysisLayer")
	{
		std::string strOut("E_NOIMPL");
		sprintf_s(szBuffer, uiBufferLength, "%s", strOut.c_str());
	}
	else if(strLayerName == "TargetingPathLayer")
	{
		extern int GetLastTargetingPathIndex(int plotIndex);
		sprintf_s(szBuffer, uiBufferLength, "%d", GetLastTargetingPathIndex(pkPlot->GetPlotIndex()));
	}

	return true;
}


void CvGlobals::cacheGlobals()
{
	Database::Connection* pDB = GetGameDatabase();
	pDB->Execute(m_kGlobalDefinesLookup, "SELECT Value from Defines where Name = ? LIMIT 1");

	////////////// BEGIN DEFINES //////////////////

	// -- ints -- //
	GD_INT_CACHE(AI_ATTEMPT_RUSH_OVER_X_TURNS_TO_BUILD);
	GD_INT_CACHE(INITIAL_AI_CITY_PRODUCTION);
	GD_INT_CACHE(POLICY_WEIGHT_PROPAGATION_PERCENT);
	GD_INT_CACHE(POLICY_WEIGHT_PROPAGATION_LEVELS);
	GD_INT_CACHE(POLICY_WEIGHT_PERCENT_DROP_NEW_BRANCH);
	GD_INT_CACHE(TECH_WEIGHT_PROPAGATION_PERCENT);
	GD_INT_CACHE(TECH_WEIGHT_PROPAGATION_LEVELS);
	GD_INT_CACHE(TECH_PRIORITY_UNIQUE_ITEM);
	GD_INT_CACHE(TECH_PRIORITY_MAYA_CALENDAR_BONUS);
	GD_INT_CACHE(DEFAULT_FLAVOR_VALUE);
	GD_INT_CACHE(PERSONALITY_FLAVOR_MAX_VALUE);
	GD_INT_CACHE(PERSONALITY_FLAVOR_MIN_VALUE);
	GD_INT_CACHE(FLAVOR_MIN_VALUE);
	GD_INT_CACHE(FLAVOR_MAX_VALUE);
	GD_INT_CACHE(FLAVOR_RANDOMIZATION_RANGE);
	GD_INT_CACHE(FLAVOR_EXPANDGROW_COEFFICIENT);
	GD_INT_CACHE(AI_GRAND_STRATEGY_NUM_TURNS_STRATEGY_MUST_BE_ACTIVE);
	GD_INT_CACHE(AI_GRAND_STRATEGY_CURRENT_STRATEGY_WEIGHT);
	GD_INT_CACHE(AI_GRAND_STRATEGY_GUESS_NO_CLUE_WEIGHT);
	GD_INT_CACHE(AI_GRAND_STRATEGY_GUESS_POSITIVE_THRESHOLD);
	GD_INT_CACHE(AI_GRAND_STRATEGY_GUESS_LIKELY_THRESHOLD);
	GD_INT_CACHE(AI_GRAND_STRATEGY_OTHER_PLAYERS_GS_MULTIPLIER);
	GD_INT_CACHE(AI_GS_CONQUEST_NOBODY_MET_FIRST_TURN);
	GD_INT_CACHE(AI_GRAND_STRATEGY_CONQUEST_NOBODY_MET_WEIGHT);
	GD_INT_CACHE(AI_GRAND_STRATEGY_CONQUEST_AT_WAR_WEIGHT);
	GD_INT_CACHE(AI_GS_CONQUEST_MILITARY_STRENGTH_FIRST_TURN);
	GD_INT_CACHE(AI_GRAND_STRATEGY_CONQUEST_POWER_RATIO_MULTIPLIER);
	GD_INT_CACHE(AI_GRAND_STRATEGY_CONQUEST_CRAMPED_WEIGHT);
	GD_INT_CACHE(AI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MINOR_ATTACKED);
	GD_INT_CACHE(AI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MINOR_CONQUERED);
	GD_INT_CACHE(AI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MAJOR_ATTACKED);
	GD_INT_CACHE(AI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MAJOR_CONQUERED);
	GD_INT_CACHE(AI_GS_CULTURE_RATIO_MULTIPLIER);
	GD_INT_CACHE(AI_GS_TOURISM_RATIO_MULTIPLIER);
	GD_INT_CACHE(AI_GS_CULTURE_AHEAD_WEIGHT);
	GD_INT_CACHE(AI_GS_CULTURE_TOURISM_AHEAD_WEIGHT);
	GD_INT_CACHE(AI_GS_CULTURE_INFLUENTIAL_CIV_MOD);
	GD_INT_CACHE(AI_GS_UN_SECURED_VOTE_MOD);
	GD_INT_CACHE(AI_GS_SS_HAS_APOLLO_PROGRAM);
	GD_INT_CACHE(AI_GS_SS_TECH_PROGRESS_MOD);
	GD_INT_CACHE(EVENT_MIN_DURATION_BETWEEN);
	GD_INT_CACHE(CITY_EVENT_MIN_DURATION_BETWEEN);
	GD_INT_CACHE(EVENT_PROBABILITY_EACH_TURN);
	GD_INT_CACHE(CITY_EVENT_PROBABILITY_EACH_TURN);
	GD_INT_CACHE(GLOBAL_RESOURCE_MONOPOLY_THRESHOLD);
	GD_INT_CACHE(STRATEGIC_RESOURCE_MONOPOLY_THRESHOLD);
	GD_INT_CACHE(MAX_PLOTS_PER_EXPLORER);
	GD_INT_CACHE(AI_STRATEGY_ISLAND_START_COAST_REVEAL_PERCENT);
	GD_INT_CACHE(AI_PLOT_VALUE_STRATEGIC_RESOURCE);
	GD_INT_CACHE(AI_PLOT_VALUE_LUXURY_RESOURCE);
	GD_INT_CACHE(AI_PLOT_VALUE_SPECIALIZATION_MULTIPLIER);
	GD_INT_CACHE(AI_PLOT_VALUE_YIELD_MULTIPLIER);
	GD_INT_CACHE(AI_PLOT_VALUE_DEFICIENT_YIELD_MULTIPLIER);
	GD_INT_CACHE(AI_PLOT_VALUE_FIERCE_DISPUTE);
	GD_INT_CACHE(AI_PLOT_VALUE_STRONG_DISPUTE);
	GD_INT_CACHE(AI_PLOT_VALUE_WEAK_DISPUTE);
	GD_INT_CACHE(AI_GOLD_PRIORITY_MINIMUM_PLOT_BUY_VALUE);
	GD_INT_CACHE(AI_GOLD_BALANCE_TO_HALVE_PLOT_BUY_MINIMUM);
	GD_INT_CACHE(AI_GOLD_PRIORITY_UPGRADE_BASE);
	GD_INT_CACHE(AI_GOLD_PRIORITY_UPGRADE_PER_FLAVOR_POINT);
	GD_INT_CACHE(AI_GOLD_PRIORITY_DIPLOMACY_BASE);
	GD_INT_CACHE(AI_GOLD_PRIORITY_DIPLOMACY_PER_FLAVOR_POINT);
	GD_INT_CACHE(AI_GOLD_PRIORITY_UNIT);
	GD_INT_CACHE(AI_GOLD_PRIORITY_DEFENSIVE_BUILDING);
	GD_INT_CACHE(AI_GOLD_PRIORITY_BUYOUT_CITY_STATE);
	GD_INT_CACHE(BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_FOOD);
	GD_INT_CACHE(BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_PRODUCTION);
	GD_INT_CACHE(BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_GOLD);
	GD_INT_CACHE(BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_SCIENCE);
	GD_INT_CACHE(BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_CULTURE);
	GD_INT_CACHE(BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_LUXURY_RESOURCE);
	GD_INT_CACHE(BUILDER_TASKING_BASELINE_BUILD_IMPROVEMENTS);
	GD_INT_CACHE(BUILDER_TASKING_BASELINE_BUILD_RESOURCE_IMPROVEMENTS);
	GD_INT_CACHE(BUILDER_TASKING_BASELINE_BUILD_ROUTES);
	GD_INT_CACHE(BUILDER_TASKING_BASELINE_REPAIR);
	GD_INT_CACHE(BUILDER_TASKING_BASELINE_SCRUB_FALLOUT);
	GD_INT_CACHE(BUILDER_TASKING_BASELINE_ADDS_FOOD);
	GD_INT_CACHE(BUILDER_TASKING_BASELINE_ADDS_GOLD);
	GD_INT_CACHE(BUILDER_TASKING_BASELINE_ADDS_FAITH);
	GD_INT_CACHE(BUILDER_TASKING_BASELINE_ADDS_PRODUCTION);
	GD_INT_CACHE(BUILDER_TASKING_BASELINE_ADDS_SCIENCE);
	GD_INT_CACHE(BUILDER_TASKING_BASELINE_ADDS_TOURISM);
	GD_INT_CACHE(BUILDER_TASKING_BASELINE_ADDS_CULTURE_LOCAL);
	GD_INT_CACHE(BUILDER_TASKING_BASELINE_ADDS_GOLDEN_AGE_POINTS);
	GD_INT_CACHE(BUILDER_TASKING_BASELINE_ADDS_CULTURE);
	GD_INT_CACHE(AI_STRATEGY_DEFEND_MY_LANDS_BASE_UNITS);
	GD_INT_CACHE(AI_MILITARY_CITY_THREAT_WEIGHT_CAPITAL);
	GD_INT_CACHE(AI_MILITARY_RECAPTURING_OWN_CITY);
	GD_INT_CACHE(AI_MILITARY_CAPTURING_ORIGINAL_CAPITAL);
	GD_INT_CACHE(AI_CITY_SPECIALIZATION_EARLIEST_TURN);
	GD_INT_CACHE(AI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL);
	GD_INT_CACHE(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED);
	GD_INT_CACHE(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH);
	GD_INT_CACHE(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION);
	GD_INT_CACHE(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE);
	GD_INT_CACHE(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL);
	GD_INT_CACHE(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT);
	GD_INT_CACHE(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS);
	GD_INT_CACHE(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL);
	GD_INT_CACHE(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER);
	GD_INT_CACHE(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP);
	GD_INT_CACHE(AI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE);
	GD_INT_CACHE(AI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY);
	GD_INT_CACHE(AI_CITYSTRATEGY_SMALL_CITY_POP_THRESHOLD);
	GD_INT_CACHE(AI_CITYSTRATEGY_MEDIUM_CITY_POP_THRESHOLD);
	GD_INT_CACHE(AI_CITYSTRATEGY_LARGE_CITY_POP_THRESHOLD);
	GD_INT_CACHE(AI_CITYSTRATEGY_NEED_TILE_IMPROVERS_DESPERATE_TURN);
	GD_INT_CACHE(AI_CITYSTRATEGY_WANT_TILE_IMPROVERS_MINIMUM_SIZE);
	GD_INT_CACHE(AI_CITYSTRATEGY_OPERATION_UNIT_BASE_WEIGHT);
	GD_INT_CACHE(AI_CITYSTRATEGY_OPERATION_UNIT_FLAVOR_MULTIPLIER);
	GD_INT_CACHE(AI_CITYSTRATEGY_ARMY_UNIT_BASE_WEIGHT);
	GD_INT_CACHE(AI_MOSTLY_HAPPY_THRESHOLD);
	GD_INT_CACHE(AI_CITY_VALUE_MULTIPLIER);
	GD_INT_CACHE(AI_CAPITAL_VALUE_MULTIPLIER);
	GD_INT_CACHE(AI_CITY_HIGH_VALUE_THRESHOLD);
	GD_INT_CACHE(AI_CITY_SOME_VALUE_THRESHOLD);
	GD_INT_CACHE(AI_CITY_PUPPET_BONUS_THRESHOLD);
	GD_INT_CACHE(AI_CITIZEN_VALUE_FOOD);
	GD_INT_CACHE(AI_CITIZEN_VALUE_FOOD_NEED_GROWTH);
	GD_INT_CACHE(AI_CITIZEN_VALUE_FOOD_STARVING);
	GD_INT_CACHE(AI_CITIZEN_VALUE_PRODUCTION);
	GD_INT_CACHE(AI_CITIZEN_VALUE_GOLD);
	GD_INT_CACHE(AI_CITIZEN_VALUE_SCIENCE);
	GD_INT_CACHE(AI_CITIZEN_VALUE_CULTURE);
	GD_INT_CACHE(AI_CITIZEN_VALUE_FAITH);
	GD_INT_CACHE(AI_CITIZEN_VALUE_GPP);
	GD_INT_CACHE(AI_CITIZEN_VALUE_GOLD_IN_DEBT);
	GD_INT_CACHE(AI_CITIZEN_SPECIALIST_COMBO_BONUS);
	GD_INT_CACHE(AI_CITIZEN_UNHAPPINESS_VALUE_EMPIRE_VERY_UNHAPPY);
	GD_INT_CACHE(AI_CITIZEN_UNHAPPINESS_VALUE_EMPIRE_UNHAPPY);
	GD_INT_CACHE(AI_CITIZEN_UNHAPPINESS_VALUE_CITY_UNHAPPY);
	GD_INT_CACHE(AI_CITIZEN_UNHAPPINESS_VALUE_EMPIRE_HAPPY);
	GD_INT_CACHE(AI_NUM_CORE_CITIES_FOR_SPACESHIP);
	GD_INT_CACHE(AI_OPERATIONAL_PERCENT_HEALTH_FOR_OPERATION);
	GD_INT_CACHE(AI_TACTICAL_MAP_DOMINANCE_PERCENTAGE);
	GD_INT_CACHE(AI_TACTICAL_MAP_TEMP_ZONE_TURNS);
	GD_INT_CACHE(AI_TACTICAL_RECRUIT_RANGE);
	GD_INT_CACHE(AI_TACTICAL_BARBARIAN_RELEASE_VARIATION);
	GD_INT_CACHE(AI_HOMELAND_MAX_DEFENSIVE_MOVE_TURNS);
	GD_INT_CACHE(AI_HOMELAND_GREAT_PERSON_TURNS_TO_WAIT);
	GD_INT_CACHE(AI_DIPLO_PLOT_RANGE_FROM_CITY_HOME_FRONT);
	GD_INT_CACHE(AI_CONFIG_MILITARY_MELEE_PER_AA);
	GD_INT_CACHE(AI_CONFIG_MILITARY_TILES_PER_SHIP);
	GD_INT_CACHE(MINOR_BULLY_GOLD);
	GD_INT_CACHE(MINOR_BULLY_GOLD_GROWTH_FACTOR);
	GD_INT_CACHE(MINOR_CIV_GOLD_TRIBUTE_THRESHOLD);
	GD_INT_CACHE(MINOR_CIV_HEAVY_TRIBUTE_THRESHOLD);
	GD_INT_CACHE(MINOR_FRIENDSHIP_RATE_MOD_SHARED_RELIGION);
	GD_INT_CACHE(MINOR_FRIENDSHIP_DROP_PER_TURN);
	GD_INT_CACHE(MINOR_FRIENDSHIP_DROP_PER_TURN_HOSTILE);
	GD_INT_CACHE(MINOR_FRIENDSHIP_DROP_PER_TURN_AGGRESSOR);
	GD_INT_CACHE(MINOR_FRIENDSHIP_DROP_DISHONOR_PLEDGE_TO_PROTECT);
	GD_INT_CACHE(MINOR_FRIENDSHIP_DROP_BULLY_GOLD_SUCCESS);
	GD_INT_CACHE(MINOR_FRIENDSHIP_DROP_BULLY_WORKER_SUCCESS);
	GD_INT_CACHE(MINOR_FRIENDSHIP_NEGATIVE_INCREASE_PER_TURN);
	GD_INT_CACHE(MINOR_FRIENDSHIP_AT_WAR);
	GD_INT_CACHE(MINOR_CIV_AGGRESSOR_THRESHOLD);
	GD_INT_CACHE(MINOR_CIV_WARMONGER_THRESHOLD);
	GD_INT_CACHE(PERMANENT_WAR_AGGRESSOR_CHANCE);
	GD_INT_CACHE(PERMANENT_WAR_OTHER_WARMONGER_CHANCE_DISTANT);
	GD_INT_CACHE(PERMANENT_WAR_OTHER_WARMONGER_CHANCE_FAR);
	GD_INT_CACHE(PERMANENT_WAR_OTHER_WARMONGER_CHANCE_CLOSE);
	GD_INT_CACHE(PERMANENT_WAR_OTHER_WARMONGER_CHANCE_NEIGHBORS);
	GD_INT_CACHE(PERMANENT_WAR_OTHER_CHANCE_DISTANT);
	GD_INT_CACHE(PERMANENT_WAR_OTHER_CHANCE_FAR);
	GD_INT_CACHE(PERMANENT_WAR_OTHER_CHANCE_CLOSE);
	GD_INT_CACHE(PERMANENT_WAR_OTHER_CHANCE_NEIGHBORS);
	GD_INT_CACHE(PERMANENT_WAR_OTHER_AT_WAR);
	GD_INT_CACHE(FRIENDSHIP_NEUTRAL_ON_DEATH);
	GD_INT_CACHE(FRIENDSHIP_FRIENDS_ON_DEATH);
	GD_INT_CACHE(FRIENDSHIP_ALLIES_ON_DEATH);
	GD_INT_CACHE(FRIENDSHIP_THRESHOLD_NEUTRAL);
	GD_INT_CACHE(FRIENDSHIP_THRESHOLD_FRIENDS);
	GD_INT_CACHE(FRIENDSHIP_THRESHOLD_ALLIES);
	GD_INT_CACHE(FRIENDSHIP_THRESHOLD_CAN_BULLY);
	GD_INT_CACHE(FRIENDSHIP_THRESHOLD_CAN_PLEDGE_TO_PROTECT);
	GD_INT_CACHE(FRIENDSHIP_THRESHOLD_MOD_MEDIEVAL);
	GD_INT_CACHE(FRIENDSHIP_THRESHOLD_MOD_INDUSTRIAL);
	GD_INT_CACHE(MINOR_FRIENDSHIP_CLOSE_AMOUNT);
	GD_INT_CACHE(MINOR_CIV_SCIENCE_BONUS_MULTIPLIER);
	GD_INT_CACHE(FRIENDS_CULTURE_BONUS_AMOUNT_ANCIENT);
	GD_INT_CACHE(FRIENDS_CULTURE_BONUS_AMOUNT_MEDIEVAL);
	GD_INT_CACHE(FRIENDS_CULTURE_BONUS_AMOUNT_INDUSTRIAL);
	GD_INT_CACHE(ALLIES_CULTURE_BONUS_AMOUNT_ANCIENT);
	GD_INT_CACHE(ALLIES_CULTURE_BONUS_AMOUNT_MEDIEVAL);
	GD_INT_CACHE(ALLIES_CULTURE_BONUS_AMOUNT_INDUSTRIAL);
	GD_INT_CACHE(FRIENDS_CAPITAL_FOOD_BONUS_AMOUNT_PRE_RENAISSANCE);
	GD_INT_CACHE(FRIENDS_CAPITAL_FOOD_BONUS_AMOUNT_POST_RENAISSANCE);
	GD_INT_CACHE(FRIENDS_OTHER_CITIES_FOOD_BONUS_AMOUNT_PRE_RENAISSANCE);
	GD_INT_CACHE(FRIENDS_OTHER_CITIES_FOOD_BONUS_AMOUNT_POST_RENAISSANCE);
	GD_INT_CACHE(ALLIES_CAPITAL_FOOD_BONUS_AMOUNT);
	GD_INT_CACHE(ALLIES_OTHER_CITIES_FOOD_BONUS_AMOUNT);
	GD_INT_CACHE(FRIENDS_BASE_TURNS_UNIT_SPAWN);
	GD_INT_CACHE(FRIENDS_RAND_TURNS_UNIT_SPAWN);
	GD_INT_CACHE(ALLIES_EXTRA_TURNS_UNIT_SPAWN);
	GD_INT_CACHE(UNIT_SPAWN_BIAS_MULTIPLIER);
	GD_INT_CACHE(UNIT_SPAWN_NUM_CHOICES);
	GD_INT_CACHE(FRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_ANCIENT);
	GD_INT_CACHE(FRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_MEDIEVAL);
	GD_INT_CACHE(FRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_INDUSTRIAL);
	GD_INT_CACHE(ALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_ANCIENT);
	GD_INT_CACHE(ALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_MEDIEVAL);
	GD_INT_CACHE(ALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_INDUSTRIAL);
	GD_INT_CACHE(FRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_ANCIENT);
	GD_INT_CACHE(FRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_MEDIEVAL);
	GD_INT_CACHE(FRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_INDUSTRIAL);
	GD_INT_CACHE(ALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_ANCIENT);
	GD_INT_CACHE(ALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_MEDIEVAL);
	GD_INT_CACHE(ALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_INDUSTRIAL);
	GD_INT_CACHE(FRIENDS_FAITH_FLAT_BONUS_AMOUNT_ANCIENT);
	GD_INT_CACHE(FRIENDS_FAITH_FLAT_BONUS_AMOUNT_CLASSICAL);
	GD_INT_CACHE(FRIENDS_FAITH_FLAT_BONUS_AMOUNT_MEDIEVAL);
	GD_INT_CACHE(FRIENDS_FAITH_FLAT_BONUS_AMOUNT_RENAISSANCE);
	GD_INT_CACHE(FRIENDS_FAITH_FLAT_BONUS_AMOUNT_INDUSTRIAL);
	GD_INT_CACHE(ALLIES_FAITH_FLAT_BONUS_AMOUNT_ANCIENT);
	GD_INT_CACHE(ALLIES_FAITH_FLAT_BONUS_AMOUNT_CLASSICAL);
	GD_INT_CACHE(ALLIES_FAITH_FLAT_BONUS_AMOUNT_MEDIEVAL);
	GD_INT_CACHE(ALLIES_FAITH_FLAT_BONUS_AMOUNT_RENAISSANCE);
	GD_INT_CACHE(ALLIES_FAITH_FLAT_BONUS_AMOUNT_INDUSTRIAL);
	GD_INT_CACHE(MINOR_TURNS_GREAT_PEOPLE_SPAWN_BASE);
	GD_INT_CACHE(MINOR_TURNS_GREAT_PEOPLE_SPAWN_RAND);
	GD_INT_CACHE(MINOR_TURNS_GREAT_PEOPLE_SPAWN_BIAS_MULTIPLY);
	GD_INT_CACHE(MINOR_ADDITIONAL_ALLIES_GP_CHANGE);
	GD_INT_CACHE(MAX_MINOR_ADDITIONAL_ALLIES_GP_CHANGE);
	GD_INT_CACHE(MAX_DISTANCE_MINORS_BARB_QUEST);
	GD_INT_CACHE(MINOR_QUEST_REBELLION_TIMER);
	GD_INT_CACHE(SCHOLAR_MINOR_ALLY_MULTIPLIER);
	GD_INT_CACHE(SCIENCE_LEAGUE_GREAT_WORK_MODIFIER);
	GD_INT_CACHE(PIONEER_POPULATION_CHANGE);
	GD_INT_CACHE(PIONEER_EXTRA_PLOTS);
	GD_INT_CACHE(PIONEER_FOOD_PERCENT);
	GD_INT_CACHE(COLONIST_POPULATION_CHANGE);
	GD_INT_CACHE(COLONIST_EXTRA_PLOTS);
	GD_INT_CACHE(COLONIST_FOOD_PERCENT);
	GD_INT_CACHE(MINOR_CIV_GOLD_GIFT_GAME_MULTIPLIER);
	GD_INT_CACHE(MINOR_CIV_GOLD_GIFT_GAME_DIVISOR);
	GD_INT_CACHE(MINOR_CIV_GOLD_GIFT_VISIBLE_DIVISOR);
	GD_INT_CACHE(MINOR_CIV_GOLD_GIFT_MINIMUM_FRIENDSHIP_REWARD);
	GD_INT_CACHE(FRIENDSHIP_PER_UNIT_INTRUDING);
	GD_INT_CACHE(FRIENDSHIP_PER_BARB_KILLED);
	GD_INT_CACHE(FRIENDSHIP_PER_UNIT_GIFTED);
	GD_INT_CACHE(MINOR_LIBERATION_FRIENDSHIP);
	GD_INT_CACHE(MINOR_REMOVE_SPHERE_FRIENDSHIP);
	GD_INT_CACHE(MINOR_LIBERATION_RESTING_INFLUENCE);
	GD_INT_CACHE(MINOR_LANDMARK_RESTING_INFLUENCE);
	GD_INT_CACHE(RETURN_CIVILIAN_FRIENDSHIP);
	GD_INT_CACHE(MINOR_CIV_GLOBAL_QUEST_FIRST_POSSIBLE_TURN);
	GD_INT_CACHE(MINOR_CIV_GLOBAL_QUEST_FIRST_POSSIBLE_TURN_RAND);
	GD_INT_CACHE(MINOR_CIV_GLOBAL_QUEST_MIN_TURNS_BETWEEN);
	GD_INT_CACHE(MINOR_CIV_GLOBAL_QUEST_RAND_TURNS_BETWEEN);
	GD_INT_CACHE(MINOR_CIV_GLOBAL_QUEST_RAND_TURNS_BETWEEN_HOSTILE_MULTIPLIER);
	GD_INT_CACHE(MINOR_CIV_PERSONAL_QUEST_FIRST_POSSIBLE_TURN);
	GD_INT_CACHE(MINOR_CIV_PERSONAL_QUEST_FIRST_POSSIBLE_TURN_RAND);
	GD_INT_CACHE(MINOR_CIV_PERSONAL_QUEST_MIN_TURNS_BETWEEN);
	GD_INT_CACHE(MINOR_CIV_PERSONAL_QUEST_RAND_TURNS_BETWEEN);
	GD_INT_CACHE(MINOR_CIV_PERSONAL_QUEST_RAND_TURNS_BETWEEN_HOSTILE_MULTIPLIER);
	GD_INT_CACHE(MINOR_CIV_QUEST_ROUTE_MAXIMUM_DISTANCE);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CAMP_RANGE);
	GD_INT_CACHE(MINOR_CIV_QUEST_WONDER_COMPLETION_MAX_TURNS);
	GD_INT_CACHE(MINOR_CIV_QUEST_WONDER_COMPLETION_THRESHOLD);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_MIN_DISTANCE);
	GD_INT_CACHE(MINOR_CIV_QUEST_ARCHAEOLOGY_RANGE);
	GD_INT_CACHE(MINOR_CIV_QUEST_ACQUIRE_CITY_MINIMUM_POP);
	GD_INT_CACHE(MINOR_CIV_QUEST_ACQUIRE_CITY_MINIMUM_TURNS);
	GD_INT_CACHE(MINOR_CIV_THREATENED_BY_BARBS_NOTIF_THRESHOLD);
	GD_INT_CACHE(MINOR_CIV_MERCANTILE_RESOURCES_QUANTITY);
	GD_INT_CACHE(MINOR_CIV_MERCANTILE_RESOURCES_KEEP_ON_CAPTURE_DISABLED);
	GD_INT_CACHE(QUEST_DISABLED_ROUTE);
	GD_INT_CACHE(QUEST_DISABLED_KILL_CAMP);
	GD_INT_CACHE(QUEST_DISABLED_CONNECT_RESOURCE);
	GD_INT_CACHE(QUEST_DISABLED_CONSTRUCT_WONDER);
	GD_INT_CACHE(QUEST_DISABLED_GREAT_PERSON);
	GD_INT_CACHE(QUEST_DISABLED_KILL_CITY_STATE);
	GD_INT_CACHE(QUEST_DISABLED_KILL_CITY_STATE_FRIENDLY);
	GD_INT_CACHE(QUEST_DISABLED_FIND_PLAYER);
	GD_INT_CACHE(QUEST_DISABLED_FIND_CITY);
	GD_INT_CACHE(QUEST_DISABLED_NATURAL_WONDER);
	GD_INT_CACHE(QUEST_DISABLED_GIVE_GOLD);
	GD_INT_CACHE(QUEST_DISABLED_PLEDGE_TO_PROTECT);
	GD_INT_CACHE(QUEST_DISABLED_CONTEST_CULTURE);
	GD_INT_CACHE(QUEST_DISABLED_CONTEST_FAITH);
	GD_INT_CACHE(QUEST_DISABLED_CONTEST_TECHS);
	GD_INT_CACHE(QUEST_DISABLED_INVEST);
	GD_INT_CACHE(QUEST_DISABLED_BULLY_CITY_STATE);
	GD_INT_CACHE(QUEST_DISABLED_DENOUNCE_MAJOR);
	GD_INT_CACHE(QUEST_DISABLED_SPREAD_RELIGION);
	GD_INT_CACHE(QUEST_DISABLED_TRADE_ROUTE);
	GD_INT_CACHE(QUEST_DISABLED_WAR);
	GD_INT_CACHE(QUEST_DISABLED_CONSTRUCT_NATIONAL_WONDER);
	GD_INT_CACHE(QUEST_DISABLED_GIFT_SPECIFIC_UNIT);
	GD_INT_CACHE(QUEST_DISABLED_FIND_CITY_STATE);
	GD_INT_CACHE(QUEST_DISABLED_INFLUENCE);
	GD_INT_CACHE(QUEST_DISABLED_CONTEST_TOURISM);
	GD_INT_CACHE(QUEST_DISABLED_ARCHAEOLOGY);
	GD_INT_CACHE(QUEST_DISABLED_CIRCUMNAVIGATION);
	GD_INT_CACHE(QUEST_DISABLED_LIBERATION);
	GD_INT_CACHE(QUEST_DISABLED_HORDE);
	GD_INT_CACHE(QUEST_DISABLED_REBELLION);
	GD_INT_CACHE(QUEST_DISABLED_EXPLORE_AREA);
	GD_INT_CACHE(QUEST_DISABLED_BUILD_X_BUILDINGS);
	GD_INT_CACHE(QUEST_DISABLED_SPY_ON_MAJOR);
	GD_INT_CACHE(QUEST_DISABLED_COUP);
	GD_INT_CACHE(QUEST_DISABLED_ACQUIRE_CITY);
	GD_INT_CACHE(QUEST_DISABLED_ACQUIRE_CITY_MILITARISTIC_ONLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_ROUTE_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_ROUTE_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_ROUTE_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_ROUTE_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_ROUTE_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_ROUTE_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_ROUTE_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_ROUTE_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_ROUTE_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_ROUTE_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONNECT_RESOURCE_COPIES_HYPERLINK);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_WONDER_COPIES_HYPERLINK);
	GD_INT_CACHE(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_GREAT_PERSON_COPIES_HYPERLINK);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_PLAYER_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_NATURAL_WONDER_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIVE_GOLD_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_PLEDGE_TO_PROTECT_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_BULLY_CITY_STATE_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_DENOUNCE_MAJOR_COPIES_HYPERLINK);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPREAD_RELIGION_COPIES_HYPERLINK);
	GD_INT_CACHE(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_TRADE_ROUTE_COPIES_HYPERLINK);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_WAR_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_WAR_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_WAR_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_WAR_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_WAR_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_WAR_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_WAR_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_WAR_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_WAR_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_WAR_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_WAR_COPIES_HYPERLINK);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONSTRUCT_NATIONAL_WONDER_COPIES_HYPERLINK);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_GIFT_SPECIFIC_UNIT_COPIES_HYPERLINK);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_FIND_CITY_STATE_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_LIBERATION_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_LIBERATION_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_LIBERATION_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_LIBERATION_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_LIBERATION_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_LIBERATION_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_LIBERATION_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_LIBERATION_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_LIBERATION_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_LIBERATION_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_LIBERATION_COPIES_HYPERLINK);
	GD_INT_CACHE(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_EXPLORE_AREA_COPIES_HYPERLINK);
	GD_INT_CACHE(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_BUILD_X_BUILDINGS_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_SPY_ON_MAJOR_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_COUP_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_COUP_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_COUP_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_COUP_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_COUP_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_COUP_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_COUP_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_COUP_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_COUP_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_COUP_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_ACQUIRE_CITY_COPIES_HYPERLINK);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CAMP_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CAMP_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CAMP_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CAMP_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CAMP_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CAMP_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CAMP_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CAMP_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CAMP_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CAMP_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_KILL_CITY_STATE_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_CULTURE_COPIES_HYPERLINK);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_FAITH_COPIES_HYPERLINK);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TECHS_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_INVEST_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_INVEST_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_INVEST_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_INVEST_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_INVEST_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_INVEST_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_INVEST_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_INVEST_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_INVEST_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_INVEST_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_INFLUENCE_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_INFLUENCE_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_INFLUENCE_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_INFLUENCE_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_INFLUENCE_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_INFLUENCE_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_INFLUENCE_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_INFLUENCE_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_INFLUENCE_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_INFLUENCE_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CONTEST_TOURISM_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_ARCHAEOLOGY_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_CIRCUMNAVIGATION_COPIES_HYPERLINK);
	GD_INT_CACHE(MINOR_CIV_QUEST_HORDE_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_HORDE_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_HORDE_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_HORDE_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_HORDE_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_HORDE_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_HORDE_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_HORDE_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_HORDE_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_HORDE_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_HORDE_COPIES_HYPERLINK);
	GD_INT_CACHE(MINOR_CIV_QUEST_REBELLION_COPIES_BASE);
	GD_INT_CACHE(MINOR_CIV_QUEST_REBELLION_COPIES_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_REBELLION_COPIES_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_REBELLION_COPIES_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_REBELLION_COPIES_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_REBELLION_COPIES_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_REBELLION_COPIES_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_REBELLION_COPIES_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_REBELLION_COPIES_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_REBELLION_COPIES_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_REBELLION_COPIES_HYPERLINK);
	GD_INT_CACHE(INFLUENCE_TARGET_DISTANCE_WEIGHT_VALUE);
	GD_INT_CACHE(AI_MILITARY_RECAPTURING_CITY_STATE);
	GD_INT_CACHE(NEED_DIPLOMAT_THRESHOLD_MODIFIER);
	GD_INT_CACHE(NEED_DIPLOMAT_DESIRE_MODIFIER);
	GD_INT_CACHE(NEED_DIPLOMAT_DISTASTE_MODIFIER);
	GD_INT_CACHE(INFLUENCE_MINOR_QUEST_BOOST);
	GD_INT_CACHE(MINOR_FRIENDSHIP_DROP_PER_TURN_DAMAGED_CAPITAL_MULTIPLIER);
	GD_INT_CACHE(LEAGUE_AID_MAX);
	GD_INT_CACHE(CSD_GOLD_GIFT_DISABLED);
	GD_INT_CACHE(MAX_TURNS_OBSERVER_MODE);
	GD_INT_CACHE(RELIGION_BELIEF_SCORE_CITY_MULTIPLIER);
	GD_INT_CACHE(RELIGION_MISSIONARY_RANGE_IN_TURNS);
	GD_INT_CACHE(RELIGION_MAX_MISSIONARIES);
	GD_INT_CACHE(MC_GIFT_WEIGHT_THRESHOLD);
	GD_INT_CACHE(MC_ALWAYS_GIFT_DIPLO_THRESHOLD);
	GD_INT_CACHE(MC_SMALL_GIFT_WEIGHT_PASS_OTHER_PLAYER);
	GD_INT_CACHE(MC_GIFT_WEIGHT_PASS_OTHER_PLAYER);
	GD_INT_CACHE(MC_GIFT_WEIGHT_MARITIME_GROWTH);
	GD_INT_CACHE(MC_GIFT_WEIGHT_DIPLO_VICTORY);
	GD_INT_CACHE(MC_GIFT_WEIGHT_CULTURE_VICTORY);
	GD_INT_CACHE(MC_GIFT_WEIGHT_CONQUEST_VICTORY);
	GD_INT_CACHE(MC_GIFT_WEIGHT_MILITARISTIC);
	GD_INT_CACHE(MC_GIFT_WEIGHT_RESOURCE_WE_NEED);
	GD_INT_CACHE(MC_GIFT_WEIGHT_PROTECTIVE);
	GD_INT_CACHE(MC_GIFT_WEIGHT_HOSTILE);
	GD_INT_CACHE(MC_GIFT_WEIGHT_NEIGHBORS);
	GD_INT_CACHE(MC_GIFT_WEIGHT_CLOSE);
	GD_INT_CACHE(MC_GIFT_WEIGHT_FAR);
	GD_INT_CACHE(MC_GIFT_WEIGHT_ALMOST_NOT_ALLIES);
	GD_INT_CACHE(MC_GIFT_WEIGHT_ALMOST_NOT_FRIENDS);
	GD_INT_CACHE(OPINION_THRESHOLD_UNFORGIVABLE);
	GD_INT_CACHE(OPINION_THRESHOLD_ENEMY);
	GD_INT_CACHE(OPINION_THRESHOLD_COMPETITOR);
	GD_INT_CACHE(OPINION_THRESHOLD_FAVORABLE);
	GD_INT_CACHE(OPINION_THRESHOLD_FRIEND);
	GD_INT_CACHE(OPINION_THRESHOLD_ALLY);
	GD_INT_CACHE(OPINION_THRESHOLD_MAJOR_POSITIVE);
	GD_INT_CACHE(OPINION_THRESHOLD_MAJOR_NEGATIVE);
	GD_INT_CACHE(OPINION_WEIGHT_LAND_FIERCE);
	GD_INT_CACHE(OPINION_WEIGHT_LAND_STRONG);
	GD_INT_CACHE(OPINION_WEIGHT_LAND_WEAK);
	GD_INT_CACHE(OPINION_WEIGHT_LAND_NONE);
	GD_INT_CACHE(OPINION_WEIGHT_LAND_WARMONGER);
	GD_INT_CACHE(OPINION_WEIGHT_LAND_NONE_WARMONGER);
	GD_INT_CACHE(OPINION_WEIGHT_VICTORY_FIERCE);
	GD_INT_CACHE(OPINION_WEIGHT_VICTORY_STRONG);
	GD_INT_CACHE(OPINION_WEIGHT_VICTORY_WEAK);
	GD_INT_CACHE(OPINION_WEIGHT_VICTORY_NONE);
	GD_INT_CACHE(OPINION_WEIGHT_VICTORY_PER_ERA);
	GD_INT_CACHE(OPINION_WEIGHT_VICTORY_BLOCK_FIERCE);
	GD_INT_CACHE(OPINION_WEIGHT_VICTORY_BLOCK_STRONG);
	GD_INT_CACHE(OPINION_WEIGHT_VICTORY_BLOCK_WEAK);
	GD_INT_CACHE(OPINION_WEIGHT_VICTORY_BLOCK_NONE);
	GD_INT_CACHE(OPINION_WEIGHT_VICTORY_BLOCK_PER_ERA);
	GD_INT_CACHE(OPINION_WEIGHT_WONDER_FIERCE);
	GD_INT_CACHE(OPINION_WEIGHT_WONDER_STRONG);
	GD_INT_CACHE(OPINION_WEIGHT_WONDER_WEAK);
	GD_INT_CACHE(OPINION_WEIGHT_WONDER_NONE);
	GD_INT_CACHE(OPINION_WEIGHT_WONDER_CULTURAL);
	GD_INT_CACHE(OPINION_WEIGHT_WONDER_NONE_CULTURAL);
	GD_INT_CACHE(OPINION_WEIGHT_MINOR_CIV_FIERCE);
	GD_INT_CACHE(OPINION_WEIGHT_MINOR_CIV_STRONG);
	GD_INT_CACHE(OPINION_WEIGHT_MINOR_CIV_WEAK);
	GD_INT_CACHE(OPINION_WEIGHT_MINOR_CIV_NONE);
	GD_INT_CACHE(OPINION_WEIGHT_MINOR_CIV_DIPLOMAT);
	GD_INT_CACHE(OPINION_WEIGHT_MINOR_CIV_NONE_DIPLOMAT);
	GD_INT_CACHE(OPINION_WEIGHT_TECH_FIERCE);
	GD_INT_CACHE(OPINION_WEIGHT_TECH_STRONG);
	GD_INT_CACHE(OPINION_WEIGHT_TECH_WEAK);
	GD_INT_CACHE(OPINION_WEIGHT_TECH_NONE);
	GD_INT_CACHE(OPINION_WEIGHT_POLICY_FIERCE);
	GD_INT_CACHE(OPINION_WEIGHT_POLICY_STRONG);
	GD_INT_CACHE(OPINION_WEIGHT_POLICY_WEAK);
	GD_INT_CACHE(OPINION_WEIGHT_POLICY_NONE);
	GD_INT_CACHE(OPINION_WEIGHT_MILITARY_AGGRESSIVE_POSTURE_LOW);
	GD_INT_CACHE(OPINION_WEIGHT_MILITARY_AGGRESSIVE_POSTURE_MEDIUM);
	GD_INT_CACHE(OPINION_WEIGHT_MILITARY_AGGRESSIVE_POSTURE_HIGH);
	GD_INT_CACHE(OPINION_WEIGHT_MILITARY_AGGRESSIVE_POSTURE_INCREDIBLE);
	GD_INT_CACHE(OPINION_WEIGHT_ASKED_NO_SETTLE);
	GD_INT_CACHE(OPINION_WEIGHT_ASKED_STOP_SPYING);
	GD_INT_CACHE(OPINION_WEIGHT_MADE_DEMAND_OF_US);
	GD_INT_CACHE(OPINION_WEIGHT_MADE_DEMAND_OF_US_SUBSEQUENT);
	GD_INT_CACHE(OPINION_WEIGHT_MADE_DEMAND_YOU_NO_TAKE_DIVISOR);
	GD_INT_CACHE(OPINION_WEIGHT_MADE_DEMAND_BANKRUPT_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_MADE_DEMAND_BANKRUPT_MULTIPLIER_TURNS);
	GD_INT_CACHE(OPINION_WEIGHT_RETURNED_CIVILIAN);
	GD_INT_CACHE(OPINION_WEIGHT_RETURNED_CIVILIAN_SUBSEQUENT);
	GD_INT_CACHE(OPINION_WEIGHT_BUILT_LANDMARK);
	GD_INT_CACHE(OPINION_WEIGHT_BUILT_LANDMARK_SUBSEQUENT);
	GD_INT_CACHE(OPINION_WEIGHT_RESURRECTED);
	GD_INT_CACHE(OPINION_WEIGHT_LIBERATOR_CAPTURED_CAPITAL_DIVISOR);
	GD_INT_CACHE(OPINION_WEIGHT_LIBERATOR_CAPTURED_HOLY_CITY_DIVISOR);
	GD_INT_CACHE(OPINION_WEIGHT_EMBASSY);
	GD_INT_CACHE(OPINION_WEIGHT_EMBASSY_THEM);
	GD_INT_CACHE(OPINION_WEIGHT_EMBASSY_MUTUAL);
	GD_INT_CACHE(OPINION_WEIGHT_DIPLOMAT);
	GD_INT_CACHE(OPINION_WEIGHT_DIPLOMAT_MOD);
	GD_INT_CACHE(OPINION_WEIGHT_CULTURE_BOMBED);
	GD_INT_CACHE(RELIGION_DIPLO_HIT_INITIAL_CONVERT_FRIENDLY_CITY);
	GD_INT_CACHE(RELIGION_DIPLO_HIT_RELIGIOUS_FLIP_FRIENDLY_CITY);
	GD_INT_CACHE(RELIGION_DIPLO_HIT_CONVERT_HOLY_CITY);
	GD_INT_CACHE(RELIGION_DIPLO_HIT_THRESHOLD);
	GD_INT_CACHE(OPINION_WEIGHT_PER_NEGATIVE_CONVERSION);
	GD_INT_CACHE(OPINION_WEIGHT_ADOPTING_HIS_RELIGION);
	GD_INT_CACHE(OPINION_WEIGHT_ADOPTING_MY_RELIGION);
	GD_INT_CACHE(OPINION_WEIGHT_SAME_STATE_RELIGIONS);
	GD_INT_CACHE(OPINION_WEIGHT_DIFFERENT_STATE_RELIGIONS);
	GD_INT_CACHE(OPINION_WEIGHT_DIFFERENT_OWNED_RELIGIONS);
	GD_INT_CACHE(OPINION_WEIGHT_WORLD_RELIGION_MODIFIER);
	GD_INT_CACHE(OPINION_WEIGHT_SAME_LATE_POLICIES);
	GD_INT_CACHE(OPINION_WEIGHT_DIFFERENT_LATE_POLICIES);
	GD_INT_CACHE(OPINION_WEIGHT_WORLD_IDEOLOGY_MODIFIER);
	GD_INT_CACHE(OPINION_WEIGHT_IDEOLOGY_VASSAL_DIVISOR);
	GD_INT_CACHE(OPINION_WEIGHT_BROKEN_MILITARY_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_BROKEN_MILITARY_PROMISE_WORLD);
	GD_INT_CACHE(OPINION_WEIGHT_IGNORED_MILITARY_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_BROKEN_EXPANSION_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_IGNORED_EXPANSION_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_BROKEN_BORDER_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_IGNORED_BORDER_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_BROKEN_CITY_STATE_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_BROKEN_CITY_STATE_PROMISE_WORLD);
	GD_INT_CACHE(OPINION_WEIGHT_IGNORED_CITY_STATE_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_BROKEN_BULLY_CITY_STATE_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_IGNORED_BULLY_CITY_STATE_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_BROKEN_SPY_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_IGNORED_SPY_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_FORGAVE_FOR_SPYING);
	GD_INT_CACHE(OPINION_WEIGHT_BROKEN_NO_CONVERT_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_IGNORED_NO_CONVERT_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_BROKEN_NO_DIG_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_IGNORED_NO_DIG_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_BROKEN_COOP_WAR_PROMISE);
	GD_INT_CACHE(OPINION_WEIGHT_KILLED_PROTECTED_MINOR);
	GD_INT_CACHE(OPINION_WEIGHT_KILLED_MANY_PROTECTED_MINORS);
	GD_INT_CACHE(OPINION_WEIGHT_KILLED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(OPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_RECENTLY);
	GD_INT_CACHE(OPINION_WEIGHT_ATTACKED_MANY_PROTECTED_MINORS);
	GD_INT_CACHE(OPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(OPINION_WEIGHT_BULLIED_PROTECTED_MINOR_RECENTLY);
	GD_INT_CACHE(OPINION_WEIGHT_BULLIED_MANY_PROTECTED_MINORS);
	GD_INT_CACHE(OPINION_WEIGHT_BULLIED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(OPINION_WEIGHT_SIDED_WITH_THEIR_MINOR);
	GD_INT_CACHE(OPINION_WEIGHT_SIDED_WITH_THEIR_MINOR_AGGRESSIVE_MOD);
	GD_INT_CACHE(OPINION_WEIGHT_SIDED_WITH_THEIR_MINOR_NUM_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(OPINION_WEIGHT_DOF);
	GD_INT_CACHE(OPINION_WEIGHT_DOF_MOST_VALUED_FRIEND);
	GD_INT_CACHE(OPINION_WEIGHT_DOF_TYPE_FRIENDS);
	GD_INT_CACHE(OPINION_WEIGHT_DOF_TYPE_ALLIES);
	GD_INT_CACHE(OPINION_WEIGHT_DOF_TYPE_BATTLE_BROTHERS);
	GD_INT_CACHE(OPINION_WEIGHT_DOF_WITH_FRIEND);
	GD_INT_CACHE(OPINION_WEIGHT_DOF_WITH_FRIEND_SUBSEQUENT);
	GD_INT_CACHE(OPINION_WEIGHT_DOF_WITH_MOST_VALUED_FRIEND);
	GD_INT_CACHE(OPINION_WEIGHT_DOF_WITH_MOST_VALUED_ALLY);
	GD_INT_CACHE(OPINION_WEIGHT_DOF_WITH_ENEMY);
	GD_INT_CACHE(OPINION_WEIGHT_DOF_WITH_ENEMY_SUBSEQUENT);
	GD_INT_CACHE(OPINION_WEIGHT_DOF_WITH_BIGGEST_COMPETITOR);
	GD_INT_CACHE(OPINION_WEIGHT_DOF_WITH_BIGGEST_LEAGUE_RIVAL);
	GD_INT_CACHE(OPINION_WEIGHT_BETRAYED_OUR_FRIEND_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_BY_FRIEND_EACH);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_BY_FRIEND_DONT_LIKE);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_FRIEND_EACH);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_ME_FRIENDS);
	GD_INT_CACHE(OPINION_WEIGHT_ATTACKED_OWN_VASSAL);
	GD_INT_CACHE(OPINION_WEIGHT_VASSALAGE_BROKEN_VASSAL_AGREEMENT);
	GD_INT_CACHE(OPINION_WEIGHT_WAR_FRIEND_EACH);
	GD_INT_CACHE(OPINION_WEIGHT_WAR_ME_FRIENDS);
	GD_INT_CACHE(OPINION_WEIGHT_ATTACKED_RESURRECTED_PLAYER);
	GD_INT_CACHE(OPINION_WEIGHT_RESURRECTOR_ATTACKED_US);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_ME);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_THEM);
	GD_INT_CACHE(OPINION_WEIGHT_MUTUAL_DENOUNCEMENT);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_FRIEND);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_FRIEND_SUBSEQUENT);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_MOST_VALUED_FRIEND);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_MOST_VALUED_ALLY);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_ENEMY);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_ENEMY_SUBSEQUENT);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_BIGGEST_COMPETITOR);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_BIGGEST_LEAGUE_RIVAL);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_BY_THEIR_FRIEND);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_BY_THEIR_FRIEND_SUBSEQUENT);
	GD_INT_CACHE(OPINION_WEIGHT_DENOUNCED_BY_THEIR_KEY_FRIEND);
	GD_INT_CACHE(RECKLESS_EXPANDER_CITIES_THRESHOLD);
	GD_INT_CACHE(RECKLESS_EXPANDER_LAND_THRESHOLD);
	GD_INT_CACHE(OPINION_WEIGHT_RECKLESS_EXPANDER);
	GD_INT_CACHE(OPINION_WEIGHT_RECKLESS_EXPANDER_PER_CITY);
	GD_INT_CACHE(OPINION_WEIGHT_RECKLESS_EXPANDER_PER_TILE);
	GD_INT_CACHE(OPINION_WEIGHT_RECKLESS_EXPANDER_STRATEGIC_MOD);
	GD_INT_CACHE(WONDER_SPAMMER_THRESHOLD);
	GD_INT_CACHE(OPINION_WEIGHT_WONDER_SPAMMER);
	GD_INT_CACHE(OPINION_WEIGHT_WONDER_SPAMMER_PER_WONDER);
	GD_INT_CACHE(OPINION_WEIGHT_WONDER_SPAMMER_CAP);
	GD_INT_CACHE(OPINION_WEIGHT_WONDER_SPAMMER_STRATEGIC_MOD);
	GD_INT_CACHE(OPINION_WEIGHT_TRADE_MAX);
	GD_INT_CACHE(DEAL_VALUE_PER_TURN_DECAY);
	GD_INT_CACHE(DEAL_VALUE_PER_OPINION_WEIGHT);
	GD_INT_CACHE(OPINION_WEIGHT_STRATEGIC_TRADE_PARTNER_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_COMMON_FOE_MAX);
	GD_INT_CACHE(COMMON_FOE_VALUE_PER_TURN_DECAY);
	GD_INT_CACHE(COMMON_FOE_VALUE_PER_OPINION_WEIGHT);
	GD_INT_CACHE(OPINION_WEIGHT_ASSIST_MAX);
	GD_INT_CACHE(OPINION_WEIGHT_FAILED_ASSIST_MAX);
	GD_INT_CACHE(ASSIST_VALUE_PER_TURN_DECAY);
	GD_INT_CACHE(ASSIST_VALUE_PER_OPINION_WEIGHT);
	GD_INT_CACHE(OPINION_WEIGHT_LIBERATED_CAPITAL);
	GD_INT_CACHE(OPINION_WEIGHT_LIBERATED_CAPITAL_VASSAL_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_LIBERATED_HOLY_CITY);
	GD_INT_CACHE(OPINION_WEIGHT_LIBERATED_HOLY_CITY_VASSAL_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_LIBERATED_CITY);
	GD_INT_CACHE(OPINION_WEIGHT_LIBERATED_CITY_VASSAL_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_RETURNED_CAPITAL);
	GD_INT_CACHE(OPINION_WEIGHT_RETURNED_CAPITAL_VASSAL_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_RETURNED_HOLY_CITY);
	GD_INT_CACHE(OPINION_WEIGHT_RETURNED_HOLY_CITY_VASSAL_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_NUKED_MAX);
	GD_INT_CACHE(OPINION_WEIGHT_CIVILIAN_KILLER_MAX);
	GD_INT_CACHE(CIVILIAN_KILLER_VALUE_PER_OPINION_WEIGHT);
	GD_INT_CACHE(CIVILIAN_KILLER_VALUE_PER_TURN_DECAY);
	GD_INT_CACHE(OPINION_WEIGHT_CIVILIAN_KILLER_WORLD);
	GD_INT_CACHE(OPINION_WEIGHT_CIVILIAN_KILLER_WORLD_THRESHOLD);
	GD_INT_CACHE(OPINION_WEIGHT_PER_SIMILAR_POLICY);
	GD_INT_CACHE(OPINION_WEIGHT_PER_DIVERGENT_POLICY);
	GD_INT_CACHE(OPINION_WEIGHT_SIMILAR_POLICIES);
	GD_INT_CACHE(OPINION_WEIGHT_DIVERGENT_POLICIES);
	GD_INT_CACHE(POLICY_SCORE_NEEDY_THRESHOLD);
	GD_INT_CACHE(POLICY_SCORE_NEEDY_BONUS);
	GD_INT_CACHE(OPINION_WEIGHT_PTP_SAME_MINOR_EACH);
	GD_INT_CACHE(OPINION_WEIGHT_PTP_SAME_MINOR_MIN);
	GD_INT_CACHE(OPINION_WEIGHT_PTP_SAME_MINOR_DIPLOMAT_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_CAPTURED_CAPITAL);
	GD_INT_CACHE(OPINION_WEIGHT_CAPTURED_HOLY_CITY);
	GD_INT_CACHE(OPINION_WEIGHT_CAPTURED_KEY_CITY_RETURNED_DIVISOR);
	GD_INT_CACHE(OPINION_WEIGHT_CAPTURED_KEY_CITY_CAPITULATION_DIVISOR);
	GD_INT_CACHE(OPINION_WEIGHT_ROBBED_BY);
	GD_INT_CACHE(OPINION_WEIGHT_INTRIGUE_SHARED_BY);
	GD_INT_CACHE(OPINION_WEIGHT_INTRIGUE_SHARED_BY_SUBSEQUENT);
	GD_INT_CACHE(OPINION_WEIGHT_DP);
	GD_INT_CACHE(OPINION_WEIGHT_DP_MOST_VALUED_ALLY);
	GD_INT_CACHE(OPINION_WEIGHT_DP_CONQUEROR_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_DP_WITH_FRIEND);
	GD_INT_CACHE(OPINION_WEIGHT_DP_WITH_FRIEND_SUBSEQUENT);
	GD_INT_CACHE(OPINION_WEIGHT_DP_WITH_MOST_VALUED_ALLY);
	GD_INT_CACHE(OPINION_WEIGHT_DP_WITH_MOST_VALUED_FRIEND);
	GD_INT_CACHE(OPINION_WEIGHT_DP_WITH_ENEMY);
	GD_INT_CACHE(OPINION_WEIGHT_DP_WITH_ENEMY_SUBSEQUENT);
	GD_INT_CACHE(OPINION_WEIGHT_DP_WITH_BIGGEST_COMPETITOR);
	GD_INT_CACHE(OPINION_WEIGHT_DP_WITH_BIGGEST_LEAGUE_RIVAL);
	GD_INT_CACHE(OPINION_WEIGHT_RA);
	GD_INT_CACHE(OPINION_WEIGHT_RA_SCIENTIFIC_MOD);
	GD_INT_CACHE(OPINION_WEIGHT_OPEN_BORDERS_MUTUAL);
	GD_INT_CACHE(OPINION_WEIGHT_OPEN_BORDERS_US);
	GD_INT_CACHE(OPINION_WEIGHT_OPEN_BORDERS_THEM);
	GD_INT_CACHE(OPINION_WEIGHT_PLUNDERED_TRADE_ROUTE);
	GD_INT_CACHE(OPINION_WEIGHT_PLOTTED_AGAINST_US);
	GD_INT_CACHE(OPINION_WEIGHT_PLOTTED_AGAINST_US_SUBSEQUENT);
	GD_INT_CACHE(OPINION_WEIGHT_PERFORMED_COUP);
	GD_INT_CACHE(OPINION_WEIGHT_EXCAVATED_ARTIFACT);
	GD_INT_CACHE(OPINION_WEIGHT_VOTING_HISTORY_MAX);
	GD_INT_CACHE(OPINION_WEIGHT_VOTING_HISTORY_DIPLOMAT_MULTIPLIER);
	GD_INT_CACHE(VOTING_HISTORY_SCORE_MAX);
	GD_INT_CACHE(VOTING_HISTORY_SCORE_PLAYER_VOTE_PERCENT_VALUE);
	GD_INT_CACHE(VOTING_HISTORY_SCORE_OUTCOME_VOTE_PERCENT_VALUE);
	GD_INT_CACHE(VOTING_HISTORY_SCORE_DESIRE_MULTIPLIER_WEAK);
	GD_INT_CACHE(VOTING_HISTORY_SCORE_DESIRE_MULTIPLIER_STANDARD);
	GD_INT_CACHE(VOTING_HISTORY_SCORE_DESIRE_MULTIPLIER_STRONG);
	GD_INT_CACHE(VOTING_HISTORY_SCORE_DESIRE_MULTIPLIER_OVERWHELMING);
	GD_INT_CACHE(VOTING_HISTORY_SCORE_LEAGUE_ALIGNMENT_SCALER);
	GD_INT_CACHE(VOTING_HISTORY_SCORE_PRIME_COMPETITOR_THRESHOLD);
	GD_INT_CACHE(OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_WEAK);
	GD_INT_CACHE(OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL);
	GD_INT_CACHE(OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_STRONG);
	GD_INT_CACHE(OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_OVERWHELMING);
	GD_INT_CACHE(OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_DIPLOMAT_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_NUM_TURNS);
	GD_INT_CACHE(OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_WEAK);
	GD_INT_CACHE(OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL);
	GD_INT_CACHE(OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_STRONG);
	GD_INT_CACHE(OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_OVERWHELMING);
	GD_INT_CACHE(OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_DIPLOMAT_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_NUM_TURNS);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_MAX);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_DIPLOMAT_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_NUM_TURNS);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_MAX);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_DIPLOMAT_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_NUM_TURNS);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_MAX);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_DIPLOMAT_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_NUM_TURNS);
	GD_INT_CACHE(OPINION_WEIGHT_PER_VOTE_PERCENT);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_SANCTIONED_US);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_SANCTIONED_US_DIPLOMAT_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_SANCTIONED_US_FAILURE_DIVISOR);
	GD_INT_CACHE(SANCTIONED_US_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_UNSANCTIONED_US);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_UNSANCTIONED_US_DIPLOMAT_MULTIPLIER);
	GD_INT_CACHE(OPINION_WEIGHT_THEY_UNSANCTIONED_US_FAILURE_DIVISOR);
	GD_INT_CACHE(UNSANCTIONED_US_TURNS_UNTIL_FORGOTTEN);
	GD_INT_CACHE(OPINION_WEIGHT_VASSALAGE_WE_ARE_MASTER);
	GD_INT_CACHE(OPINION_WEIGHT_VASSALAGE_WE_ARE_VOLUNTARY_VASSAL);
	GD_INT_CACHE(OPINION_WEIGHT_VASSALAGE_WE_ARE_VASSAL);
	GD_INT_CACHE(OPINION_WEIGHT_SAME_MASTER);
	GD_INT_CACHE(OPINION_WEIGHT_SAME_MASTER_DIFFERENT_SURRENDER_DIVISOR);
	GD_INT_CACHE(OPINION_WEIGHT_DEMANDED_WHILE_VASSAL);
	GD_INT_CACHE(OPINION_WEIGHT_CAPITULATED_VASSAL_PLUNDERED_DIVISOR);
	GD_INT_CACHE(OPINION_WEIGHT_CAPITULATED_VASSAL_SPYING_DIVISOR);
	GD_INT_CACHE(OPINION_WEIGHT_CAPITULATED_VASSAL_CULTURE_BOMB_DIVISOR);
	GD_INT_CACHE(OPINION_WEIGHT_VASSAL_DENOUNCED_BY_MASTER);
	GD_INT_CACHE(OPINION_WEIGHT_VASSAL_TAX_DIVISOR);
	GD_INT_CACHE(OPINION_WEIGHT_VASSAL_CURRENT_TAX_MODIFIER);
	GD_INT_CACHE(OPINION_WEIGHT_VASSALAGE_PROTECT_MAX);
	GD_INT_CACHE(VASSALAGE_PROTECT_VALUE_PER_OPINION_WEIGHT);
	GD_INT_CACHE(VASSALAGE_PROTECTED_PER_TURN_DECAY);
	GD_INT_CACHE(VASSALAGE_PROTECTED_CITY_DISTANCE);
	GD_INT_CACHE(OPINION_WEIGHT_VASSALAGE_FAILED_PROTECT_MAX);
	GD_INT_CACHE(VASSALAGE_FAILED_PROTECT_CITY_DISTANCE);
	GD_INT_CACHE(OPINION_WEIGHT_VASSAL_TRADE_ROUTE);
	GD_INT_CACHE(OPINION_WEIGHT_VASSAL_TRADE_ROUTE_SUBSEQUENT);
	GD_INT_CACHE(OPINION_WEIGHT_VASSAL_OPEN_BORDERS);
	GD_INT_CACHE(OPINION_WEIGHT_VASSAL_FOUNDER_MASTER_ADOPTED_RELIGION);
	GD_INT_CACHE(OPINION_WEIGHT_VASSAL_HAPPILY_ADOPTED_RELIGION);
	GD_INT_CACHE(OPINION_WEIGHT_VASSAL_SAME_STATE_RELIGION);
	GD_INT_CACHE(OPINION_WEIGHT_VASSALAGE_VOLUNTARY_VASSAL_MOD);
	GD_INT_CACHE(OPINION_WEIGHT_MASTER_LIBERATED_ME_FROM_VASSALAGE);
	GD_INT_CACHE(OPINION_WEIGHT_VASSALAGE_THEY_PEACEFULLY_REVOKED);
	GD_INT_CACHE(OPINION_WEIGHT_VASSALAGE_THEY_FORCIBLY_REVOKED);
	GD_INT_CACHE(OPINION_WEIGHT_VASSALAGE_PEACEFULLY_REVOKED_NUM_TURNS_UNTIL_FORGOTTEN);
	GD_INT_CACHE(OPINION_WEIGHT_VASSALAGE_FORCIBLY_REVOKED_NUM_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(MASTER_DECLARED_WAR_ON_US_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(OPINION_WEIGHT_VASSALAGE_TOO_MANY_VASSALS);
	GD_INT_CACHE(APPROACH_WAR_PROXIMITY_NEIGHBORS);
	GD_INT_CACHE(APPROACH_WAR_PROXIMITY_CLOSE);
	GD_INT_CACHE(APPROACH_WAR_PROXIMITY_FAR);
	GD_INT_CACHE(APPROACH_WAR_PROXIMITY_DISTANT);
	GD_INT_CACHE(APPROACH_MULTIPLIER_PROXIMITY_NEIGHBORS);
	GD_INT_CACHE(APPROACH_MULTIPLIER_PROXIMITY_CLOSE);
	GD_INT_CACHE(APPROACH_MULTIPLIER_PROXIMITY_FAR);
	GD_INT_CACHE(APPROACH_MULTIPLIER_PROXIMITY_DISTANT);
	GD_INT_CACHE(CONQUEST_WAR_MULTIPLIER_TARGET_CAKEWALK);
	GD_INT_CACHE(CONQUEST_WAR_MULTIPLIER_TARGET_SOFT);
	GD_INT_CACHE(CONQUEST_WAR_MULTIPLIER_TARGET_FAVORABLE);
	GD_INT_CACHE(CONQUEST_WAR_MULTIPLIER_TARGET_AVERAGE);
	GD_INT_CACHE(CONQUEST_WAR_MULTIPLIER_TARGET_DIFFICULT);
	GD_INT_CACHE(CONQUEST_WAR_MULTIPLIER_TARGET_BAD);
	GD_INT_CACHE(CONQUEST_WAR_MULTIPLIER_TARGET_IMPOSSIBLE);
	GD_INT_CACHE(MAJOR_WAR_MULTIPLIER_TARGET_CAKEWALK);
	GD_INT_CACHE(MAJOR_WAR_MULTIPLIER_TARGET_SOFT);
	GD_INT_CACHE(MAJOR_WAR_MULTIPLIER_TARGET_FAVORABLE);
	GD_INT_CACHE(MAJOR_WAR_MULTIPLIER_TARGET_AVERAGE);
	GD_INT_CACHE(MAJOR_WAR_MULTIPLIER_TARGET_DIFFICULT);
	GD_INT_CACHE(MAJOR_WAR_MULTIPLIER_TARGET_BAD);
	GD_INT_CACHE(MAJOR_WAR_MULTIPLIER_TARGET_IMPOSSIBLE);
	GD_INT_CACHE(MINOR_APPROACH_WAR_TARGET_CAKEWALK);
	GD_INT_CACHE(MINOR_APPROACH_WAR_TARGET_SOFT);
	GD_INT_CACHE(MINOR_APPROACH_WAR_TARGET_FAVORABLE);
	GD_INT_CACHE(MINOR_APPROACH_WAR_TARGET_AVERAGE);
	GD_INT_CACHE(MINOR_APPROACH_WAR_TARGET_DIFFICULT);
	GD_INT_CACHE(MINOR_APPROACH_WAR_TARGET_BAD);
	GD_INT_CACHE(MINOR_APPROACH_WAR_TARGET_IMPOSSIBLE);
	GD_INT_CACHE(APPROACH_NEUTRAL_DEFAULT);
	GD_INT_CACHE(APPROACH_BIAS_FOR_CURRENT);
	GD_INT_CACHE(APPROACH_WAR_CURRENTLY_WAR);
	GD_INT_CACHE(APPROACH_RANDOM_PERCENT);
	GD_INT_CACHE(APPROACH_RANDOM_PERSONALITIES_PERCENT);
	GD_INT_CACHE(MINOR_APPROACH_IGNORE_DEFAULT);
	GD_INT_CACHE(APPROACH_WAR_VASSAL_PEACEFULLY_REVOKED);
	GD_INT_CACHE(APPROACH_DECEPTIVE_VASSAL_PEACEFULLY_REVOKED);
	GD_INT_CACHE(APPROACH_FRIENDLY_VASSAL_PEACEFULLY_REVOKED);
	GD_INT_CACHE(APPROACH_WAR_VASSAL_FORCEFULLY_REVOKED);
	GD_INT_CACHE(APPROACH_DECEPTIVE_VASSAL_FORCEFULLY_REVOKED);
	GD_INT_CACHE(APPROACH_FRIENDLY_VASSAL_FORCEFULLY_REVOKED);
	GD_INT_CACHE(APPROACH_WAR_TOO_MANY_VASSALS);
	GD_INT_CACHE(APPROACH_GUARDED_TOO_MANY_VASSALS);
	GD_INT_CACHE(APPROACH_HOSTILE_BUYING_PRICE_MODIFIER);
	GD_INT_CACHE(APPROACH_GUARDED_BUYING_PRICE_MODIFIER);
	GD_INT_CACHE(APPROACH_AFRAID_BUYING_PRICE_MODIFIER);
	GD_INT_CACHE(APPROACH_NEUTRAL_BUYING_PRICE_MODIFIER);
	GD_INT_CACHE(APPROACH_FRIENDLY_BUYING_PRICE_MODIFIER);
	GD_INT_CACHE(APPROACH_HOSTILE_SELLING_PRICE_MODIFIER);
	GD_INT_CACHE(APPROACH_GUARDED_SELLING_PRICE_MODIFIER);
	GD_INT_CACHE(APPROACH_AFRAID_SELLING_PRICE_MODIFIER);
	GD_INT_CACHE(APPROACH_NEUTRAL_SELLING_PRICE_MODIFIER);
	GD_INT_CACHE(APPROACH_FRIENDLY_SELLING_PRICE_MODIFIER);
	GD_INT_CACHE(CLOSE_TO_DOMINATION_VICTORY_THRESHOLD);
	GD_INT_CACHE(CLOSE_TO_DIPLOMATIC_VICTORY_THRESHOLD);
	GD_INT_CACHE(CLOSE_TO_SCIENCE_VICTORY_THRESHOLD);
	GD_INT_CACHE(CLOSE_TO_CULTURE_VICTORY_THRESHOLD);
	GD_INT_CACHE(COOP_WAR_DESIRE_THRESHOLD);
	GD_INT_CACHE(AI_WORLD_LEADER_BASE_WEIGHT_SELF);
	GD_INT_CACHE(REQUEST_PEACE_TURN_THRESHOLD);
	GD_INT_CACHE(REQUEST_PEACE_THRESHOLD_REDUCTION_PER_WAR);
	GD_INT_CACHE(REQUEST_PEACE_LEEWAY_THRESHOLD);
	GD_INT_CACHE(REQUEST_PEACE_LEEWAY_THRESHOLD_REDUCTION_PER_WAR);
	GD_INT_CACHE(WAR_MAJOR_MINIMUM_TURNS);
	GD_INT_CACHE(WAR_MINOR_MINIMUM_TURNS);
	GD_INT_CACHE(WAR_MINOR_PEACE_BLOCKED_TURNS);
	GD_INT_CACHE(PLEDGE_BROKEN_MINIMUM_TURNS);
	GD_INT_CACHE(PLEDGE_BROKEN_MINIMUM_TURNS_BULLYING);
	GD_INT_CACHE(DEFENSIVE_PACT_LIMIT_BASE);
	GD_INT_CACHE(DEFENSIVE_PACT_LIMIT_SCALER);
	GD_INT_CACHE(AI_DEFENSIVE_PACT_LIMIT_BASE);
	GD_INT_CACHE(AI_DEFENSIVE_PACT_LIMIT_SCALER);
	GD_INT_CACHE(PEACE_WILLINGNESS_OFFER_THRESHOLD_UN_SURRENDER);
	GD_INT_CACHE(PEACE_WILLINGNESS_OFFER_THRESHOLD_CAPITULATION);
	GD_INT_CACHE(PEACE_WILLINGNESS_OFFER_THRESHOLD_CESSION);
	GD_INT_CACHE(PEACE_WILLINGNESS_OFFER_THRESHOLD_SURRENDER);
	GD_INT_CACHE(PEACE_WILLINGNESS_OFFER_THRESHOLD_SUBMISSION);
	GD_INT_CACHE(PEACE_WILLINGNESS_OFFER_THRESHOLD_BACKDOWN);
	GD_INT_CACHE(PEACE_WILLINGNESS_OFFER_THRESHOLD_SETTLEMENT);
	GD_INT_CACHE(PEACE_WILLINGNESS_OFFER_THRESHOLD_ARMISTICE);
	GD_INT_CACHE(PEACE_WILLINGNESS_ACCEPT_THRESHOLD_UN_SURRENDER);
	GD_INT_CACHE(PEACE_WILLINGNESS_ACCEPT_THRESHOLD_CAPITULATION);
	GD_INT_CACHE(PEACE_WILLINGNESS_ACCEPT_THRESHOLD_CESSION);
	GD_INT_CACHE(PEACE_WILLINGNESS_ACCEPT_THRESHOLD_SURRENDER);
	GD_INT_CACHE(PEACE_WILLINGNESS_ACCEPT_THRESHOLD_SUBMISSION);
	GD_INT_CACHE(PEACE_WILLINGNESS_ACCEPT_THRESHOLD_BACKDOWN);
	GD_INT_CACHE(PEACE_WILLINGNESS_ACCEPT_THRESHOLD_SETTLEMENT);
	GD_INT_CACHE(PEACE_WILLINGNESS_ACCEPT_THRESHOLD_ARMISTICE);
	GD_INT_CACHE(WAR_DAMAGE_LEVEL_CITY_WEIGHT);
	GD_INT_CACHE(WAR_DAMAGE_LEVEL_INVOLVED_CITY_POP_MULTIPLIER);
	GD_INT_CACHE(WAR_DAMAGE_LEVEL_WORLD_WONDER_MULTIPLIER);
	GD_INT_CACHE(DEFAULT_WAR_VALUE_FOR_UNIT);
	GD_INT_CACHE(PILLAGED_TILE_BASE_WAR_VALUE);
	GD_INT_CACHE(STOLEN_TILE_BASE_WAR_VALUE);
	GD_INT_CACHE(MILITARY_AGGRESSIVE_POSTURE_THRESHOLD_INCREDIBLE);
	GD_INT_CACHE(MILITARY_AGGRESSIVE_POSTURE_THRESHOLD_HIGH);
	GD_INT_CACHE(MILITARY_AGGRESSIVE_POSTURE_THRESHOLD_MEDIUM);
	GD_INT_CACHE(MILITARY_AGGRESSIVE_POSTURE_THRESHOLD_LOW);
	GD_INT_CACHE(PLOT_BUYING_POSTURE_INCREDIBLE_THRESHOLD);
	GD_INT_CACHE(PLOT_BUYING_POSTURE_HIGH_THRESHOLD);
	GD_INT_CACHE(PLOT_BUYING_POSTURE_MEDIUM_THRESHOLD);
	GD_INT_CACHE(PLOT_BUYING_POSTURE_LOW_THRESHOLD);
	GD_INT_CACHE(MILITARY_RATING_STARTING_VALUE);
	GD_INT_CACHE(MILITARY_RATING_PER_ADVANCED_START_ERA);
	GD_INT_CACHE(MILITARY_RATING_MAXIMUM_BONUS);
	GD_INT_CACHE(MILITARY_RATING_MAXIMUM_PENALTY);
	GD_INT_CACHE(MILITARY_RATING_HUMAN_BUFFER_VALUE_PERCENT);
	GD_INT_CACHE(ECONOMIC_STRENGTH_RATIO_MULTIPLIER);
	GD_INT_CACHE(ECONOMIC_STRENGTH_IMMENSE_THRESHOLD);
	GD_INT_CACHE(ECONOMIC_STRENGTH_POWERFUL_THRESHOLD);
	GD_INT_CACHE(ECONOMIC_STRENGTH_STRONG_THRESHOLD);
	GD_INT_CACHE(ECONOMIC_STRENGTH_AVERAGE_THRESHOLD);
	GD_INT_CACHE(ECONOMIC_STRENGTH_POOR_THRESHOLD);
	GD_INT_CACHE(ECONOMIC_STRENGTH_WEAK_THRESHOLD);
	GD_INT_CACHE(MILITARY_STRENGTH_BASE);
	GD_INT_CACHE(MILITARY_STRENGTH_RATIO_MULTIPLIER);
	GD_INT_CACHE(MILITARY_STRENGTH_CITY_MOD);
	GD_INT_CACHE(MILITARY_STRENGTH_REDUCTION_PER_BOLDNESS);
	GD_INT_CACHE(MILITARY_STRENGTH_IMMENSE_THRESHOLD);
	GD_INT_CACHE(MILITARY_STRENGTH_POWERFUL_THRESHOLD);
	GD_INT_CACHE(MILITARY_STRENGTH_STRONG_THRESHOLD);
	GD_INT_CACHE(MILITARY_STRENGTH_AVERAGE_THRESHOLD);
	GD_INT_CACHE(MILITARY_STRENGTH_POOR_THRESHOLD);
	GD_INT_CACHE(MILITARY_STRENGTH_WEAK_THRESHOLD);
	GD_INT_CACHE(MILITARY_STRENGTH_MINOR_BACKUP_IMMENSE);
	GD_INT_CACHE(MILITARY_STRENGTH_MINOR_BACKUP_POWERFUL);
	GD_INT_CACHE(MILITARY_STRENGTH_MINOR_BACKUP_STRONG);
	GD_INT_CACHE(MILITARY_STRENGTH_MINOR_BACKUP_AVERAGE);
	GD_INT_CACHE(MILITARY_STRENGTH_MINOR_BACKUP_POOR);
	GD_INT_CACHE(MILITARY_STRENGTH_MINOR_BACKUP_WEAK);
	GD_INT_CACHE(MILITARY_STRENGTH_MINOR_BACKUP_PATHETIC);
	GD_INT_CACHE(MILITARY_STRENGTH_MINOR_BACKUP_NEIGHBORS);
	GD_INT_CACHE(MILITARY_STRENGTH_MAJOR_BACKUP_IMMENSE);
	GD_INT_CACHE(MILITARY_STRENGTH_MAJOR_BACKUP_POWERFUL);
	GD_INT_CACHE(MILITARY_STRENGTH_MAJOR_BACKUP_STRONG);
	GD_INT_CACHE(MILITARY_STRENGTH_MAJOR_BACKUP_AVERAGE);
	GD_INT_CACHE(MILITARY_STRENGTH_MAJOR_BACKUP_POOR);
	GD_INT_CACHE(MILITARY_STRENGTH_MAJOR_BACKUP_WEAK);
	GD_INT_CACHE(MILITARY_STRENGTH_MAJOR_BACKUP_PATHETIC);
	GD_INT_CACHE(MILITARY_STRENGTH_MAJOR_BACKUP_NEIGHBORS);
	GD_INT_CACHE(MILITARY_STRENGTH_MAJOR_BACKUP_CLOSE);
	GD_INT_CACHE(MILITARY_STRENGTH_MAJOR_BACKUP_FAR);
	GD_INT_CACHE(MILITARY_STRENGTH_MAJOR_BACKUP_DISTANT);
	GD_INT_CACHE(MILITARY_STRENGTH_BACKUP_ALREADY_WAR_EACH_PLAYER);
	GD_INT_CACHE(MILITARY_STRENGTH_BACKUP_ALREADY_WAR_MINIMUM);
	GD_INT_CACHE(TARGET_MINOR_BACKUP_IMMENSE);
	GD_INT_CACHE(TARGET_MINOR_BACKUP_POWERFUL);
	GD_INT_CACHE(TARGET_MINOR_BACKUP_STRONG);
	GD_INT_CACHE(TARGET_MINOR_BACKUP_AVERAGE);
	GD_INT_CACHE(TARGET_MINOR_BACKUP_POOR);
	GD_INT_CACHE(TARGET_MINOR_BACKUP_WEAK);
	GD_INT_CACHE(TARGET_MINOR_BACKUP_PATHETIC);
	GD_INT_CACHE(TARGET_MINOR_BACKUP_NEIGHBORS);
	GD_INT_CACHE(TARGET_MAJOR_BACKUP_IMMENSE);
	GD_INT_CACHE(TARGET_MAJOR_BACKUP_POWERFUL);
	GD_INT_CACHE(TARGET_MAJOR_BACKUP_STRONG);
	GD_INT_CACHE(TARGET_MAJOR_BACKUP_AVERAGE);
	GD_INT_CACHE(TARGET_MAJOR_BACKUP_POOR);
	GD_INT_CACHE(TARGET_MAJOR_BACKUP_WEAK);
	GD_INT_CACHE(TARGET_MAJOR_BACKUP_PATHETIC);
	GD_INT_CACHE(TARGET_MAJOR_BACKUP_NEIGHBORS);
	GD_INT_CACHE(TARGET_MAJOR_BACKUP_CLOSE);
	GD_INT_CACHE(TARGET_MAJOR_BACKUP_FAR);
	GD_INT_CACHE(TARGET_MAJOR_BACKUP_DISTANT);
	GD_INT_CACHE(TARGET_ALREADY_WAR_EACH_PLAYER);
	GD_INT_CACHE(TARGET_ALREADY_WAR_MINIMUM);
	GD_INT_CACHE(TARGET_ECONOMIC_MOD);
	GD_INT_CACHE(TARGET_CITY_MOD);
	GD_INT_CACHE(TARGET_VALUE_RATIO_MULTIPLIER);
	GD_INT_CACHE(TARGET_VALUE_REDUCTION_PER_BOLDNESS);
	GD_INT_CACHE(TARGET_NEIGHBORS);
	GD_INT_CACHE(TARGET_NEIGHBORS_DIVISOR);
	GD_INT_CACHE(TARGET_CLOSE);
	GD_INT_CACHE(TARGET_CLOSE_DIVISOR);
	GD_INT_CACHE(TARGET_FAR);
	GD_INT_CACHE(TARGET_FAR_DIVISOR);
	GD_INT_CACHE(TARGET_DISTANT);
	GD_INT_CACHE(TARGET_DISTANT_DIVISOR);
	GD_INT_CACHE(TARGET_IMPOSSIBLE_THRESHOLD);
	GD_INT_CACHE(TARGET_BAD_THRESHOLD);
	GD_INT_CACHE(TARGET_DIFFICULT_THRESHOLD);
	GD_INT_CACHE(TARGET_AVERAGE_THRESHOLD);
	GD_INT_CACHE(TARGET_FAVORABLE_THRESHOLD);
	GD_INT_CACHE(TARGET_SOFT_THRESHOLD);
	GD_INT_CACHE(WARMONGER_THREAT_CRITICAL_THRESHOLD);
	GD_INT_CACHE(WARMONGER_THREAT_SEVERE_THRESHOLD);
	GD_INT_CACHE(WARMONGER_THREAT_MAJOR_THRESHOLD);
	GD_INT_CACHE(WARMONGER_THREAT_MINOR_THRESHOLD);
	GD_INT_CACHE(WARMONGER_THREAT_MINOR_ATTACKED_WEIGHT);
	GD_INT_CACHE(WARMONGER_THREAT_MAJOR_ATTACKED_WEIGHT);
	GD_INT_CACHE(WARMONGER_THREAT_USED_NUKE_WEIGHT);
	GD_INT_CACHE(WARMONGER_THREAT_CITY_VALUE_MULTIPLIER);
	GD_INT_CACHE(WARMONGER_THREAT_CAPITAL_CITY_PERCENT);
	GD_INT_CACHE(WARMONGER_THREAT_SHARED_FATE_PERCENT);
	GD_INT_CACHE(WARMONGER_THREAT_LIBERATED_TEAM_BONUS_PERCENT);
	GD_INT_CACHE(WARMONGER_THREAT_COOP_WAR_PERCENT);
	GD_INT_CACHE(WARMONGER_THREAT_MODIFIER_LARGE);
	GD_INT_CACHE(WARMONGER_THREAT_MODIFIER_MEDIUM);
	GD_INT_CACHE(WARMONGER_THREAT_MODIFIER_SMALL);
	GD_INT_CACHE(WARMONGER_THREAT_MODIFIER_NEGATIVE_SMALL);
	GD_INT_CACHE(WARMONGER_THREAT_MODIFIER_NEGATIVE_MEDIUM);
	GD_INT_CACHE(WARMONGER_THREAT_ATTACKER_STRENGTH_IMMENSE);
	GD_INT_CACHE(WARMONGER_THREAT_ATTACKER_STRENGTH_POWERFUL);
	GD_INT_CACHE(WARMONGER_THREAT_ATTACKER_STRENGTH_STRONG);
	GD_INT_CACHE(WARMONGER_THREAT_ATTACKER_STRENGTH_AVERAGE);
	GD_INT_CACHE(WARMONGER_THREAT_ATTACKER_STRENGTH_POOR);
	GD_INT_CACHE(WARMONGER_THREAT_ATTACKER_STRENGTH_WEAK);
	GD_INT_CACHE(WARMONGER_THREAT_ATTACKER_STRENGTH_PATHETIC);
	GD_INT_CACHE(WARMONGER_THREAT_DEFENDER_STRENGTH_IMMENSE);
	GD_INT_CACHE(WARMONGER_THREAT_DEFENDER_STRENGTH_POWERFUL);
	GD_INT_CACHE(WARMONGER_THREAT_DEFENDER_STRENGTH_STRONG);
	GD_INT_CACHE(WARMONGER_THREAT_DEFENDER_STRENGTH_AVERAGE);
	GD_INT_CACHE(WARMONGER_THREAT_STRENGTH_DECAY_IMMENSE);
	GD_INT_CACHE(WARMONGER_THREAT_STRENGTH_DECAY_POWERFUL);
	GD_INT_CACHE(WARMONGER_THREAT_STRENGTH_DECAY_STRONG);
	GD_INT_CACHE(WARMONGER_THREAT_STRENGTH_DECAY_AVERAGE);
	GD_INT_CACHE(WARMONGER_THREAT_STRENGTH_DECAY_POOR);
	GD_INT_CACHE(WARMONGER_THREAT_STRENGTH_DECAY_WEAK);
	GD_INT_CACHE(WARMONGER_THREAT_STRENGTH_DECAY_PATHETIC);
	GD_INT_CACHE(WARMONGER_THREAT_PER_TURN_DECAY);
	GD_INT_CACHE(WARMONGER_THREAT_CRITICAL_PERCENT_THRESHOLD);
	GD_INT_CACHE(WARMONGER_THREAT_SEVERE_PERCENT_THRESHOLD);
	GD_INT_CACHE(WARMONGER_THREAT_PER_TURN_DECAY_INCREASED);
	GD_INT_CACHE(WARMONGER_THREAT_PER_TURN_DECAY_DECREASED);
	GD_INT_CACHE(WARMONGER_THREAT_ATTACKED_WEIGHT_WORLD_WAR);
	GD_INT_CACHE(WARMONGER_THREAT_ATTACKED_WEIGHT_WORLD_PEACE);
	GD_INT_CACHE(WARMONGER_THREAT_ATTACKED_SANCTIONED_PLAYER);
	GD_INT_CACHE(LAND_DISPUTE_FIERCE_THRESHOLD);
	GD_INT_CACHE(LAND_DISPUTE_STRONG_THRESHOLD);
	GD_INT_CACHE(LAND_DISPUTE_WEAK_THRESHOLD);
	GD_INT_CACHE(VICTORY_DISPUTE_FIERCE_THRESHOLD);
	GD_INT_CACHE(VICTORY_DISPUTE_STRONG_THRESHOLD);
	GD_INT_CACHE(VICTORY_DISPUTE_WEAK_THRESHOLD);
	GD_INT_CACHE(VICTORY_BLOCK_FIERCE_THRESHOLD);
	GD_INT_CACHE(VICTORY_BLOCK_STRONG_THRESHOLD);
	GD_INT_CACHE(VICTORY_BLOCK_WEAK_THRESHOLD);
	GD_INT_CACHE(TECH_BLOCK_FIERCE_THRESHOLD);
	GD_INT_CACHE(TECH_BLOCK_STRONG_THRESHOLD);
	GD_INT_CACHE(TECH_BLOCK_WEAK_THRESHOLD);
	GD_INT_CACHE(POLICY_BLOCK_FIERCE_THRESHOLD);
	GD_INT_CACHE(POLICY_BLOCK_STRONG_THRESHOLD);
	GD_INT_CACHE(POLICY_BLOCK_WEAK_THRESHOLD);
	GD_INT_CACHE(WONDER_DISPUTE_FIERCE_THRESHOLD);
	GD_INT_CACHE(WONDER_DISPUTE_STRONG_THRESHOLD);
	GD_INT_CACHE(WONDER_DISPUTE_WEAK_THRESHOLD);
	GD_INT_CACHE(MINOR_CIV_DISPUTE_FIERCE_THRESHOLD);
	GD_INT_CACHE(MINOR_CIV_DISPUTE_STRONG_THRESHOLD);
	GD_INT_CACHE(MINOR_CIV_DISPUTE_WEAK_THRESHOLD);
	GD_INT_CACHE(LAND_DISPUTE_CRAMPED_MULTIPLIER);
	GD_INT_CACHE(VICTORY_DISPUTE_GRAND_STRATEGY_MATCH_POSITIVE);
	GD_INT_CACHE(VICTORY_DISPUTE_GRAND_STRATEGY_MATCH_LIKELY);
	GD_INT_CACHE(VICTORY_DISPUTE_GRAND_STRATEGY_MATCH_UNSURE);
	GD_INT_CACHE(VICTORY_BLOCK_GRAND_STRATEGY_DIFFERENCE_POSITIVE);
	GD_INT_CACHE(VICTORY_BLOCK_GRAND_STRATEGY_DIFFERENCE_LIKELY);
	GD_INT_CACHE(VICTORY_BLOCK_GRAND_STRATEGY_DIFFERENCE_UNSURE);
	GD_INT_CACHE(COOP_WAR_SOON_COUNTER);
	GD_INT_CACHE(COOP_WAR_LOCKED_LENGTH);
	GD_INT_CACHE(DEMAND_TURN_LIMIT_MIN);
	GD_INT_CACHE(DEMAND_TURN_LIMIT_RAND);
	GD_INT_CACHE(DONT_SETTLE_FLAVOR_BASE);
	GD_INT_CACHE(DONT_SETTLE_FLAVOR_MULTIPLIER);
	GD_INT_CACHE(DONT_SETTLE_FRIENDLY);
	GD_INT_CACHE(DONT_SETTLE_STRENGTH_PATHETIC);
	GD_INT_CACHE(DONT_SETTLE_STRENGTH_WEAK);
	GD_INT_CACHE(DONT_SETTLE_STRENGTH_POOR);
	GD_INT_CACHE(DONT_SETTLE_STRENGTH_AVERAGE);
	GD_INT_CACHE(DONT_SETTLE_STRENGTH_STRONG);
	GD_INT_CACHE(DONT_SETTLE_STRENGTH_POWERFUL);
	GD_INT_CACHE(DONT_SETTLE_STRENGTH_IMMENSE);
	GD_INT_CACHE(DONT_SETTLE_MOD_MILITARY_POSTURE_NONE);
	GD_INT_CACHE(DONT_SETTLE_MOD_MILITARY_POSTURE_LOW);
	GD_INT_CACHE(DONT_SETTLE_MOD_MILITARY_POSTURE_MEDIUM);
	GD_INT_CACHE(DONT_SETTLE_MOD_MILITARY_POSTURE_HIGH);
	GD_INT_CACHE(DONT_SETTLE_MOD_MILITARY_POSTURE_INCREDIBLE);
	GD_INT_CACHE(JUST_MET_TURN_BUFFER);
	GD_INT_CACHE(DOF_TURN_BUFFER);
	GD_INT_CACHE(DOF_TURN_BUFFER_REDUCTION_PER_ERA);
	GD_INT_CACHE(EACH_GOLD_VALUE_PERCENT);
	GD_INT_CACHE(EACH_GOLD_PER_TURN_VALUE_PERCENT);
	GD_INT_CACHE(DEMAND_LIMIT_MAX_VALUE);
	GD_INT_CACHE(DEMAND_LIMIT_GAMEPROGRESS_SCALING);
	GD_INT_CACHE(MOVE_TROOPS_MEMORY_TURN_EXPIRATION);
	GD_INT_CACHE(MILITARY_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(MILITARY_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(EXPANSION_BICKER_TIMEOUT);
	GD_INT_CACHE(EXPANSION_BICKER_RANGE_HIGH);
	GD_INT_CACHE(EXPANSION_BICKER_RANGE_MEDIUM);
	GD_INT_CACHE(EXPANSION_BICKER_RANGE_LOW);
	GD_INT_CACHE(EXPANSION_PROMISE_TURNS_EFFECTIVE);
	GD_INT_CACHE(EXPANSION_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(EXPANSION_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(BORDER_PROMISE_TURNS_EFFECTIVE);
	GD_INT_CACHE(BORDER_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(BORDER_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(BULLY_CS_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(BULLY_CS_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(ATTACK_CS_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(ATTACK_CS_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(SPY_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(SPY_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(CONVERT_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(CONVERT_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(DIGGING_PROMISE_IGNORED_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(DIGGING_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(COOP_WAR_PROMISE_BROKEN_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(DOF_BROKEN_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(DOF_BROKEN_TURNS_UNTIL_FORGIVEN_FRIENDS);
	GD_INT_CACHE(DOF_BROKEN_BACKSTAB_TIMER);
	GD_INT_CACHE(FRIEND_DENOUNCED_US_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(FRIEND_DECLARED_WAR_ON_US_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(PLUNDERED_TRADE_ROUTE_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(RETURNED_CIVILIAN_TURNS_UNTIL_FORGOTTEN);
	GD_INT_CACHE(BUILT_LANDMARK_TURNS_UNTIL_FORGOTTEN);
	GD_INT_CACHE(LIBERATED_CITY_TURNS_UNTIL_FORGOTTEN);
	GD_INT_CACHE(FORGAVE_FOR_SPYING_TURNS_UNTIL_FORGOTTEN);
	GD_INT_CACHE(SHARED_INTRIGUE_TURNS_UNTIL_FORGOTTEN);
	GD_INT_CACHE(ROBBED_US_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(PLOTTED_AGAINST_US_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(BEATEN_TO_WONDER_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(LOWERED_OUR_INFLUENCE_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(PERFORMED_COUP_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(EXCAVATED_ARTIFACT_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(MADE_DEMAND_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(RELIGIOUS_CONVERSION_TURNS_UNTIL_FORGIVEN);
	GD_INT_CACHE(CAN_WORK_WATER_FROM_GAME_START);
	GD_INT_CACHE(NAVAL_PLOT_BLOCKADE_RANGE);
	GD_INT_CACHE(EVENT_MESSAGE_TIME);
	GD_INT_CACHE(START_YEAR);
	GD_INT_CACHE(WEEKS_PER_MONTHS);
	GD_INT_CACHE(HIDDEN_START_TURN_OFFSET);
	GD_INT_CACHE(RECON_VISIBILITY_RANGE);
	GD_INT_CACHE(PLOT_VISIBILITY_RANGE);
	GD_INT_CACHE(UNIT_VISIBILITY_RANGE);
	GD_INT_CACHE(AIR_UNIT_REBASE_RANGE_MULTIPLIER);
	GD_INT_CACHE(MOUNTAIN_SEE_FROM_CHANGE);
	GD_INT_CACHE(MOUNTAIN_SEE_THROUGH_CHANGE);
	GD_INT_CACHE(HILLS_SEE_FROM_CHANGE);
	GD_INT_CACHE(HILLS_SEE_THROUGH_CHANGE);
	GD_INT_CACHE(SEAWATER_SEE_FROM_CHANGE);
	GD_INT_CACHE(SEAWATER_SEE_THROUGH_CHANGE);
	GD_INT_CACHE(MOVE_DENOMINATOR);
	GD_INT_CACHE(STARTING_DISTANCE_PERCENT);
	GD_INT_CACHE(MIN_CIV_STARTING_DISTANCE);
	GD_INT_CACHE(MIN_CITY_RANGE);
	GD_INT_CACHE(CITY_STARTING_RINGS);
	GD_INT_CACHE(OWNERSHIP_SCORE_DURATION_THRESHOLD);
	GD_INT_CACHE(NUM_VICTORY_POINT_AWARDS);
	GD_INT_CACHE(NUM_OR_TECH_PREREQS);
	GD_INT_CACHE(NUM_AND_TECH_PREREQS);
	GD_INT_CACHE(NUM_UNIT_AND_TECH_PREREQS);
	GD_INT_CACHE(NUM_BUILDING_AND_TECH_PREREQS);
	GD_INT_CACHE(NUM_BUILDING_RESOURCE_PREREQS);
	GD_INT_CACHE(MAX_WORLD_WONDERS_PER_CITY);
	GD_INT_CACHE(MAX_TEAM_WONDERS_PER_CITY);
	GD_INT_CACHE(MAX_NATIONAL_WONDERS_PER_CITY);
	GD_INT_CACHE(MAX_NATIONAL_WONDERS_PER_CITY_FOR_OCC);
	GD_INT_CACHE(MAX_BUILDINGS_PER_CITY);
	GD_INT_CACHE(INITIAL_CITY_POPULATION);
	GD_INT_CACHE(BASE_CITY_AIR_STACKING);
	GD_INT_CACHE(CITY_CAPTURE_POPULATION_PERCENT);
	GD_INT_CACHE(BASE_CITY_GROWTH_THRESHOLD);
	GD_INT_CACHE(FOOD_CONSUMPTION_PER_POPULATION);
	GD_INT_CACHE(HAPPINESS_PER_NATURAL_WONDER);
	GD_INT_CACHE(HAPPINESS_PER_EXTRA_LUXURY);
	GD_INT_CACHE(UNHAPPINESS_PER_POPULATION);
	GD_INT_CACHE(UNHAPPINESS_PER_CITY);
	GD_INT_CACHE(UNHAPPINESS_PER_CAPTURED_CITY);
	GD_INT_CACHE(UNHAPPY_GROWTH_PENALTY);
	GD_INT_CACHE(VERY_UNHAPPY_GROWTH_PENALTY);
	GD_INT_CACHE(VERY_UNHAPPY_PRODUCTION_PENALTY_PER_UNHAPPY);
	GD_INT_CACHE(VERY_UNHAPPY_MAX_PRODUCTION_PENALTY);
	GD_INT_CACHE(VERY_UNHAPPY_GOLD_PENALTY_PER_UNHAPPY);
	GD_INT_CACHE(VERY_UNHAPPY_MAX_GOLD_PENALTY);
	GD_INT_CACHE(VERY_UNHAPPY_COMBAT_PENALTY_PER_UNHAPPY);
	GD_INT_CACHE(VERY_UNHAPPY_MAX_COMBAT_PENALTY);
	GD_INT_CACHE(VERY_UNHAPPY_CANT_TRAIN_SETTLERS);
	GD_INT_CACHE(UNHAPPY_THRESHOLD);
	GD_INT_CACHE(VERY_UNHAPPY_THRESHOLD);
	GD_INT_CACHE(SUPER_UNHAPPY_THRESHOLD);
	GD_INT_CACHE(LOCAL_HAPPINESS_FOOD_MODIFIER);
	GD_INT_CACHE(LOCAL_UNHAPPINESS_FOOD_MODIFIER);
	GD_INT_CACHE(LOCAL_UNHAPPY_SETTLER_PRODUCTION_PENALTY);
	GD_INT_CACHE(LOCAL_UNHAPPY_COMBAT_UNIT_PRODUCTION_PENALTY);
	GD_INT_CACHE(UNHAPPY_MAX_UNIT_PRODUCTION_PENALTY);
	GD_INT_CACHE(GREAT_MUSICIAN_BLAST_HAPPINESS_CAPITAL);
	GD_INT_CACHE(GREAT_MUSICIAN_BLAST_HAPPINESS_GLOBAL);
	GD_INT_CACHE(YIELD_MEDIAN_PERCENTILE);
	GD_INT_CACHE(YIELD_MEDIAN_MIN_POP_REQUIREMENT);
	GD_INT_CACHE(TECH_COUNT_MEDIAN_PERCENTILE);
	GD_INT_CACHE(DISTRESS_MEDIAN_BASE_MODIFIER);
	GD_INT_CACHE(POVERTY_MEDIAN_BASE_MODIFIER);
	GD_INT_CACHE(ILLITERACY_MEDIAN_BASE_MODIFIER);
	GD_INT_CACHE(BOREDOM_MEDIAN_BASE_MODIFIER);
	GD_INT_CACHE(CAPITAL_NEED_MODIFIER);
	GD_INT_CACHE(TECH_NEED_MODIFIER_PERCENT_RESEARCHED);
	GD_INT_CACHE(TECH_NEED_MODIFIER_PER_TECH_ABOVE_MEDIAN);
	GD_INT_CACHE(TECH_NEED_MODIFIER_PER_TECH_BELOW_MEDIAN);
	GD_INT_CACHE(CITY_SIZE_NEED_MODIFIER);
	GD_INT_CACHE(EMPIRE_SIZE_NEED_MODIFIER_CITIES);
	GD_INT_CACHE(EMPIRE_SIZE_NEED_MODIFIER_POP);
	GD_INT_CACHE(EMPIRE_SIZE_NEED_MODIFIER_CAP);
	GD_INT_CACHE(UNHAPPINESS_PER_SPECIALIST);
	GD_INT_CACHE(UNHAPPINESS_PER_X_PUPPET_CITIZENS);
	GD_INT_CACHE(WAR_WEARINESS_POPULATION_PERCENT_CAP);
	GD_INT_CACHE(UPRISING_COUNTER_MIN);
	GD_INT_CACHE(UPRISING_COUNTER_POSSIBLE);
	GD_INT_CACHE(UPRISING_NUM_BASE);
	GD_INT_CACHE(UPRISING_NUM_CITY_COUNT);
	GD_INT_CACHE(REVOLT_COUNTER_MIN);
	GD_INT_CACHE(STRATEGIC_RESOURCE_EXHAUSTED_PENALTY);
	GD_INT_CACHE(WLTKD_GROWTH_MULTIPLIER);
	GD_INT_CACHE(INDUSTRIAL_ROUTE_PRODUCTION_MOD);
	GD_INT_CACHE(RESOURCE_DEMAND_COUNTDOWN_BASE);
	GD_INT_CACHE(RESOURCE_DEMAND_COUNTDOWN_CAPITAL_ADD);
	GD_INT_CACHE(RESOURCE_DEMAND_COUNTDOWN_RAND);
	GD_INT_CACHE(GREAT_GENERAL_RANGE);
	GD_INT_CACHE(GREAT_GENERAL_STRENGTH_MOD);
	GD_INT_CACHE(BONUS_PER_ADJACENT_FRIEND);
	GD_INT_CACHE(POLICY_ATTACK_BONUS_MOD);
	GD_INT_CACHE(COMBAT_DAMAGE);
	GD_INT_CACHE(NONCOMBAT_UNIT_RANGED_DAMAGE);
	GD_INT_CACHE(NAVAL_COMBAT_DEFENDER_STRENGTH_MULTIPLIER);
	GD_INT_CACHE(INITIAL_GOLD_PER_UNIT_TIMES_100);
	GD_INT_CACHE(INITIAL_FREE_OUTSIDE_UNITS);
	GD_INT_CACHE(INITIAL_OUTSIDE_UNIT_GOLD_PERCENT);
	GD_INT_CACHE(UNIT_MAINTENANCE_GAME_MULTIPLIER);
	GD_INT_CACHE(UNIT_MAINTENANCE_GAME_EXPONENT_DIVISOR);
	GD_INT_CACHE(FREE_UNIT_HAPPINESS);
	GD_INT_CACHE(TRADE_ROUTE_BASE_GOLD);
	GD_INT_CACHE(TRADE_ROUTE_BASE_TARGET_TURNS);
	GD_INT_CACHE(TRADE_ROUTE_BASE_LAND_DISTANCE);
	GD_INT_CACHE(TRADE_ROUTE_BASE_LAND_MODIFIER);
	GD_INT_CACHE(TRADE_ROUTE_BASE_SEA_DISTANCE);
	GD_INT_CACHE(TRADE_ROUTE_BASE_SEA_MODIFIER);
	GD_INT_CACHE(TRADE_ROUTE_BASE_FOOD_VALUE);
	GD_INT_CACHE(TRADE_ROUTE_BASE_PRODUCTION_VALUE);
	GD_INT_CACHE(TRADE_ROUTE_SCIENCE_DIVISOR_TIMES100);
	GD_INT_CACHE(TRADE_ROUTE_CULTURE_DIVISOR_TIMES100);
	GD_INT_CACHE(TRADE_ROUTE_DIFFERENT_RESOURCE_VALUE);
	GD_INT_CACHE(TRADE_ROUTE_RIVER_CITY_MODIFIER);
	GD_INT_CACHE(TRADE_ROUTE_BASE_PLUNDER_GOLD);
	GD_INT_CACHE(TRADE_ROUTE_PLUNDER_TURNS_COUNTER);
	GD_INT_CACHE(TRADE_ROUTE_CS_ALLY_SCIENCE_DELTA);
	GD_INT_CACHE(TRADE_ROUTE_CS_FRIEND_SCIENCE_DELTA);
	GD_INT_CACHE(TRADE_ROUTE_CS_ALLY_CULTURE_DELTA);
	GD_INT_CACHE(TRADE_ROUTE_CS_FRIEND_CULTURE_DELTA);
	GD_INT_CACHE(TRADE_ROUTE_CS_ALLY_GOLD);
	GD_INT_CACHE(TRADE_ROUTE_CS_FRIEND_GOLD);
	GD_INT_CACHE(CITY_STATE_SCALE_PER_CITY_MOD);
	GD_INT_CACHE(TRADE_ROUTE_CAPITAL_POP_GOLD_MULTIPLIER);
	GD_INT_CACHE(TRADE_ROUTE_CITY_POP_GOLD_MULTIPLIER);
	GD_INT_CACHE(DEFICIT_UNIT_DISBANDING_THRESHOLD);
	GD_INT_CACHE(GOLDEN_AGE_BASE_THRESHOLD_INITIAL);
	GD_INT_CACHE(GOLDEN_AGE_BASE_THRESHOLD_HAPPINESS);
	GD_INT_CACHE(GOLDEN_AGE_EACH_GA_ADDITIONAL_HAPPINESS);
	GD_INT_CACHE(GOLDEN_AGE_THRESHOLD_CITY_MULTIPLIER);
	GD_INT_CACHE(GOLDEN_AGE_VISIBLE_THRESHOLD_DIVISOR);
	GD_INT_CACHE(BASE_GOLDEN_AGE_UNITS);
	GD_INT_CACHE(GOLDEN_AGE_UNITS_MULTIPLIER);
	GD_INT_CACHE(GOLDEN_AGE_LENGTH);
	GD_INT_CACHE(GOLDEN_AGE_GREAT_PEOPLE_MODIFIER);
	GD_INT_CACHE(MIN_UNIT_GOLDEN_AGE_TURNS);
	GD_INT_CACHE(GOLDEN_AGE_CULTURE_MODIFIER);
	GD_INT_CACHE(HILLS_EXTRA_MOVEMENT);
	GD_INT_CACHE(RIVER_EXTRA_MOVEMENT);
	GD_INT_CACHE(EXTRA_YIELD);
	GD_INT_CACHE(FORTIFY_MODIFIER_PER_TURN);
	GD_INT_CACHE(NUKE_FALLOUT_PROB);
	GD_INT_CACHE(NUKE_UNIT_DAMAGE_BASE);
	GD_INT_CACHE(NUKE_UNIT_DAMAGE_RAND_1);
	GD_INT_CACHE(NUKE_UNIT_DAMAGE_RAND_2);
	GD_INT_CACHE(NUKE_NON_COMBAT_DEATH_THRESHOLD);
	GD_INT_CACHE(NUKE_LEVEL1_POPULATION_DEATH_BASE);
	GD_INT_CACHE(NUKE_LEVEL1_POPULATION_DEATH_RAND_1);
	GD_INT_CACHE(NUKE_LEVEL1_POPULATION_DEATH_RAND_2);
	GD_INT_CACHE(NUKE_LEVEL2_POPULATION_DEATH_BASE);
	GD_INT_CACHE(NUKE_LEVEL2_POPULATION_DEATH_RAND_1);
	GD_INT_CACHE(NUKE_LEVEL2_POPULATION_DEATH_RAND_2);
	GD_INT_CACHE(NUKE_LEVEL2_ELIM_POPULATION_THRESHOLD);
	GD_INT_CACHE(NUKE_CITY_HIT_POINT_DAMAGE);
	GD_INT_CACHE(NUKE_BLAST_RADIUS);
	GD_INT_CACHE(TECH_COST_EXTRA_TEAM_MEMBER_MODIFIER);
	GD_INT_CACHE(TECH_COST_TOTAL_KNOWN_TEAM_MODIFIER);
	GD_INT_CACHE(TECH_COST_KNOWN_PREREQ_MODIFIER);
	GD_INT_CACHE(DIFFERENT_TEAM_FEATURE_PRODUCTION_PERCENT);
	GD_INT_CACHE(UNIT_PRODUCTION_PERCENT);
	GD_INT_CACHE(BUILDING_PRODUCTION_PERCENT);
	GD_INT_CACHE(PROJECT_PRODUCTION_PERCENT);
	GD_INT_CACHE(PRODUCTION_PENALTY_PER_UNIT_OVER_SUPPLY);
	GD_INT_CACHE(GROWTH_PENALTY_PER_UNIT_OVER_SUPPLY);
	GD_INT_CACHE(MAX_UNIT_SUPPLY_PRODMOD);
	GD_INT_CACHE(MAX_UNIT_SUPPLY_GROWTH_MOD);
	GD_INT_CACHE(UNIT_SUPPLY_BASE_TECH_REDUCTION_PER_ERA);
	GD_INT_CACHE(UNIT_SUPPLY_CITIES_TECH_REDUCTION_MULTIPLIER);
	GD_INT_CACHE(UNIT_SUPPLY_POPULATION_TECH_REDUCTION_MULTIPLIER);
	GD_INT_CACHE(UNIT_SUPPLY_WAR_WEARINESS_PERCENT_REDUCTION);
	GD_INT_CACHE(UNIT_SUPPLY_POPULATION_PUPPET_PERCENT);
	GD_INT_CACHE(MINOR_CIV_UNIT_SUPPLY_MODIFIER_CULTURED);
	GD_INT_CACHE(MINOR_CIV_UNIT_SUPPLY_MODIFIER_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_UNIT_SUPPLY_MODIFIER_MARITIME);
	GD_INT_CACHE(MINOR_CIV_UNIT_SUPPLY_MODIFIER_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_UNIT_SUPPLY_MODIFIER_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_UNIT_SUPPLY_MODIFIER_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_UNIT_SUPPLY_MODIFIER_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_UNIT_SUPPLY_MODIFIER_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_UNIT_SUPPLY_MODIFIER_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_UNIT_SUPPLY_MULTIPLIER_PER_EXTRA_CITY);
	GD_INT_CACHE(UNIT_COST_WAR_WEARINESS_PERCENT_INCREASE);
	GD_INT_CACHE(MAXED_UNIT_GOLD_PERCENT);
	GD_INT_CACHE(MAXED_BUILDING_GOLD_PERCENT);
	GD_INT_CACHE(MAXED_PROJECT_GOLD_PERCENT);
	GD_INT_CACHE(CIRCUMNAVIGATE_FREE_MOVES);
	GD_INT_CACHE(BASE_CAPTURE_GOLD);
	GD_INT_CACHE(CAPTURE_GOLD_PER_POPULATION);
	GD_INT_CACHE(CAPTURE_GOLD_RAND1);
	GD_INT_CACHE(CAPTURE_GOLD_RAND2);
	GD_INT_CACHE(CAPTURE_GOLD_MAX_TURNS);
	GD_INT_CACHE(BARBARIAN_CITY_ATTACK_MODIFIER);
	GD_INT_CACHE(BUILDING_PRODUCTION_DECAY_TIME);
	GD_INT_CACHE(BUILDING_PRODUCTION_DECAY_PERCENT);
	GD_INT_CACHE(UNIT_PRODUCTION_DECAY_TIME);
	GD_INT_CACHE(UNIT_PRODUCTION_DECAY_PERCENT);
	GD_INT_CACHE(BASE_UNIT_UPGRADE_COST);
	GD_INT_CACHE(UNIT_UPGRADE_COST_PER_PRODUCTION);
	GD_INT_CACHE(UNIT_UPGRADE_COST_VISIBLE_DIVISOR);
	GD_INT_CACHE(UNIT_UPGRADE_COST_DISCOUNT_MAX);
	GD_INT_CACHE(RESEARCH_AGREEMENT_BOOST_DIVISOR);
	GD_INT_CACHE(MAX_INTERCEPTION_PROBABILITY);
	GD_INT_CACHE(MAX_EVASION_PROBABILITY);
	GD_INT_CACHE(MIN_WATER_SIZE_FOR_OCEAN);
	GD_INT_CACHE(WATER_POTENTIAL_CITY_WORK_FOR_AREA);
	GD_INT_CACHE(CITY_MAX_NUM_BUILDINGS);
	GD_INT_CACHE(CITY_MIN_SIZE_FOR_SETTLERS);
	GD_INT_CACHE(ADVANCED_START_ALLOW_UNITS_OUTSIDE_CITIES);
	GD_INT_CACHE(ADVANCED_START_MAX_UNITS_PER_CITY);
	GD_INT_CACHE(ADVANCED_START_CITY_COST);
	GD_INT_CACHE(ADVANCED_START_CITY_COST_INCREASE);
	GD_INT_CACHE(ADVANCED_START_POPULATION_COST);
	GD_INT_CACHE(ADVANCED_START_POPULATION_COST_INCREASE);
	GD_INT_CACHE(ADVANCED_START_VISIBILITY_COST);
	GD_INT_CACHE(ADVANCED_START_VISIBILITY_COST_INCREASE);
	GD_INT_CACHE(ADVANCED_START_CITY_PLACEMENT_MAX_RANGE);
	GD_INT_CACHE(NEW_CITY_BUILDING_VALUE_MODIFIER);
	GD_INT_CACHE(PATH_DAMAGE_WEIGHT);
	GD_INT_CACHE(PUPPET_GROWTH_MODIFIER);
	GD_INT_CACHE(PUPPET_PRODUCTION_MODIFIER);
	GD_INT_CACHE(PUPPET_SCIENCE_MODIFIER);
	GD_INT_CACHE(PUPPET_CULTURE_MODIFIER);
	GD_INT_CACHE(PUPPET_GOLD_MODIFIER);
	GD_INT_CACHE(PUPPET_FAITH_MODIFIER);
	GD_INT_CACHE(PUPPET_TOURISM_MODIFIER);
	GD_INT_CACHE(PUPPET_GOLDEN_AGE_MODIFIER);
	GD_INT_CACHE(BLOCKADE_GOLD_PENALTY);
	GD_INT_CACHE(BASE_POLICY_COST);
	GD_INT_CACHE(POLICY_COST_INCREASE_TO_BE_EXPONENTED);
	GD_INT_CACHE(POLICY_COST_VISIBLE_DIVISOR);
	GD_INT_CACHE(SWITCH_POLICY_BRANCHES_ANARCHY_TURNS);
	GD_INT_CACHE(SWITCH_POLICY_BRANCHES_TENETS_LOST);
	GD_INT_CACHE(POLICY_COST_DISCOUNT_MAX);
	GD_INT_CACHE(GOLD_PURCHASE_GOLD_PER_PRODUCTION);
	GD_INT_CACHE(GOLD_PURCHASE_VISIBLE_DIVISOR);
	GD_INT_CACHE(PROJECT_PURCHASING_DISABLED);
	GD_INT_CACHE(INFLUENCE_MOUNTAIN_COST);
	GD_INT_CACHE(INFLUENCE_HILL_COST);
	GD_INT_CACHE(INFLUENCE_RIVER_COST);
	GD_INT_CACHE(NUM_RESOURCE_QUANTITY_TYPES);
	GD_INT_CACHE(SCIENCE_PER_POPULATION);
	GD_INT_CACHE(RESEARCH_AGREEMENT_MOD);
	GD_INT_CACHE(BALANCE_BARBARIAN_HEAL_RATE);
	GD_INT_CACHE(BARBARIAN_CAMP_FIRST_TURN_PERCENT_OF_TARGET_TO_ADD);
	GD_INT_CACHE(BARBARIAN_CAMP_FIRST_TURN_PERCENT_PER_ERA);
	GD_INT_CACHE(BARBARIAN_CAMP_MINIMUM_ISLAND_SIZE);
	GD_INT_CACHE(BARBARIAN_CAMP_MINIMUM_DISTANCE_CAPITAL);
	GD_INT_CACHE(BARBARIAN_CAMP_MINIMUM_DISTANCE_ANOTHER_CAMP);
	GD_INT_CACHE(BARBARIAN_CAMP_MINIMUM_DISTANCE_RECENTLY_CLEARED_CAMP);
	GD_INT_CACHE(BARBARIAN_CAMP_CLEARED_MIN_TURNS_TO_RESPAWN);
	GD_INT_CACHE(BARBARIAN_CAMP_COASTAL_SPAWN_ROLL);
	GD_INT_CACHE(BARBARIAN_INITIAL_SPAWN_TURN);
	GD_INT_CACHE(BARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING);
	GD_INT_CACHE(BARBARIAN_CAMP_SPAWN_RATE);
	GD_INT_CACHE(BARBARIAN_CAMP_SPAWN_RATE_RAGING);
	GD_INT_CACHE(BARBARIAN_CAMP_SPAWN_RATE_CHILL);
	GD_INT_CACHE(BARBARIAN_CAMP_NUM_AFTER_INITIAL);
	GD_INT_CACHE(BARBARIAN_CAMP_NUM_AFTER_INITIAL_CHILL);
	GD_INT_CACHE(BARBARIAN_CAMP_NUM_AFTER_INITIAL_RAGING);
	GD_INT_CACHE(BARBARIAN_INITIAL_SPAWN_TURN_FROM_SPAWNER);
	GD_INT_CACHE(BARBARIAN_NAVAL_UNIT_START_TURN_SPAWN);
	GD_INT_CACHE(BARBARIAN_INITIAL_SPAWN_SPAWNER_DELAY);
	GD_INT_CACHE(BARBARIAN_MIN_SPAWN_DELAY);
	GD_INT_CACHE(BARBARIAN_SPAWN_DELAY_FROM_ENCAMPMENT);
	GD_INT_CACHE(BARBARIAN_SPAWN_DELAY_FROM_ENCAMPMENT_RAND);
	GD_INT_CACHE(BARBARIAN_SPAWN_DELAY_FROM_ENCAMPMENT_CHILL_MULTIPLIER);
	GD_INT_CACHE(BARBARIAN_SPAWN_DELAY_FROM_ENCAMPMENT_RAGING_MULTIPLIER);
	GD_INT_CACHE(BARBARIAN_ENCAMPMENT_SPAWN_DELAY_REDUCTION_PER_SPAWN);
	GD_INT_CACHE(BARBARIAN_ENCAMPMENT_MAX_SPAWN_DELAY_REDUCTION);
	GD_INT_CACHE(BARBARIAN_ENCAMPMENT_ATTACKED_DELAY_MULTIPLIER);
	GD_INT_CACHE(BARBARIAN_SPAWN_DELAY_FROM_CITY);
	GD_INT_CACHE(BARBARIAN_SPAWN_DELAY_FROM_CITY_RAND);
	GD_INT_CACHE(BARBARIAN_SPAWN_DELAY_FROM_CITY_CHILL_MULTIPLIER);
	GD_INT_CACHE(BARBARIAN_SPAWN_DELAY_FROM_CITY_RAGING_MULTIPLIER);
	GD_INT_CACHE(BARBARIAN_CITY_SPAWN_DELAY_REDUCTION_PER_SPAWN);
	GD_INT_CACHE(BARBARIAN_CITY_MAX_SPAWN_DELAY_REDUCTION);
	GD_INT_CACHE(BARBARIAN_CITY_ATTACKED_DELAY_MULTIPLIER);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_INITIAL_ENCAMPMENT_CREATION_SPAWN);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_INITIAL_ENCAMPMENT_CREATION_SPAWN_CHILL);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_INITIAL_ENCAMPMENT_CREATION_SPAWN_RAGING);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_INITIAL_ENCAMPMENT_CREATION_SPAWN_PER_ERA);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_ENCAMPMENT_CREATION_SPAWN);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_ENCAMPMENT_CREATION_SPAWN_CHILL);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_ENCAMPMENT_CREATION_SPAWN_RAGING);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_ENCAMPMENT_CREATION_SPAWN_PER_ERA);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_CITY_CAPTURE_SPAWN);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_CITY_CAPTURE_SPAWN_CHILL);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_CITY_CAPTURE_SPAWN_RAGING);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_CITY_CAPTURE_SPAWN_PER_ERA);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_PER_ENCAMPMENT_SPAWN);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_PER_ENCAMPMENT_SPAWN_CHILL);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_PER_ENCAMPMENT_SPAWN_RAGING);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_PER_ENCAMPMENT_SPAWN_PER_ERA);
	GD_INT_CACHE(MAX_BARBARIANS_FROM_CAMP_NEARBY);
	GD_INT_CACHE(MAX_BARBARIANS_FROM_CAMP_NEARBY_RANGE);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_PER_CITY_SPAWN);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_PER_CITY_SPAWN_CHILL);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_PER_CITY_SPAWN_RAGING);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_PER_CITY_SPAWN_PER_ERA);
	GD_INT_CACHE(MAX_BARBARIANS_FROM_CITY_NEARBY);
	GD_INT_CACHE(MAX_BARBARIANS_FROM_CITY_NEARBY_RANGE);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_PLUNDER_TRADE_ROUTE_SPAWN);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_PLUNDER_TRADE_ROUTE_SPAWN_CHILL);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_PLUNDER_TRADE_ROUTE_SPAWN_RAGING);
	GD_INT_CACHE(BARBARIAN_NUM_UNITS_PLUNDER_TRADE_ROUTE_SPAWN_PER_ERA);
	GD_INT_CACHE(BARBARIAN_UNIT_SPAWN_NUM_CANDIDATES);
	GD_INT_CACHE(BARBARIAN_UNIT_SPAWN_NO_RESOURCE_MULTIPLIER);
	GD_INT_CACHE(BARBARIAN_UNIT_SPAWN_UU_MULTIPLIER);
	GD_INT_CACHE(BARBARIAN_UNIT_SPAWN_PREFERRED_TYPE);
	GD_INT_CACHE(MINOR_QUEST_REBELLION_BARB_SPAWN_INTERVAL);
	GD_INT_CACHE(MINOR_QUEST_REBELLION_BARBS_PER_CS_UNIT);
	GD_INT_CACHE(MINOR_QUEST_REBELLION_BARBS_PER_ERA_BASE);
	GD_INT_CACHE(MINOR_QUEST_REBELLION_BARBS_PER_ERA_RAND);
	GD_INT_CACHE(MINOR_QUEST_REBELLION_BARBS_MIN);
	GD_INT_CACHE(MINOR_QUEST_ACQUIRE_CITY_BONUS_XP);
	GD_INT_CACHE(GOLD_FROM_BARBARIAN_CONVERSION);
	GD_INT_CACHE(BARBARIAN_CITY_GOLD_RANSOM);
	GD_INT_CACHE(BARBARIAN_UNIT_GOLD_RANSOM);
	GD_INT_CACHE(EMBARKED_UNIT_MOVEMENT);
	GD_INT_CACHE(EMBARKED_VISIBILITY_RANGE);
	GD_INT_CACHE(DEFAULT_MAX_NUM_BUILDERS);
	GD_INT_CACHE(BARBARIAN_TECH_PERCENT);
	GD_INT_CACHE(CITY_RESOURCE_WLTKD_TURNS);
	GD_INT_CACHE(WLTKD_RESOURCE_RESET_TURNS);
	GD_INT_CACHE(MAX_SPECIALISTS_FROM_BUILDING);
	GD_INT_CACHE(GREAT_PERSON_THRESHOLD_BASE);
	GD_INT_CACHE(GREAT_PERSON_THRESHOLD_INCREASE);
	GD_INT_CACHE(CULTURE_BOMB_COOLDOWN);
	GD_INT_CACHE(CULTURE_BOMB_MINOR_FRIENDSHIP_CHANGE);
	GD_INT_CACHE(LANDMARK_MINOR_FRIENDSHIP_CHANGE);
	GD_INT_CACHE(UNIT_AUTO_EXPLORE_DISABLED);
	GD_INT_CACHE(UNIT_AUTO_EXPLORE_FULL_DISABLED);
	GD_INT_CACHE(UNIT_WORKER_AUTOMATION_DISABLED);
	GD_INT_CACHE(UNIT_DELETE_DISABLED);
	GD_INT_CACHE(MIN_START_AREA_TILES);
	GD_INT_CACHE(MIN_DISTANCE_OTHER_AREA_PERCENT);
	GD_INT_CACHE(MINOR_CIV_FOOD_REQUIREMENT);
	GD_INT_CACHE(MAJOR_CIV_FOOD_REQUIREMENT);
	GD_INT_CACHE(MIN_START_FOUND_VALUE_AS_PERCENT_OF_BEST);
	GD_INT_CACHE(START_AREA_FOOD_MULTIPLIER);
	GD_INT_CACHE(START_AREA_HAPPINESS_MULTIPLIER);
	GD_INT_CACHE(START_AREA_PRODUCTION_MULTIPLIER);
	GD_INT_CACHE(START_AREA_GOLD_MULTIPLIER);
	GD_INT_CACHE(START_AREA_SCIENCE_MULTIPLIER);
	GD_INT_CACHE(START_AREA_FAITH_MULTIPLIER);
	GD_INT_CACHE(START_AREA_RESOURCE_MULTIPLIER);
	GD_INT_CACHE(START_AREA_STRATEGIC_MULTIPLIER);
	GD_INT_CACHE(START_AREA_BUILD_ON_COAST_PERCENT);
	GD_INT_CACHE(SETTLER_FOOD_MULTIPLIER);
	GD_INT_CACHE(SETTLER_PRODUCTION_MULTIPLIER);
	GD_INT_CACHE(SETTLER_GOLD_MULTIPLIER);
	GD_INT_CACHE(SETTLER_SCIENCE_MULTIPLIER);
	GD_INT_CACHE(SETTLER_FAITH_MULTIPLIER);
	GD_INT_CACHE(SETTLER_STRATEGIC_MULTIPLIER);
	GD_INT_CACHE(SETTLER_HAPPINESS_MULTIPLIER);
	GD_INT_CACHE(SETTLER_RESOURCE_MULTIPLIER);
	GD_INT_CACHE(SETTLER_BUILD_ON_COAST_PERCENT);
	GD_INT_CACHE(CITY_RING_1_MULTIPLIER);
	GD_INT_CACHE(CITY_RING_2_MULTIPLIER);
	GD_INT_CACHE(CITY_RING_3_MULTIPLIER);
	GD_INT_CACHE(CITY_RING_4_MULTIPLIER);
	GD_INT_CACHE(CITY_RING_5_MULTIPLIER);
	GD_INT_CACHE(SETTLER_EVALUATION_DISTANCE);
	GD_INT_CACHE(SETTLER_DISTANCE_DROPOFF_MODIFIER);
	GD_INT_CACHE(BUILD_ON_RESOURCE_PERCENT);
	GD_INT_CACHE(BUILD_ON_RIVER_PERCENT);
	GD_INT_CACHE(CHOKEPOINT_STRATEGIC_VALUE);
	GD_INT_CACHE(HILL_STRATEGIC_VALUE);
	GD_INT_CACHE(BALANCE_BAD_TILES_STRATEGIC_VALUE);
	GD_INT_CACHE(BALANCE_FRESH_WATER_STRATEGIC_VALUE);
	GD_INT_CACHE(BALANCE_COAST_STRATEGIC_VALUE);
	GD_INT_CACHE(BALANCE_EMPIRE_BORDERLAND_STRATEGIC_VALUE);
	GD_INT_CACHE(MINOR_CIV_CONTACT_GOLD_FIRST);
	GD_INT_CACHE(MINOR_CIV_CONTACT_GOLD_OTHER);
	GD_INT_CACHE(COMBAT_AI_OFFENSE_DAMAGEWEIGHT);
	GD_INT_CACHE(COMBAT_AI_OFFENSE_DANGERWEIGHT);
	GD_INT_CACHE(MAJORS_CAN_MOVE_STARTING_SETTLER);
	GD_INT_CACHE(CS_CAN_MOVE_STARTING_SETTLER);
	GD_INT_CACHE(COMPLETE_KILLS_TURN_TIMER);
	GD_INT_CACHE(MAX_NUM_TENETS_LEVEL_1);
	GD_INT_CACHE(MAX_NUM_TENETS_LEVEL_2);
	GD_INT_CACHE(MAX_NUM_TENETS_LEVEL_3);
	GD_INT_CACHE(IGNORE_GLOBAL_TERRAIN_COSTS_INCLUDES_RIVERS);
	GD_INT_CACHE(IGNORE_SPECIFIC_TERRAIN_COSTS_INCLUDES_RIVERS);
	GD_INT_CACHE(DIPLOAI_LIMIT_VICTORY_PURSUIT_RANDOMIZATION);
	GD_INT_CACHE(DIPLOAI_ENABLE_NUCLEAR_GANDHI);
	GD_INT_CACHE(DIPLOAI_DISABLE_WAR_BRIBES);
	GD_INT_CACHE(DIPLOAI_DISABLE_CITY_TRADING);
	GD_INT_CACHE(DIPLOAI_DISABLE_VOLUNTARY_VASSALAGE);
	GD_INT_CACHE(DIPLOAI_NO_OTHER_HOST_VOTES);
	GD_INT_CACHE(DIPLOAI_NO_OTHER_WORLD_LEADER_VOTES);
	GD_INT_CACHE(DIPLOAI_DISABLE_INSULT_MESSAGES);
	GD_INT_CACHE(DIPLOAI_DISABLE_COMPLIMENT_MESSAGES);
	GD_INT_CACHE(DIPLOAI_NO_FAKE_OPINION_MODIFIERS);
	GD_INT_CACHE(DIPLOAI_SHOW_HIDDEN_OPINION_MODIFIERS);
	GD_INT_CACHE(DIPLOAI_SHOW_ALL_OPINION_VALUES);
	GD_INT_CACHE(DIPLOAI_SHOW_BASE_HUMAN_OPINION);
	GD_INT_CACHE(DIPLOAI_HIDE_OPINION_TABLE);
	GD_INT_CACHE(DIPLOAI_NO_FLAVOR_RANDOMIZATION);
	GD_INT_CACHE(DIPLOAI_TEMPORARY_FOR_PERMANENT_TRADING_SETTING);
	GD_INT_CACHE(DIPLOAI_THIRD_PARTY_PEACE_WARSCORE);
	GD_INT_CACHE(DIPLOAI_DISABLE_FRIENDSHIP_REQUESTS);
	GD_INT_CACHE(DIPLOAI_DISABLE_GIFT_OFFERS);
	GD_INT_CACHE(DIPLOAI_DISABLE_COOP_WAR_REQUESTS);
	GD_INT_CACHE(DIPLOAI_DISABLE_HELP_REQUESTS);
	GD_INT_CACHE(DIPLOAI_DISABLE_TRADE_OFFERS);
	GD_INT_CACHE(DIPLOAI_DISABLE_PEACE_OFFERS);
	GD_INT_CACHE(DIPLOAI_DISABLE_DEMANDS);
	GD_INT_CACHE(DIPLOAI_DISABLE_INDEPENDENCE_REQUESTS);
	GD_INT_CACHE(DIPLOAI_DISABLE_ALL_STATEMENTS);
	GD_INT_CACHE(DIPLOAI_PASSIVE_MODE);
	GD_INT_CACHE(DIPLOAI_AGGRESSIVE_MODE);
	GD_INT_CACHE(DIPLOAI_DISABLE_DOMINATION_ONLY_AGGRESSION);
	GD_INT_CACHE(DIPLOAI_ENABLE_DEBUG_MODE);
	GD_INT_CACHE(WAR_PROGRESS_INITIAL_VALUE);
	GD_INT_CACHE(WAR_PROGRESS_DECAY_VS_STRONGER);
	GD_INT_CACHE(WAR_PROGRESS_DECAY_VS_EQUAL);
	GD_INT_CACHE(WAR_PROGRESS_DECAY_VS_WEAKER);
	GD_INT_CACHE(WAR_PROGRESS_CAPTURED_WORKER);
	GD_INT_CACHE(WAR_PROGRESS_CAPTURED_SETTLER);
	GD_INT_CACHE(WAR_PROGRESS_PLUNDERED_TRADE_ROUTE);
	GD_INT_CACHE(WAR_PROGRESS_PILLAGED_IMPROVEMENT);
	GD_INT_CACHE(WAR_PROGRESS_STOLE_TILE);
	GD_INT_CACHE(WAR_PROGRESS_HIGH_VALUE_PILLAGE_MULTIPLIER);
	GD_INT_CACHE(WAR_PROGRESS_KILLED_UNIT);
	GD_INT_CACHE(WAR_PROGRESS_CAPTURED_CITY);
	GD_INT_CACHE(WAR_PROGRESS_LOST_WORKER);
	GD_INT_CACHE(WAR_PROGRESS_LOST_SETTLER);
	GD_INT_CACHE(WAR_PROGRESS_LOST_TRADE_ROUTE);
	GD_INT_CACHE(WAR_PROGRESS_LOST_IMPROVEMENT);
	GD_INT_CACHE(WAR_PROGRESS_LOST_TILE);
	GD_INT_CACHE(WAR_PROGRESS_LOST_UNIT);
	GD_INT_CACHE(WAR_PROGRESS_LOST_CITY);
	GD_INT_CACHE(WAR_PROGRESS_PER_STRATEGIC_DEFICIT);
	GD_INT_CACHE(WAR_PROGRESS_PER_UNHAPPY);
	GD_INT_CACHE(WAR_PROGRESS_CAPITAL_MULTIPLIER);
	GD_INT_CACHE(WAR_PROGRESS_HOLY_CITY_MULTIPLIER);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_BONUS_FRIENDSHIP);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_BONUS_CULTURE);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_BONUS_FAITH);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_BONUS_GOLD);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_BONUS_FOOD);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_BONUS_UNIT);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_XP_PER_ERA);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_XP_RANDOM);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_PLAYER_MULTIPLIER);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_PLAYER_DIVISOR);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_SUBSEQUENT_TEAM_MULTIPLIER);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_SUBSEQUENT_TEAM_DIVISOR);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_FRIENDLY_BONUS_MULTIPLIER);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_FRIENDLY_BONUS_DIVISOR);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_FRIENDLY_UNIT_MULTIPLIER);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_FRIENDLY_UNIT_DIVISOR);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_HOSTILE_BONUS_MULTIPLIER);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_HOSTILE_BONUS_DIVISOR);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_HOSTILE_UNIT_MULTIPLIER);
	GD_INT_CACHE(MINOR_CIV_FIRST_CONTACT_HOSTILE_UNIT_DIVISOR);
	GD_INT_CACHE(MINOR_CIV_GOLD_PERCENT);
	GD_INT_CACHE(MINOR_CIV_TECH_PERCENT);
	GD_INT_CACHE(MINOR_POLICY_RESOURCE_MULTIPLIER);
	GD_INT_CACHE(MINOR_POLICY_RESOURCE_HAPPINESS_MULTIPLIER);
	GD_INT_CACHE(MINOR_GOLD_GIFT_LARGE);
	GD_INT_CACHE(MINOR_GOLD_GIFT_MEDIUM);
	GD_INT_CACHE(MINOR_GOLD_GIFT_SMALL);
	GD_INT_CACHE(MINOR_CIV_TILE_IMPROVEMENT_GIFT_COST);
	GD_INT_CACHE(MINOR_CIV_BUYOUT_COST);
	GD_INT_CACHE(BALANCE_MARRIAGE_COST_BASE);
	GD_INT_CACHE(BALANCE_MARRIAGE_COST_INCREASE_PER_PREVIOUS_MARRIAGE);
	GD_INT_CACHE(MINOR_CIV_BUYOUT_TURNS);
	GD_INT_CACHE(MINOR_FRIENDSHIP_FROM_TRADE_MISSION);
	GD_INT_CACHE(MINOR_FRIENDSHIP_ANCHOR_DEFAULT);
	GD_INT_CACHE(MINOR_FRIENDSHIP_ANCHOR_MOD_PROTECTED);
	GD_INT_CACHE(MINOR_FRIENDSHIP_ANCHOR_MOD_WARY_OF);
	GD_INT_CACHE(MINOR_UNIT_GIFT_TRAVEL_TURNS);
	GD_INT_CACHE(PLOT_UNIT_LIMIT);
	GD_INT_CACHE(CITY_UNIT_LIMIT);
	GD_INT_CACHE(ZONE_OF_CONTROL_ENABLED);
	GD_INT_CACHE(FIRE_SUPPORT_DISABLED);
	GD_INT_CACHE(MAX_HIT_POINTS);
	GD_INT_CACHE(MAX_CITY_HIT_POINTS);
	GD_INT_CACHE(CITY_HIT_POINTS_HEALED_PER_TURN);
	GD_INT_CACHE(HILLS_EXTRA_DEFENSE);
	GD_INT_CACHE(RIVER_ATTACK_MODIFIER);
	GD_INT_CACHE(AMPHIB_ATTACK_MODIFIER);
	GD_INT_CACHE(ENEMY_HEAL_RATE);
	GD_INT_CACHE(NEUTRAL_HEAL_RATE);
	GD_INT_CACHE(FRIENDLY_HEAL_RATE);
	GD_INT_CACHE(CITY_HEAL_RATE);
	GD_INT_CACHE(INSTA_HEAL_RATE);
	GD_INT_CACHE(ATTACK_SAME_STRENGTH_MIN_DAMAGE);
	GD_INT_CACHE(ATTACK_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE);
	GD_INT_CACHE(RANGE_ATTACK_SAME_STRENGTH_MIN_DAMAGE);
	GD_INT_CACHE(RANGE_ATTACK_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE);
	GD_INT_CACHE(INTERCEPTION_SAME_STRENGTH_MIN_DAMAGE);
	GD_INT_CACHE(INTERCEPTION_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE);
	GD_INT_CACHE(AIR_SWEEP_INTERCEPTION_DAMAGE_MOD);
	GD_INT_CACHE(WOUNDED_DAMAGE_MULTIPLIER);
	GD_INT_CACHE(CITY_STRENGTH_DEFAULT);
	GD_INT_CACHE(CITY_STRENGTH_POPULATION_CHANGE);
	GD_INT_CACHE(CITY_STRENGTH_TECH_MULTIPLIER);
	GD_INT_CACHE(CITY_STRENGTH_UNIT_DIVISOR);
	GD_INT_CACHE(CITY_STRENGTH_HILL_CHANGE);
	GD_INT_CACHE(CITY_STRENGTH_THRESHOLD_FOR_BONUSES);
	GD_INT_CACHE(CITY_ATTACKING_DAMAGE_MOD);
	GD_INT_CACHE(ATTACKING_CITY_MELEE_DAMAGE_MOD);
	GD_INT_CACHE(MAX_CITY_ATTACK_RANGE);
	GD_INT_CACHE(CITY_ATTACK_RANGE);
	GD_INT_CACHE(CAN_CITY_USE_INDIRECT_FIRE);
	GD_INT_CACHE(CITY_RANGED_ATTACK_STRENGTH_MULTIPLIER);
	GD_INT_CACHE(CITY_CAPTURE_DAMAGE_PERCENT);
	GD_INT_CACHE(EXPERIENCE_PER_LEVEL);
	GD_INT_CACHE(EXPERIENCE_ATTACKING_UNIT_MELEE);
	GD_INT_CACHE(EXPERIENCE_DEFENDING_UNIT_MELEE);
	GD_INT_CACHE(EXPERIENCE_ATTACKING_UNIT_AIR);
	GD_INT_CACHE(EXPERIENCE_DEFENDING_UNIT_AIR);
	GD_INT_CACHE(EXPERIENCE_ATTACKING_UNIT_RANGED);
	GD_INT_CACHE(EXPERIENCE_DEFENDING_UNIT_RANGED);
	GD_INT_CACHE(EXPERIENCE_ATTACKING_AIR_SWEEP);
	GD_INT_CACHE(EXPERIENCE_DEFENDING_AIR_SWEEP_AIR);
	GD_INT_CACHE(EXPERIENCE_DEFENDING_AIR_SWEEP_GROUND);
	GD_INT_CACHE(EXPERIENCE_ATTACKING_CITY_MELEE);
	GD_INT_CACHE(EXPERIENCE_ATTACKING_CITY_RANGED);
	GD_INT_CACHE(EXPERIENCE_ATTACKING_CITY_AIR);
	GD_INT_CACHE(BARBARIAN_MAX_XP_VALUE);
	GD_INT_CACHE(MINOR_MAX_XP_VALUE);
	GD_INT_CACHE(COMBAT_EXPERIENCE_IN_BORDERS_PERCENT);
	GD_INT_CACHE(GREAT_GENERALS_THRESHOLD);
	GD_INT_CACHE(GREAT_GENERALS_THRESHOLD_INCREASE);
	GD_INT_CACHE(GREAT_GENERALS_THRESHOLD_INCREASE_TEAM);
	GD_INT_CACHE(UNIT_DEATH_XP_GREAT_GENERAL_LOSS);
	GD_INT_CACHE(CRAMPED_RANGE_FROM_CITY);
	GD_INT_CACHE(CRAMPED_USABLE_PLOT_PERCENT);
	GD_INT_CACHE(PROXIMITY_NEIGHBORS_CLOSEST_CITY_REQUIREMENT);
	GD_INT_CACHE(PROXIMITY_CLOSE_CLOSEST_CITY_POSSIBILITY);
	GD_INT_CACHE(PROXIMITY_FAR_DISTANCE_MAX);
	GD_INT_CACHE(PLOT_BASE_COST);
	GD_INT_CACHE(PLOT_ADDITIONAL_COST_PER_PLOT);
	GD_INT_CACHE(PLOT_COST_APPEARANCE_DIVISOR);
	GD_INT_CACHE(CULTURE_COST_FIRST_PLOT);
	GD_INT_CACHE(CULTURE_COST_LATER_PLOT_MULTIPLIER);
	GD_INT_CACHE(CULTURE_COST_VISIBLE_DIVISOR);
	GD_INT_CACHE(CULTURE_PLOT_COST_MOD_MINIMUM);
	GD_INT_CACHE(MINOR_CIV_PLOT_CULTURE_COST_MULTIPLIER);
	GD_INT_CACHE(MAXIMUM_WORK_PLOT_DISTANCE);
	GD_INT_CACHE(MAXIMUM_BUY_PLOT_DISTANCE);
	GD_INT_CACHE(MAXIMUM_ACQUIRE_PLOT_DISTANCE);
	GD_INT_CACHE(PLOT_INFLUENCE_BASE_MULTIPLIER);
	GD_INT_CACHE(PLOT_INFLUENCE_DISTANCE_MULTIPLIER);
	GD_INT_CACHE(PLOT_INFLUENCE_DISTANCE_DIVISOR);
	GD_INT_CACHE(PLOT_INFLUENCE_RING_COST);
	GD_INT_CACHE(PLOT_INFLUENCE_WATER_COST);
	GD_INT_CACHE(PLOT_INFLUENCE_RESOURCE_COST);
	GD_INT_CACHE(PLOT_INFLUENCE_NW_COST);
	GD_INT_CACHE(PLOT_BUY_RESOURCE_COST);
	GD_INT_CACHE(PLOT_INFLUENCE_YIELD_POINT_COST);
	GD_INT_CACHE(PLOT_INFLUENCE_NO_ADJACENT_OWNED_COST);
	GD_INT_CACHE(OWN_UNITED_NATIONS_VOTE_BONUS);
	GD_INT_CACHE(HISTORY_LOCAL_NUM_BEST_CITIES);
	GD_INT_CACHE(HISTORY_NUM_TURNS_TO_AVERAGE);
	GD_INT_CACHE(SCORE_CITY_MULTIPLIER);
	GD_INT_CACHE(SCORE_POPULATION_MULTIPLIER);
	GD_INT_CACHE(SCORE_LAND_MULTIPLIER);
	GD_INT_CACHE(SCORE_WONDER_MULTIPLIER);
	GD_INT_CACHE(SCORE_TECH_MULTIPLIER);
	GD_INT_CACHE(SCORE_FUTURE_TECH_MULTIPLIER);
	GD_INT_CACHE(SCORE_POLICY_MULTIPLIER);
	GD_INT_CACHE(SCORE_GREAT_WORK_MULTIPLIER);
	GD_INT_CACHE(SCORE_BELIEF_MULTIPLIER);
	GD_INT_CACHE(SCORE_RELIGION_CITIES_MULTIPLIER);
	GD_INT_CACHE(MIN_GAME_TURNS_ELAPSED_TO_TEST_VICTORY);
	GD_INT_CACHE(ZERO_SUM_COMPETITION_WONDERS_VICTORY_POINTS);
	GD_INT_CACHE(ZERO_SUM_COMPETITION_POLICIES_VICTORY_POINTS);
	GD_INT_CACHE(ZERO_SUM_COMPETITION_GREAT_PEOPLE_VICTORY_POINTS);
	GD_INT_CACHE(MAX_CITY_DIST_HIGHWATER_MARK);
	GD_INT_CACHE(HEAVY_RESOURCE_THRESHOLD);
	GD_INT_CACHE(PROGRESS_POPUP_TURN_FREQUENCY);
	GD_INT_CACHE(SETTLER_PRODUCTION_SPEED);
	GD_INT_CACHE(BUY_PLOTS_DISABLED);
	GD_INT_CACHE(WARLORD_EXTRA_EXPERIENCE_PER_UNIT_PERCENT);
	GD_INT_CACHE(BUILDING_SALE_DIVISOR);
	GD_INT_CACHE(DISBAND_UNIT_REFUND_PERCENT);
	GD_INT_CACHE(MINOR_CIV_ROUTE_QUEST_WEIGHT);
	GD_INT_CACHE(WITHDRAW_MOD_ENEMY_MOVES);
	GD_INT_CACHE(WITHDRAW_MOD_BLOCKED_TILE);
	GD_INT_CACHE(AI_OPERATIONAL_MAX_RECRUIT_TURNS_DEFAULT);
	GD_INT_CACHE(AI_OPERATIONAL_MAX_RECRUIT_TURNS_ENEMY_TERRITORY);
	GD_INT_CACHE(AI_GOLD_TREASURY_BUFFER);
	GD_INT_CACHE(BALANCE_CS_WAR_COOLDOWN_RATE);
	GD_INT_CACHE(BALANCE_FOLLOWER_GROWTH_BONUS);
	GD_INT_CACHE(BALANCE_FOLLOWER_FOOD_BONUS);
	GD_INT_CACHE(RELIGION_FOUND_AUTO_SPREAD_PRESSURE);
	GD_INT_CACHE(FRIENDS_GOLD_FLAT_BONUS_AMOUNT_INDUSTRIAL);
	GD_INT_CACHE(FRIENDS_GOLD_FLAT_BONUS_AMOUNT_RENAISSANCE);
	GD_INT_CACHE(FRIENDS_GOLD_FLAT_BONUS_AMOUNT_MEDIEVAL);
	GD_INT_CACHE(FRIENDS_GOLD_FLAT_BONUS_AMOUNT_CLASSICAL);
	GD_INT_CACHE(FRIENDS_GOLD_FLAT_BONUS_AMOUNT_ANCIENT);
	GD_INT_CACHE(ALLIES_GOLD_FLAT_BONUS_AMOUNT_INDUSTRIAL);
	GD_INT_CACHE(ALLIES_GOLD_FLAT_BONUS_AMOUNT_RENAISSANCE);
	GD_INT_CACHE(ALLIES_GOLD_FLAT_BONUS_AMOUNT_MEDIEVAL);
	GD_INT_CACHE(ALLIES_GOLD_FLAT_BONUS_AMOUNT_CLASSICAL);
	GD_INT_CACHE(ALLIES_GOLD_FLAT_BONUS_AMOUNT_ANCIENT);
	GD_INT_CACHE(FRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_INDUSTRIAL);
	GD_INT_CACHE(FRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_RENAISSANCE);
	GD_INT_CACHE(FRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_MEDIEVAL);
	GD_INT_CACHE(FRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_CLASSICAL);
	GD_INT_CACHE(FRIENDS_SCIENCE_FLAT_BONUS_AMOUNT_ANCIENT);
	GD_INT_CACHE(ALLIES_SCIENCE_FLAT_BONUS_AMOUNT_INDUSTRIAL);
	GD_INT_CACHE(ALLIES_SCIENCE_FLAT_BONUS_AMOUNT_RENAISSANCE);
	GD_INT_CACHE(ALLIES_SCIENCE_FLAT_BONUS_AMOUNT_MEDIEVAL);
	GD_INT_CACHE(ALLIES_SCIENCE_FLAT_BONUS_AMOUNT_CLASSICAL);
	GD_INT_CACHE(ALLIES_SCIENCE_FLAT_BONUS_AMOUNT_ANCIENT);
	GD_INT_CACHE(BALANCE_MAX_CS_ALLY_STRENGTH);
	GD_INT_CACHE(BALANCE_CS_PLEDGE_TO_PROTECT_DEFENSE_BONUS);
	GD_INT_CACHE(BALANCE_CS_PLEDGE_TO_PROTECT_DEFENSE_BONUS_MAX);
	GD_INT_CACHE(BALANCE_CS_ALLIANCE_DEFENSE_BONUS);
	GD_INT_CACHE(UNIT_AUTO_EXTRA_AUTOMATIONS_DISABLED);
	GD_INT_CACHE(BALANCE_GPP_RATE_IN_CAPITAL_PER_MARRIAGE);
	GD_INT_CACHE(BALANCE_MARRIAGE_RESTING_POINT_INCREASE);
	GD_INT_CACHE(BALANCE_SPY_RESPAWN_TIMER);
	GD_INT_CACHE(BALANCE_SPY_TO_PLAYER_RATIO);
	GD_INT_CACHE(BALANCE_SPY_POINT_THRESHOLD_MAX);
	GD_INT_CACHE(BALANCE_SPY_POINT_THRESHOLD_MIN);
	GD_INT_CACHE(BALANCE_SPY_POINT_MAJOR_PLAYER_MULTIPLIER);
	GD_INT_CACHE(BALANCE_BASIC_ATTACK_ARMY_SIZE);
	GD_INT_CACHE(BALANCE_ARMY_NAVY_START_SIZE);
	GD_INT_CACHE(BALANCE_FAITH_PERCENTAGE_VALUE);
	GD_INT_CACHE(BALANCE_SCIENCE_PERCENTAGE_VALUE);
	GD_INT_CACHE(BALANCE_GA_PERCENTAGE_VALUE);
	GD_INT_CACHE(BALANCE_CULTURE_PERCENTAGE_VALUE);
	GD_INT_CACHE(BALANCE_WONDER_BEATEN_CONSOLATION_PRIZE);
	GD_INT_CACHE(BALANCE_SCIENCE_INFLUENCE_LEVEL_EXOTIC);
	GD_INT_CACHE(BALANCE_SCIENCE_INFLUENCE_LEVEL_FAMILIAR);
	GD_INT_CACHE(BALANCE_SCIENCE_INFLUENCE_LEVEL_POPULAR);
	GD_INT_CACHE(BALANCE_SCIENCE_INFLUENCE_LEVEL_INFLUENTIAL);
	GD_INT_CACHE(BALANCE_SCIENCE_INFLUENCE_LEVEL_DOMINANT);
	GD_INT_CACHE(BALANCE_CONQUEST_REDUCTION_BOOST);
	GD_INT_CACHE(BALANCE_GOLD_INFLUENCE_LEVEL_EXOTIC);
	GD_INT_CACHE(BALANCE_GOLD_INFLUENCE_LEVEL_FAMILIAR);
	GD_INT_CACHE(BALANCE_GOLD_INFLUENCE_LEVEL_POPULAR);
	GD_INT_CACHE(BALANCE_GOLD_INFLUENCE_LEVEL_INFLUENTIAL);
	GD_INT_CACHE(BALANCE_GOLD_INFLUENCE_LEVEL_DOMINANT);
	GD_INT_CACHE(BALANCE_GROWTH_INFLUENCE_LEVEL_EXOTIC);
	GD_INT_CACHE(BALANCE_GROWTH_INFLUENCE_LEVEL_FAMILIAR);
	GD_INT_CACHE(BALANCE_GROWTH_INFLUENCE_LEVEL_POPULAR);
	GD_INT_CACHE(BALANCE_GROWTH_INFLUENCE_LEVEL_INFLUENTIAL);
	GD_INT_CACHE(BALANCE_GROWTH_INFLUENCE_LEVEL_DOMINANT);
	GD_INT_CACHE(BALANCE_INFLUENCE_BOOST_PROTECTION_MINOR);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_FRIENDLY);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_HOSTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_GOLD_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_GOLD_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_SCIENCE_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_CULTURE_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_CULTURE_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_CULTURE_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_FAITH_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_FAITH_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_GAP_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_GAP_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_GAP_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_FOOD_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_FOOD_MERCANTILE);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_FOOD_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_PRODUCTION_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_TOURISM_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_TOURISM_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_TOURISM_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_TOURISM_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_GPP_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_GPP_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_GPP_IRRATIONAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_GPP_GLOBAL_RELIGIOUS);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_GPP_GLOBAL_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_GPP_GLOBAL_NEUTRAL);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_GENERAL_POINTS_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_GENERAL_POINTS_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_ADMIRAL_POINTS_MARITIME);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_ADMIRAL_POINTS_CULTURED);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_EXPERIENCE_MILITARISTIC);
	GD_INT_CACHE(MINOR_CIV_QUEST_REWARD_EXPERIENCE_RELIGIOUS);
	GD_INT_CACHE(BALANCE_MOD_POLICY_BRANCHES_NEEDED_IDEOLOGY);
	GD_INT_CACHE(BALANCE_MOD_POLICIES_NEEDED_IDEOLOGY);
	GD_INT_CACHE(BALANCE_MINOR_PROTECTION_MINIMUM_DURATION);
	GD_INT_CACHE(BALANCE_SCOUT_XP_BASE);
	GD_INT_CACHE(BALANCE_SCOUT_XP_RANDOM_VALUE);
	GD_INT_CACHE(BALANCE_CORE_WORLD_WONDER_SAME_ERA_COST_MODIFIER);
	GD_INT_CACHE(BALANCE_CORE_WORLD_WONDER_PREVIOUS_ERA_COST_MODIFIER);
	GD_INT_CACHE(BALANCE_CORE_WORLD_WONDER_SECOND_PREVIOUS_ERA_COST_MODIFIER);
	GD_INT_CACHE(BALANCE_CORE_WORLD_WONDER_EARLIER_ERA_COST_MODIFIER);
	GD_INT_CACHE(GWAM_THRESHOLD_DECREASE);
	GD_INT_CACHE(BALANCE_BUILDING_INVESTMENT_BASELINE);
	GD_INT_CACHE(BALANCE_UNIT_INVESTMENT_BASELINE);
	GD_INT_CACHE(OPEN_BORDERS_MODIFIER_TRADE_GOLD);
	GD_INT_CACHE(BALANCE_CORE_PRODUCTION_DESERT_IMPROVEMENT);
	GD_INT_CACHE(COMBAT_CAPTURE_HEALTH);
	GD_INT_CACHE(COMBAT_CAPTURE_MIN_CHANCE);
	GD_INT_CACHE(COMBAT_CAPTURE_MAX_CHANCE);
	GD_INT_CACHE(COMBAT_CAPTURE_RATIO_MULTIPLIER);
	GD_INT_CACHE(RELIGION_MIN_FAITH_FIRST_PANTHEON);
	GD_INT_CACHE(RELIGION_MIN_FAITH_FIRST_PROPHET);
	GD_INT_CACHE(RELIGION_MIN_FAITH_FIRST_GREAT_PERSON);
	GD_INT_CACHE(RELIGION_GAME_FAITH_DELTA_NEXT_PANTHEON);
	GD_INT_CACHE(RELIGION_MIN_FAITH_SECOND_PROPHET);
	GD_INT_CACHE(RELIGION_FAITH_DELTA_NEXT_PROPHET);
	GD_INT_CACHE(RELIGION_FAITH_DELTA_NEXT_GREAT_PERSON);
	GD_INT_CACHE(RELIGION_BASE_CHANCE_PROPHET_SPAWN);
	GD_INT_CACHE(RELIGION_ATHEISM_PRESSURE_PER_POP);
	GD_INT_CACHE(RELIGION_INITIAL_FOUNDING_CITY_PRESSURE);
	GD_INT_CACHE(RELIGION_PER_TURN_FOUNDING_CITY_PRESSURE);
	GD_INT_CACHE(RELIGION_MISSIONARY_PRESSURE_MULTIPLIER);
	GD_INT_CACHE(RELIGION_ADJACENT_CITY_DISTANCE);
	GD_INT_CACHE(RELIGION_MAXIMUM_FIXED_AMOUNT);
	GD_INT_CACHE(RELIGION_MAXIMUM_PER_PLAYER_DIVISOR);
	GD_INT_CACHE(RELIGION_MAXIMUM_CAP);
	GD_INT_CACHE(ESPIONAGE_GATHERING_INTEL_COST_PERCENT);
	GD_INT_CACHE(ESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT);
	GD_INT_CACHE(ESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT);
	GD_INT_CACHE(ESPIONAGE_TURNS_BETWEEN_CITY_STATE_ELECTIONS);
	GD_INT_CACHE(ESPIONAGE_INFLUENCE_GAINED_FOR_RIGGED_ELECTION);
	GD_INT_CACHE(ESPIONAGE_INFLUENCE_LOST_FOR_RIGGED_ELECTION);
	GD_INT_CACHE(ESPIONAGE_SURVEILLANCE_SIGHT_RANGE);
	GD_INT_CACHE(ESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP);
	GD_INT_CACHE(ESPIONAGE_COUP_MULTIPLY_CONSTANT);
	GD_INT_CACHE(ESPIONAGE_CONSECUTIVE_RIGGING_INFLUENCE_MODIFIER);
	GD_INT_CACHE(ESPIONAGE_NP_BASE);
	GD_INT_CACHE(ESPIONAGE_NP_PER_SPY_RANK);
	GD_INT_CACHE(ESPIONAGE_NP_CULTURAL_INFLUENCE);
	GD_INT_CACHE(ESPIONAGE_NP_PER_TECHNOLOGY_BEHIND);
	GD_INT_CACHE(ESPIONAGE_NP_MAX_NUM_TECH);
	GD_INT_CACHE(ESPIONAGE_NP_REDUCTION_PER_SECURITY_POINT);
	GD_INT_CACHE(ESPIONAGE_MAX_NUM_SECURITY_POINTS);
	GD_INT_CACHE(ESPIONAGE_SECURITY_BASE);
	GD_INT_CACHE(ESPIONAGE_SECURITY_NOT_ALL_HAVE_SPIES);
	GD_INT_CACHE(ESPIONAGE_SECURITY_PREVIOUS_CITY_MISSIONS);
	GD_INT_CACHE(ESPIONAGE_SECURITY_PER_POPULATION);
	GD_INT_CACHE(ESPIONAGE_SECURITY_PER_POPULATION_BUILDING_SCALER);
	GD_INT_CACHE(ESPIONAGE_SECURITY_PER_TRADE_ROUTE);
	GD_INT_CACHE(ESPIONAGE_SECURITY_PER_EXCESS_UNHAPPINESS);
	GD_INT_CACHE(ESPIONAGE_SPY_EXPERIENCE_DENOMINATOR);
	GD_INT_CACHE(ESPIONAGE_XP_PER_TURN_COUNTERSPY);
	GD_INT_CACHE(ESPIONAGE_XP_PER_TURN_DIPLOMAT);
	GD_INT_CACHE(ESPIONAGE_XP_PER_TURN_OFFENSIVE);
	GD_INT_CACHE(ESPIONAGE_XP_PER_TURN_CITYSTATE);
	GD_INT_CACHE(ESPIONAGE_XP_RIGGING_SUCCESS);
	GD_INT_CACHE(ESPIONAGE_XP_UNCOVER_INTRIGUE);
	GD_INT_CACHE(ESPIONAGE_SPY_XP_MISSION_SUCCESS_PERCENT);
	GD_INT_CACHE(ESPIONAGE_COUNTERSPY_CHANGE_FOCUS_COOLDOWN);
	GD_INT_CACHE(INTERNATIONAL_TRADE_BASE);
	GD_INT_CACHE(INTERNATIONAL_TRADE_EXCLUSIVE_CONNECTION);
	GD_INT_CACHE(INTERNATIONAL_TRADE_CITY_GPT_DIVISOR);
	GD_INT_CACHE(PILLAGE_HEAL_AMOUNT);
	GD_INT_CACHE(CITY_CONNECTIONS_CONNECT_TO_CAPITAL);
	GD_INT_CACHE(BASE_CULTURE_PER_GREAT_WORK);
	GD_INT_CACHE(BASE_TOURISM_PER_GREAT_WORK);
	GD_INT_CACHE(TOURISM_MODIFIER_SHARED_RELIGION);
	GD_INT_CACHE(TOURISM_MODIFIER_SHARED_RELIGION_MAX);
	GD_INT_CACHE(TOURISM_MODIFIER_SHARED_RELIGION_TYPE);
	GD_INT_CACHE(TOURISM_MODIFIER_TRADE_ROUTE);
	GD_INT_CACHE(TOURISM_MODIFIER_OPEN_BORDERS);
	GD_INT_CACHE(TOURISM_MODIFIER_DIFFERENT_IDEOLOGIES);
	GD_INT_CACHE(TOURISM_MODIFIER_DIPLOMAT);
	GD_INT_CACHE(MINIMUM_TOURISM_BLAST_STRENGTH);
	GD_INT_CACHE(CULTURE_LEVEL_EXOTIC);
	GD_INT_CACHE(CULTURE_LEVEL_FAMILIAR);
	GD_INT_CACHE(CULTURE_LEVEL_POPULAR);
	GD_INT_CACHE(CULTURE_LEVEL_INFLUENTIAL);
	GD_INT_CACHE(CULTURE_LEVEL_DOMINANT);
	GD_INT_CACHE(IDEOLOGY_PERCENT_CLEAR_VICTORY_PREF);
	GD_INT_CACHE(IDEOLOGY_SCORE_GRAND_STRATS);
	GD_INT_CACHE(IDEOLOGY_SCORE_HAPPINESS);
	GD_INT_CACHE(IDEOLOGY_SCORE_PER_FREE_TENET);
	GD_INT_CACHE(IDEOLOGY_SCORE_HOSTILE);
	GD_INT_CACHE(IDEOLOGY_SCORE_GUARDED);
	GD_INT_CACHE(IDEOLOGY_SCORE_AFRAID);
	GD_INT_CACHE(IDEOLOGY_SCORE_FRIENDLY);
	GD_INT_CACHE(MIN_DIG_SITES_PER_MAJOR_CIV);
	GD_INT_CACHE(MAX_DIG_SITES_PER_MAJOR_CIV);
	GD_INT_CACHE(PERCENT_SITES_HIDDEN);
	GD_INT_CACHE(PERCENT_HIDDEN_SITES_WRITING);
	GD_INT_CACHE(SAPPED_CITY_ATTACK_MODIFIER);
	GD_INT_CACHE(BLOCKADED_CITY_ATTACK_MODIFIER);
	GD_INT_CACHE(EXOTIC_GOODS_GOLD_MIN);
	GD_INT_CACHE(EXOTIC_GOODS_GOLD_MAX);
	GD_INT_CACHE(EXOTIC_GOODS_XP_MIN);
	GD_INT_CACHE(EXOTIC_GOODS_XP_MAX);
	GD_INT_CACHE(TEMPORARY_CULTURE_BOOST_MOD);
	GD_INT_CACHE(TEMPORARY_TOURISM_BOOST_MOD);
	GD_INT_CACHE(LEAGUE_SESSION_INTERVAL_BASE_TURNS);
	GD_INT_CACHE(LEAGUE_SESSION_SOON_WARNING_TURNS);
	GD_INT_CACHE(LEAGUE_MEMBER_PROPOSALS_BASE);
	GD_INT_CACHE(LEAGUE_MEMBER_VOTES_BASE);
	GD_INT_CACHE(LEAGUE_PROPOSERS_PER_SESSION);
	GD_INT_CACHE(LEAGUE_NUM_LEADERS_FOR_EXTRA_VOTES);
	GD_INT_CACHE(LEAGUE_PROJECT_PROGRESS_PERCENT_WARNING);
	GD_INT_CACHE(HELP_REQUEST_TURN_LIMIT_MIN);
	GD_INT_CACHE(HELP_REQUEST_TURN_LIMIT_RAND);
	GD_INT_CACHE(SHARE_OPINION_TURN_BUFFER);
	GD_INT_CACHE(VASSAL_TOURISM_MODIFIER);
	GD_INT_CACHE(VASSALAGE_VASSAL_TAX_PERCENT_MINIMUM);
	GD_INT_CACHE(VASSALAGE_VASSAL_TAX_PERCENT_MAXIMUM);
	GD_INT_CACHE(VASSALAGE_VASSAL_UNIT_MAINT_COST_PERCENT);
	GD_INT_CACHE(VASSAL_SCORE_PERCENT);
	GD_INT_CACHE(VASSAL_HAPPINESS_PERCENT);
	GD_INT_CACHE(VASSAL_PRESSURE_PERCENT);
	GD_INT_CACHE(VASSALAGE_FREE_YIELD_FROM_VASSAL_PERCENT);
	GD_INT_CACHE(VASSALAGE_VASSAL_LOST_CITIES_THRESHOLD);
	GD_INT_CACHE(VASSALAGE_VASSAL_POPULATION_THRESHOLD);
	GD_INT_CACHE(VASSALAGE_VASSAL_MASTER_CITY_PERCENT_THRESHOLD);
	GD_INT_CACHE(VASSALAGE_VASSAL_MASTER_POP_PERCENT_THRESHOLD);
	GD_INT_CACHE(VASSALAGE_CAPITULATE_BASE_THRESHOLD);
	GD_INT_CACHE(VASSALAGE_LIBERATE_BASE_THRESHOLD);
	GD_INT_CACHE(VASSALAGE_TREATMENT_THRESHOLD_DISAGREE);
	GD_INT_CACHE(VASSALAGE_TREATMENT_THRESHOLD_MISTREATED);
	GD_INT_CACHE(VASSALAGE_TREATMENT_THRESHOLD_UNHAPPY);
	GD_INT_CACHE(VASSALAGE_TREATMENT_THRESHOLD_ENSLAVED);
	GD_INT_CACHE(VICTORY_DOMINATION_CONTROL_PERCENT);

	// -- floats -- //
	GD_FLOAT_CACHE(AI_STRATEGY_NEED_IMPROVEMENT_CITY_RATIO);
	GD_FLOAT_CACHE(AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER);
	GD_FLOAT_CACHE(AI_CITYSTRATEGY_YIELD_DEFICIENT_FOOD);
	GD_FLOAT_CACHE(AI_CITYSTRATEGY_YIELD_DEFICIENT_PRODUCTION);
	GD_FLOAT_CACHE(AI_CITYSTRATEGY_YIELD_DEFICIENT_GOLD);
	GD_FLOAT_CACHE(AI_CITYSTRATEGY_YIELD_DEFICIENT_SCIENCE);
	GD_FLOAT_CACHE(AI_CITYSTRATEGY_YIELD_DEFICIENT_CULTURE);
	GD_FLOAT_CACHE(AI_CITYSTRATEGY_YIELD_DEFICIENT_FAITH);
	GD_FLOAT_CACHE(UNHAPPINESS_PER_POPULATION_FLOAT);
	GD_FLOAT_CACHE(UNHAPPINESS_PER_OCCUPIED_POPULATION);
	GD_FLOAT_CACHE(GLOBAL_GROWTH_PENALTY_PER_UNHAPPY);
	GD_FLOAT_CACHE(GLOBAL_SETTLER_PRODUCTION_PENALTY_PER_UNHAPPY);
	GD_FLOAT_CACHE(UNIT_UPGRADE_COST_MULTIPLIER_PER_ERA);
	GD_FLOAT_CACHE(UNIT_UPGRADE_COST_EXPONENT);
	GD_FLOAT_CACHE(UNHAPPINESS_PER_RELIGIOUS_MINORITY_POP);
	GD_FLOAT_CACHE(UNHAPPINESS_PER_STARVING_POP);
	GD_FLOAT_CACHE(UNHAPPINESS_PER_PILLAGED_TILE);
	GD_FLOAT_CACHE(UNHAPPINESS_PER_ISOLATED_POP);
	GD_FLOAT_CACHE(BALANCE_CORE_CORP_OFFICE_FRANCHISE_CONVERSION);
	GD_FLOAT_CACHE(BALANCE_CORE_CORP_OFFICE_TR_CONVERSION);
	GD_FLOAT_CACHE(DIPLO_VICTORY_CIV_DELEGATES_COEFFICIENT);
	GD_FLOAT_CACHE(DIPLO_VICTORY_CIV_DELEGATES_CONSTANT);
	GD_FLOAT_CACHE(DIPLO_VICTORY_CS_DELEGATES_COEFFICIENT);
	GD_FLOAT_CACHE(DIPLO_VICTORY_CS_DELEGATES_CONSTANT);
	GD_FLOAT_CACHE(AI_PRODUCTION_WEIGHT_BASE_MOD);
	GD_FLOAT_CACHE(AI_PRODUCTION_WEIGHT_MOD_PER_TURN_LEFT);
	GD_FLOAT_CACHE(AI_RESEARCH_WEIGHT_BASE_MOD);
	GD_FLOAT_CACHE(AI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT);
	GD_FLOAT_CACHE(HURRY_GOLD_PRODUCTION_EXPONENT);
	GD_FLOAT_CACHE(CITY_ZOOM_LEVEL_1);
	GD_FLOAT_CACHE(CITY_ZOOM_LEVEL_2);
	GD_FLOAT_CACHE(CITY_ZOOM_LEVEL_3);
	GD_FLOAT_CACHE(CITY_ZOOM_OFFSET);
	GD_FLOAT_CACHE(CULTURE_COST_LATER_PLOT_EXPONENT);
	GD_FLOAT_CACHE(POST_COMBAT_TEXT_DELAY);
	GD_FLOAT_CACHE(FLAVOR_STANDARD_LOG10_TILES_PER_PLAYER);
	GD_FLOAT_CACHE(AI_STRATEGY_DEFEND_MY_LANDS_UNITS_PER_CITY);
	GD_FLOAT_CACHE(GOLD_GIFT_FRIENDSHIP_EXPONENT);
	GD_FLOAT_CACHE(GOLD_GIFT_FRIENDSHIP_DIVISOR);
	GD_FLOAT_CACHE(CITY_GROWTH_MULTIPLIER);
	GD_FLOAT_CACHE(CITY_GROWTH_EXPONENT);
	GD_FLOAT_CACHE(POLICY_COST_EXPONENT);
	GD_FLOAT_CACHE(POLICY_COST_EXTRA_VALUE);
	GD_FLOAT_CACHE(CITY_STRENGTH_TECH_BASE);
	GD_FLOAT_CACHE(CITY_STRENGTH_TECH_EXPONENT);
	GD_FLOAT_CACHE(LEAGUE_PROJECT_REWARD_TIER_1_THRESHOLD);
	GD_FLOAT_CACHE(LEAGUE_PROJECT_REWARD_TIER_2_THRESHOLD);
	GD_FLOAT_CACHE(OPINION_WEIGHT_VASSAL_TAX_EXPONENT);
	GD_FLOAT_CACHE(TECH_COST_ERA_EXPONENT);
	GD_FLOAT_CACHE(VASSALAGE_VASSAL_CITY_POP_EXPONENT);
	GD_FLOAT_CACHE(MINOR_INFLUENCE_SCALING_DECAY_EXPONENT);
	GD_FLOAT_CACHE(APPROACH_SHIFT_PERCENT);
	GD_FLOAT_CACHE(DISTRESS_MEDIAN_RATE_CHANGE);
	GD_FLOAT_CACHE(POVERTY_MEDIAN_RATE_CHANGE);
	GD_FLOAT_CACHE(ILLITERACY_MEDIAN_RATE_CHANGE);
	GD_FLOAT_CACHE(BOREDOM_MEDIAN_RATE_CHANGE);

	// -- post defines -- //
	GD_INT_CACHE(LAND_TERRAIN);
	GD_INT_CACHE(DEEP_WATER_TERRAIN);
	GD_INT_CACHE(SHALLOW_WATER_TERRAIN);
	GD_INT_CACHE(RUINS_IMPROVEMENT);
	GD_INT_CACHE(NUKE_FEATURE);
	GD_INT_CACHE(ARTIFACT_RESOURCE);
	GD_INT_CACHE(HIDDEN_ARTIFACT_RESOURCE);
	GD_INT_CACHE(CAPITAL_BUILDINGCLASS);
	GD_INT_CACHE(WALLS_BUILDINGCLASS);
	GD_INT_CACHE(DEFAULT_SPECIALIST);
	GD_INT_CACHE(NUKE_TRIGGER_PROJECT);
	GD_INT_CACHE(SPACE_RACE_TRIGGER_PROJECT);
	GD_INT_CACHE(SPACESHIP_CAPSULE);
	GD_INT_CACHE(SPACESHIP_BOOSTER);
	GD_INT_CACHE(SPACESHIP_STASIS);
	GD_INT_CACHE(SPACESHIP_ENGINE);
	GD_INT_CACHE(INITIAL_CITY_ROUTE_TYPE);
	GD_INT_CACHE(AI_HANDICAP);
	GD_INT_CACHE(MULTIPLAYER_HANDICAP);
	GD_INT_CACHE(STANDARD_HANDICAP);
	GD_INT_CACHE(STANDARD_GAMESPEED);
	GD_INT_CACHE(STANDARD_ERA);
	GD_INT_CACHE(LAST_EMBARK_ART_ERA);
	GD_INT_CACHE(LAST_UNIT_ART_ERA);
	GD_INT_CACHE(LAST_BRIDGE_ART_ERA);
	GD_INT_CACHE(BARBARIAN_HANDICAP);
	GD_INT_CACHE(BARBARIAN_CIVILIZATION);
	GD_INT_CACHE(BARBARIAN_LEADER);
	GD_INT_CACHE(MINOR_CIV_HANDICAP);
	GD_INT_CACHE(MINOR_CIVILIZATION);
	GD_INT_CACHE(PROMOTION_EMBARKATION);
	GD_INT_CACHE(PROMOTION_DEFENSIVE_EMBARKATION);
	GD_INT_CACHE(PROMOTION_ALLWATER_EMBARKATION);
	GD_INT_CACHE(PROMOTION_DEEPWATER_EMBARKATION);
	GD_INT_CACHE(PROMOTION_DEFENSIVE_DEEPWATER_EMBARKATION);
	GD_INT_CACHE(PROMOTION_FLAGSHIP);
	GD_INT_CACHE(PROMOTION_OCEAN_IMPASSABLE_UNTIL_ASTRONOMY);
	GD_INT_CACHE(PROMOTION_OCEAN_IMPASSABLE);
	GD_INT_CACHE(PROMOTION_ONLY_DEFENSIVE);
	GD_INT_CACHE(PROMOTION_UNWELCOME_EVANGELIST);
	GD_INT_CACHE(BARBARIAN_CAMP_IMPROVEMENT);
	GD_INT_CACHE(EMBASSY_IMPROVEMENT);
	GD_INT_CACHE(PROMOTION_GOODY_HUT_PICKER);
	GD_INT_CACHE(POLICY_BRANCH_FREEDOM);
	GD_INT_CACHE(POLICY_BRANCH_AUTOCRACY);
	GD_INT_CACHE(POLICY_BRANCH_ORDER);
	GD_INT_CACHE(POLICY_BRANCH_HERITAGE);
	GD_INT_CACHE(RELIGION_LAST_FOUND_ERA);
	GD_INT_CACHE(RELIGION_GP_FAITH_PURCHASE_ERA);
	GD_INT_CACHE(IDEOLOGY_START_ERA);
	GD_INT_CACHE(IDEOLOGY_PREREQ_ERA);
	GD_INT_CACHE(ANCIENT_ERA);
	GD_INT_CACHE(MEDIEVAL_ERA);
	GD_INT_CACHE(INDUSTRIAL_ERA);
	GD_INT_CACHE(TOURISM_START_TECH);
	GD_INT_CACHE(TOURISM_START_ERA);
	GD_INT_CACHE(JUGGERNAUT_PROMOTION);
	GD_INT_CACHE(MARCH_PROMOTION);
	GD_INT_CACHE(MARCH_SKIRMISHER_PROMOTION);
	GD_INT_CACHE(MORALE_PROMOTION);
	GD_INT_CACHE(INQUISITION_EFFECTIVENESS);
	GD_INT_CACHE(INQUISITOR_CONVERSION_REDUCTION_FACTOR);

	////////////// END DEFINES //////////////////
}

bool CvGlobals::getDatabaseValue(const char* szName, int& iValue, bool bReportErrors)
{
	bool bSuccess = false;
	if(m_kGlobalDefinesLookup.Bind(1, szName))
	{
		if(m_kGlobalDefinesLookup.Step())
		{
			iValue = m_kGlobalDefinesLookup.GetInt(0);
			bSuccess = true;
		}
	}

	m_kGlobalDefinesLookup.Reset();

	if(bReportErrors)
	{
		CvAssertFmt(bSuccess, "Integer Define Value not found for %s", szName);
	}

	return bSuccess;
}

bool CvGlobals::getDatabaseValue(const char* szName, float& fValue, bool bReportErrors)
{
	bool bSuccess = false;
	if(m_kGlobalDefinesLookup.Bind(1, szName))
	{
		if(m_kGlobalDefinesLookup.Step())
		{
			fValue = m_kGlobalDefinesLookup.GetFloat(0);
			bSuccess = true;
		}
	}

	m_kGlobalDefinesLookup.Reset();

	if(bReportErrors)
	{
		CvAssertFmt(bSuccess, "Float Define Value not found for %s", szName);
	}

	return bSuccess;
}

bool CvGlobals::getDatabaseValue(const char* szName, CvString& strValue, bool bReportErrors)
{
	bool bSuccess = false;
	if(m_kGlobalDefinesLookup.Bind(1, szName))
	{
		if(m_kGlobalDefinesLookup.Step())
		{
			strValue = m_kGlobalDefinesLookup.GetText(0);
			bSuccess = true;
		}
	}

	m_kGlobalDefinesLookup.Reset();

	if(bReportErrors)
	{
		CvAssertFmt(bSuccess, "String Define Value not found for %s", szName);
	}

	return bSuccess;
}

int CvGlobals::getNUM_YIELD_TYPES() const
{
	return NUM_YIELD_TYPES;
}

int CvGlobals::getNUM_CONTROL_TYPES() const
{
	return NUM_CONTROL_TYPES;
}

void CvGlobals::deleteInfoArrays()
{
	deleteInfoArray(m_paBuildingClassInfo);

	deleteInfoArray(m_paLeaderHeadInfo);
	deleteInfoArray(m_paCivilizationInfo);
	deleteInfoArray(m_paMinorCivInfo);

	deleteInfoArray(m_paVoteSourceInfo);
#if defined(MOD_BALANCE_CORE_EVENTS)
	deleteInfoArray(m_paEventInfo);
	deleteInfoArray(m_paEventChoiceInfo);
	deleteInfoArray(m_paCityEventInfo);
	deleteInfoArray(m_paCityEventChoiceInfo);

	deleteInfoArray(m_paEventLinkingInfo);
	deleteInfoArray(m_paEventChoiceLinkingInfo);
	deleteInfoArray(m_paCityEventLinkingInfo);
	deleteInfoArray(m_paCityEventChoiceLinkingInfo);

	deleteInfoArray(m_paContractInfo);
#endif
	deleteInfoArray(m_paHandicapInfo);
	deleteInfoArray(m_paGameSpeedInfo);
#if defined(MOD_EVENTS_DIPLO_MODIFIERS)
	deleteInfoArray(m_paDiploModifierInfo);
#endif
	deleteInfoArray(m_paTurnTimerInfo);
	deleteInfoArray(m_paVictoryInfo);
	deleteInfoArray(m_paSmallAwardInfo);
	deleteInfoArray(m_paHurryInfo);
	deleteInfoArray(m_paProcessInfo);
	deleteInfoArray(m_paVoteInfo);

	deleteInfoArray(m_paColorInfo);
	deleteInfoArray(m_paPlayerColorInfo);
	deleteInfoArray(m_paInterfaceModeInfo);

	deleteInfoArray(m_paRouteInfo);

	deleteInfoArray(m_aEraInfo);

	deleteInfoArray(m_paBuildInfo);
	deleteInfoArray(m_paUnitClassInfo);
	deleteInfoArray(m_paSpecialUnitInfo);
	deleteInfoArray(m_paSpecialistInfo);
	deleteInfoArray(m_paActionInfo);
	deleteInfoArray(m_paMissionInfo);
	deleteInfoArray(m_paControlInfo);
	deleteInfoArray(m_paCommandInfo);
	deleteInfoArray(m_paAutomateInfo);

	deleteInfoArray(m_paUnitCombatClassInfo);
	deleteInfoArray(m_paUnitAIInfos);
	deleteInfoArray(m_paGameOptionInfos);
	deleteInfoArray(m_paMPOptionInfos);
	deleteInfoArray(m_paPlayerOptionInfos);

	deleteInfoArray(m_paYieldInfo);
	deleteInfoArray(m_paPlotInfo);
	deleteInfoArray(m_paTerrainInfo);
	deleteInfoArray(m_paFeatureInfo);
	deleteInfoArray(m_paResourceClassInfo);
	deleteInfoArray(m_paResourceInfo);
	deleteInfoArray(m_paUnitDomainInfo);

	SAFE_DELETE_ARRAY(GC.getFootstepAudioTags());

	deleteInfoArray(m_paEntityEventInfo);
}

//
// Global Infos Hash Map
//
const CvGlobals::InfosMap& CvGlobals::GetInfoTypes() const
{
	return m_infosMap;
}
//------------------------------------------------------------------------------
int CvGlobals::getInfoTypeForString(const char* szType, bool hideAssert) const
{
	if(!hideAssert)
	{
		CvAssertMsg(szType, "null info type string");
	}

	if(szType == NULL)
		return -1;


	InfosMap::const_iterator it = m_infosMap.find(szType);
	if(it!=m_infosMap.end())
	{
		return it->second;
	}

	if(!hideAssert)
	{
		//
		// *** EFB: Need to restore this logging??? ***
		//
		CvString strError;
		strError.Format("Info type %s not found.", szType);
		CvAssertMsg(strcmp(szType, "NONE")==0 || strcmp(szType, "")==0, strError.c_str());
//		gDLL->logMsg("xml.log", szError);
	}

	return -1;
}

void CvGlobals::setInfoTypeFromString(const char* szType, int idx)
{
	CvAssertMsg(szType, "null info type string");
	uint uiHash = FString::Hash(szType);
#ifdef _DEBUG
	InfosMap::const_iterator it = m_infosMap.find(szType);
	int iExisting = (it!=m_infosMap.end()) ? it->second : -1;
	CvAssertMsg(iExisting==-1 || iExisting==idx || strcmp(szType ? szType : "", "ERROR")==0, CvString::format("xml info type entry %s already exists", szType).c_str());

	InfosHashMap::const_iterator ith = m_infosHashMap.find(uiHash);
	iExisting = (ith!=m_infosHashMap.end()) ? ith->second : -1;
	CvAssertMsg(iExisting==-1 || iExisting==idx || strcmp(szType ? szType : "", "ERROR")==0, CvString::format("xml info type entry %s already exists", szType).c_str());
#endif
	m_infosMap[szType] = idx;
	m_infosHashMap[uiHash] = idx;
}

void CvGlobals::infoTypeFromStringReset()
{
	m_infosMap.clear();
	m_infosHashMap.clear();
}

//------------------------------------------------------------------------------
int CvGlobals::getInfoTypeForHash(uint uiHash, bool hideAssert) const
{

	InfosHashMap::const_iterator it = m_infosHashMap.find(uiHash);
	if(it!=m_infosHashMap.end())
	{
		return it->second;
	}

	if(!hideAssert)
	{
		CvAssertMsg(uiHash==0, "Could not find resource hash");
	}

	return -1;
}

int CvGlobals::getNumDirections() const
{
	return NUM_DIRECTION_TYPES;
}
int CvGlobals::getNumGameOptions() const
{
	return NUM_GAMEOPTION_TYPES;
}
int CvGlobals::getNumMPOptions() const
{
	return NUM_MPOPTION_TYPES;
}
int CvGlobals::getNumSpecialOptions() const
{
	return NUM_SPECIALOPTION_TYPES;
}
int CvGlobals::getNumCommandInfos() const
{
	return NUM_COMMAND_TYPES;
}
int CvGlobals::getNumControlInfos() const
{
	return NUM_CONTROL_TYPES;
}
int CvGlobals::getNumPlayerOptionInfos() const
{
	return m_paPlayerOptionInfos.size();
}


//------------------------------------------------------------------------------
void CvGlobals::SetGameDatabase(Database::Connection* pGameDatabase)
{
	if(m_pGameDatabase != pGameDatabase)
	{
		if(m_pGameDatabase)
			m_kGlobalDefinesLookup.Release();

		m_pGameDatabase = pGameDatabase;
	}
}
//------------------------------------------------------------------------------

bool CvGlobals::IsGraphicsInitialized() const
{
	return m_bGraphicsInitialized;
}
void CvGlobals::SetGraphicsInitialized(bool bVal)
{
	m_bGraphicsInitialized = bVal;
}

void CvGlobals::setOutOfSyncDebuggingEnabled(bool isEnabled)
{
	m_bOutOfSyncDebuggingEnabled = isEnabled;
	FAutoArchive::EnableCallStacks(isEnabled);
}

bool CvGlobals::getOutOfSyncDebuggingEnabled() const
{
	return m_bOutOfSyncDebuggingEnabled;
}
