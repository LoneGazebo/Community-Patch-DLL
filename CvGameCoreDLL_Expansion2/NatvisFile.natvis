<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
	<Type Name="FAutoVariable&lt;*,*&gt;">
		<DisplayString>{{val = {m_value}}}</DisplayString>
	</Type>
	<Type Name="FAutoVariable&lt;std::vector&lt;*,*&gt;,*&gt;">
		<DisplayString>{{size = {m_value._Mylast - m_value._Myfirst}}}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>m_value._Mylast - m_value._Myfirst</Size>
				<ValuePointer>m_value._Myfirst</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="STacticalAssignment">
		<DisplayString>(u{iUnitID} {eAssignmentType} to p{iToPlotIndex} score: {iScore})</DisplayString>
	</Type>

	<Type Name="CvUnit">
		<DisplayString>(id {m_iID}, C{m_iBaseCombat}R{m_iBaseRangedCombat}, M{m_iMoves}, P{m_eOwner}, at {m_iX}:{m_iY})</DisplayString>
		<Expand>
			<Item Name="m_iID">m_iID</Item>
			<Item Name="m_eOwner">m_eOwner</Item>
			<Item Name="m_iX">m_iX</Item>
			<Item Name="m_iY">m_iY</Item>
			<Item Name="m_iDamage">m_iDamage</Item>
			<Item Name="m_iMoves">m_iMoves</Item>
			<Item Name="m_iBaseCombat">m_iBaseCombat</Item>
			<Item Name="m_iBaseRangedCombat">m_iBaseCombat</Item>
			<Item Name="m_iArmyId">m_iArmyId</Item>
		</Expand>
	</Type>

	<Type Name="CvCity">
		<DisplayString>(id {m_iID}, P{m_eOwner}, at {m_iX}:{m_iY})</DisplayString>
		<Expand>
			<Item Name="m_iID">m_iID</Item>
			<Item Name="m_eOwner">m_eOwner</Item>
			<Item Name="m_iX">m_iX</Item>
			<Item Name="m_iY">m_iY</Item>
		</Expand>
	</Type>

	<Type Name="CvPlot">
		<DisplayString Condition="m_ePlotType==PLOT_MOUNTAIN">({m_iX}:{m_iY}, index {m_iPlotIndex}, MOUNTAIN, owner {m_eOwner})</DisplayString>
		<DisplayString Condition="m_ePlotType==PLOT_HILLS">({m_iX}:{m_iY}, index {m_iPlotIndex}, HILLS, owner {m_eOwner})</DisplayString>
		<DisplayString Condition="m_ePlotType==PLOT_LAND">({m_iX}:{m_iY}, index {m_iPlotIndex}, FLAT, owner {m_eOwner})</DisplayString>
		<DisplayString Condition="m_ePlotType==PLOT_OCEAN">({m_iX}:{m_iY}, index {m_iPlotIndex}, WATER, owner {m_eOwner})</DisplayString>
		<DisplayString>({m_iX}:{m_iY}, index {m_iPlotIndex}, UNKNOWN, owner {m_eOwner})</DisplayString>
		<Expand>
			<Item Name="iX">m_iX</Item>
			<Item Name="iY">m_iY</Item>
			<Item Name="iPlotIndex">m_iPlotIndex</Item>
			<Item Name="eOwner">m_eOwner</Item>
		</Expand>
	</Type>

	<Type Name="CvPlayer">
		<DisplayString>id {m_eID}</DisplayString>
	</Type>
	
	<!-- stl types -->
	
	<Type Name="std::pair&lt;*&gt;">
		<DisplayString>({first}, {second})</DisplayString>
		<Expand>
			<Item Name="first">first</Item>
			<Item Name="second">second</Item>
		</Expand>
	</Type>

	<Type Name="std::tuple&lt;std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil&gt;">
		<DisplayString>()</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::tuple&lt;*,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil&gt;">
		<DisplayString>({_Myfirst._Val})</DisplayString>
		<Expand>
			<Item Name="[0]">_Myfirst._Val</Item>
		</Expand>
	</Type>

	<Type Name="std::tuple&lt;*,*,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil&gt;">
		<DisplayString>({_Myfirst._Val}, {((_Mybase *) this)->_Myfirst._Val})</DisplayString>
		<Expand>
			<Item Name="[0]">_Myfirst._Val</Item>
			<Item Name="[1]">((_Mybase *) this)->_Myfirst._Val</Item>
		</Expand>
	</Type>

	<Type Name="std::tuple&lt;*,*,*,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil&gt;">
		<DisplayString>({_Myfirst._Val}, {((_Mybase *) this)->_Myfirst._Val}, {((_Mybase::_Mybase *) this)->_Myfirst._Val})</DisplayString>
		<Expand>
			<Item Name="[0]">_Myfirst._Val</Item>
			<Item Name="[1]">((_Mybase *) this)->_Myfirst._Val</Item>
			<Item Name="[2]">((_Mybase::_Mybase *) this)->_Myfirst._Val</Item>
		</Expand>
	</Type>

	<Type Name="std::tuple&lt;*,*,*,*,std::_Nil,std::_Nil,std::_Nil,std::_Nil&gt;">
		<DisplayString>({_Myfirst._Val}, {((_Mybase *) this)->_Myfirst._Val}, {((_Mybase::_Mybase *) this)->_Myfirst._Val}, {((_Mybase::_Mybase::_Mybase *) this)->_Myfirst._Val})</DisplayString>
		<Expand>
			<Item Name="[0]">_Myfirst._Val</Item>
			<Item Name="[1]">((_Mybase *) this)->_Myfirst._Val</Item>
			<Item Name="[2]">((_Mybase::_Mybase *) this)->_Myfirst._Val</Item>
			<Item Name="[3]">((_Mybase::_Mybase::_Mybase *) this)->_Myfirst._Val</Item>
		</Expand>
	</Type>

	<Type Name="std::tuple&lt;*,*,*,*,*,std::_Nil,std::_Nil,std::_Nil&gt;">
		<DisplayString>({_Myfirst._Val}, {((_Mybase *) this)->_Myfirst._Val}, {((_Mybase::_Mybase *) this)->_Myfirst._Val}, {((_Mybase::_Mybase::_Mybase *) this)->_Myfirst._Val}, {((_Mybase::_Mybase::_Mybase::_Mybase *) this)->_Myfirst._Val})</DisplayString>
		<Expand>
			<Item Name="[0]">_Myfirst._Val</Item>
			<Item Name="[1]">((_Mybase *) this)->_Myfirst._Val</Item>
			<Item Name="[2]">((_Mybase::_Mybase *) this)->_Myfirst._Val</Item>
			<Item Name="[3]">((_Mybase::_Mybase::_Mybase *) this)->_Myfirst._Val</Item>
			<Item Name="[4]">((_Mybase::_Mybase::_Mybase::_Mybase *) this)->_Myfirst._Val</Item>
		</Expand>
	</Type>


	<Type Name="std::tr1::tuple&lt;std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil&gt;">
		<!-- VC10 -->
		<DisplayString>()</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::tr1::tuple&lt;*,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil&gt;">
		<!-- VC10 -->
		<DisplayString>({_Impl._Value})</DisplayString>
		<Expand>
			<Item Name="[0]">_Impl._Value</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::tuple&lt;*,*,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil&gt;">
		<!-- VC10 -->
		<DisplayString>({_Impl._Value}, {_Impl._Tail._Value})</DisplayString>
		<Expand>
			<Item Name="[0]">_Impl._Value</Item>
			<Item Name="[1]">_Impl._Tail._Value</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::tuple&lt;*,*,*,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil&gt;">
		<!-- VC10 -->
		<DisplayString>({_Impl._Value}, {_Impl._Tail._Value}, {_Impl._Tail._Tail._Value})</DisplayString>
		<Expand>
			<Item Name="[0]">_Impl._Value</Item>
			<Item Name="[1]">_Impl._Tail._Value</Item>
			<Item Name="[2]">_Impl._Tail._Tail._Value</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::tuple&lt;*,*,*,*,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil&gt;">
		<!-- VC10 -->
		<DisplayString>({_Impl._Value}, {_Impl._Tail._Value}, {_Impl._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Value})</DisplayString>
		<Expand>
			<Item Name="[0]">_Impl._Value</Item>
			<Item Name="[1]">_Impl._Tail._Value</Item>
			<Item Name="[2]">_Impl._Tail._Tail._Value</Item>
			<Item Name="[3]">_Impl._Tail._Tail._Tail._Value</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::tuple&lt;*,*,*,*,*,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil&gt;">
		<!-- VC10 -->
		<DisplayString>({_Impl._Value}, {_Impl._Tail._Value}, {_Impl._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Value})</DisplayString>
		<Expand>
			<Item Name="[0]">_Impl._Value</Item>
			<Item Name="[1]">_Impl._Tail._Value</Item>
			<Item Name="[2]">_Impl._Tail._Tail._Value</Item>
			<Item Name="[3]">_Impl._Tail._Tail._Tail._Value</Item>
			<Item Name="[4]">_Impl._Tail._Tail._Tail._Tail._Value</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::tuple&lt;*,*,*,*,*,*,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil&gt;">
		<!-- VC10 -->
		<DisplayString>({_Impl._Value}, {_Impl._Tail._Value}, {_Impl._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Tail._Value})</DisplayString>
		<Expand>
			<Item Name="[0]">_Impl._Value</Item>
			<Item Name="[1]">_Impl._Tail._Value</Item>
			<Item Name="[2]">_Impl._Tail._Tail._Value</Item>
			<Item Name="[3]">_Impl._Tail._Tail._Tail._Value</Item>
			<Item Name="[4]">_Impl._Tail._Tail._Tail._Tail._Value</Item>
			<Item Name="[5]">_Impl._Tail._Tail._Tail._Tail._Tail._Value</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::tuple&lt;*,*,*,*,*,*,*,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil&gt;">
		<!-- VC10 -->
		<DisplayString>({_Impl._Value}, {_Impl._Tail._Value}, {_Impl._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Value})</DisplayString>
		<Expand>
			<Item Name="[0]">_Impl._Value</Item>
			<Item Name="[1]">_Impl._Tail._Value</Item>
			<Item Name="[2]">_Impl._Tail._Tail._Value</Item>
			<Item Name="[3]">_Impl._Tail._Tail._Tail._Value</Item>
			<Item Name="[4]">_Impl._Tail._Tail._Tail._Tail._Value</Item>
			<Item Name="[5]">_Impl._Tail._Tail._Tail._Tail._Tail._Value</Item>
			<Item Name="[6]">_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Value</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::tuple&lt;*,*,*,*,*,*,*,*,std::tr1::_Nil,std::tr1::_Nil&gt;">
		<!-- VC10 -->
		<DisplayString>({_Impl._Value}, {_Impl._Tail._Value}, {_Impl._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Value})</DisplayString>
		<Expand>
			<Item Name="[0]">_Impl._Value</Item>
			<Item Name="[1]">_Impl._Tail._Value</Item>
			<Item Name="[2]">_Impl._Tail._Tail._Value</Item>
			<Item Name="[3]">_Impl._Tail._Tail._Tail._Value</Item>
			<Item Name="[4]">_Impl._Tail._Tail._Tail._Tail._Value</Item>
			<Item Name="[5]">_Impl._Tail._Tail._Tail._Tail._Tail._Value</Item>
			<Item Name="[6]">_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Value</Item>
			<Item Name="[7]">_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Value</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::tuple&lt;*,*,*,*,*,*,*,*,*,std::tr1::_Nil&gt;">
		<!-- VC10 -->
		<DisplayString>({_Impl._Value}, {_Impl._Tail._Value}, {_Impl._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Value})</DisplayString>
		<Expand>
			<Item Name="[0]">_Impl._Value</Item>
			<Item Name="[1]">_Impl._Tail._Value</Item>
			<Item Name="[2]">_Impl._Tail._Tail._Value</Item>
			<Item Name="[3]">_Impl._Tail._Tail._Tail._Value</Item>
			<Item Name="[4]">_Impl._Tail._Tail._Tail._Tail._Value</Item>
			<Item Name="[5]">_Impl._Tail._Tail._Tail._Tail._Tail._Value</Item>
			<Item Name="[6]">_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Value</Item>
			<Item Name="[7]">_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Value</Item>
			<Item Name="[8]">_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Value</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::tuple&lt;*,*,*,*,*,*,*,*,*,*&gt;">
		<!-- VC10 -->
		<DisplayString>({_Impl._Value}, {_Impl._Tail._Value}, {_Impl._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Value}, {_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Value})</DisplayString>
		<Expand>
			<Item Name="[0]">_Impl._Value</Item>
			<Item Name="[1]">_Impl._Tail._Value</Item>
			<Item Name="[2]">_Impl._Tail._Tail._Value</Item>
			<Item Name="[3]">_Impl._Tail._Tail._Tail._Value</Item>
			<Item Name="[4]">_Impl._Tail._Tail._Tail._Tail._Value</Item>
			<Item Name="[5]">_Impl._Tail._Tail._Tail._Tail._Tail._Value</Item>
			<Item Name="[6]">_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Value</Item>
			<Item Name="[7]">_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Value</Item>
			<Item Name="[8]">_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Value</Item>
			<Item Name="[9]">_Impl._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Value</Item>
		</Expand>
	</Type>


	<Type Name="std::bitset&lt;*&gt;">
		<DisplayString>{{ size={(size_t) _EEN_BITS} }}</DisplayString>
		<Expand>
			<IndexListItems>
				<Size>_EEN_BITS</Size>
				<ValueNode>(_Array[$i / _Bitsperword] &gt;&gt; ($i % _Bitsperword)) &amp; 1,d</ValueNode>
			</IndexListItems>
		</Expand>
	</Type>

	<Type Name="std::bitset&lt;*&gt;::reference">
		<DisplayString>{(_Pbitset-&gt;_Array[_Mypos / _Pbitset-&gt;_Bitsperword] &gt;&gt; (_Mypos % _Pbitset-&gt;_Bitsperword)) &amp; 1,d}</DisplayString>
		<Expand>
			<Item Name="[bitset]">_Pbitset</Item>
			<Item Name="[pos]">_Mypos</Item>
		</Expand>
	</Type>


	<Type Name="std::allocator&lt;*&gt;">
		<DisplayString>allocator</DisplayString>
		<Expand/>
	</Type>


	<Type Name="std::unique_ptr&lt;*&gt;">
		<DisplayString Condition="_Myptr == 0">empty</DisplayString>
		<DisplayString Condition="_Myptr != 0">unique_ptr {*_Myptr}</DisplayString>
		<Expand>
			<Item Condition="_Myptr != 0" Name="[ptr]">_Myptr</Item>
		</Expand>
	</Type>


	<Type Name="std::_Ref_count&lt;*&gt;">
		<AlternativeType Name="std::tr1::_Ref_count&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString>default</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::_Ref_count_del&lt;*&gt;">
		<AlternativeType Name="std::tr1::_Ref_count_del&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString>custom deleter</DisplayString>
		<Expand>
			<Item Name="[deleter]">_Dtor</Item>
		</Expand>
	</Type>

	<Type Name="std::_Ref_count_del_alloc&lt;*&gt;">
		<AlternativeType Name="std::tr1::_Ref_count_del_alloc&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString>custom deleter, custom allocator</DisplayString>
		<Expand>
			<Item Name="[deleter]">_Dtor</Item>
			<Item Name="[allocator]">_Myal</Item>
		</Expand>
	</Type>

	<Type Name="std::_Ref_count_obj&lt;*&gt;">
		<AlternativeType Name="std::tr1::_Ref_count_obj&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString>make_shared</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::_Ref_count_obj_alloc&lt;*&gt;">
		<AlternativeType Name="std::tr1::_Ref_count_obj_alloc&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString>allocate_shared</DisplayString>
		<Expand>
			<Item Name="[allocator]">_Myal</Item>
		</Expand>
	</Type>

	<Type Name="std::shared_ptr&lt;*&gt;">
		<AlternativeType Name="std::tr1::shared_ptr&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString Condition="_Ptr == 0">empty</DisplayString>
		<DisplayString Condition="(_Ptr != 0) &amp;&amp; (_Rep-&gt;_Uses == 1)   &amp;&amp; (_Rep-&gt;_Weaks == 1)"  >shared_ptr {*_Ptr} [{_Rep-&gt;_Uses} strong ref] [{*_Rep}]</DisplayString>
		<DisplayString Condition="(_Ptr != 0) &amp;&amp; (_Rep-&gt;_Uses == 1)   &amp;&amp; (_Rep-&gt;_Weaks == 2)"  >shared_ptr {*_Ptr} [{_Rep-&gt;_Uses} strong ref, {_Rep-&gt;_Weaks - 1} weak ref] [{*_Rep}]</DisplayString>
		<DisplayString Condition="(_Ptr != 0) &amp;&amp; (_Rep-&gt;_Uses == 1)   &amp;&amp; (_Rep-&gt;_Weaks &gt; 2)">shared_ptr {*_Ptr} [{_Rep-&gt;_Uses} strong ref, {_Rep-&gt;_Weaks - 1} weak refs] [{*_Rep}]</DisplayString>
		<DisplayString Condition="(_Ptr != 0) &amp;&amp; (_Rep-&gt;_Uses &gt; 1) &amp;&amp; (_Rep-&gt;_Weaks == 1)"  >shared_ptr {*_Ptr} [{_Rep-&gt;_Uses} strong refs] [{*_Rep}]</DisplayString>
		<DisplayString Condition="(_Ptr != 0) &amp;&amp; (_Rep-&gt;_Uses &gt; 1) &amp;&amp; (_Rep-&gt;_Weaks == 2)"  >shared_ptr {*_Ptr} [{_Rep-&gt;_Uses} strong refs, {_Rep-&gt;_Weaks - 1} weak ref] [{*_Rep}]</DisplayString>
		<DisplayString Condition="(_Ptr != 0) &amp;&amp; (_Rep-&gt;_Uses &gt; 1) &amp;&amp; (_Rep-&gt;_Weaks &gt; 2)">shared_ptr {*_Ptr} [{_Rep-&gt;_Uses} strong refs, {_Rep-&gt;_Weaks - 1} weak refs] [{*_Rep}]</DisplayString>
		<Expand>
			<Item Condition="_Ptr != 0" Name="[ptr]">_Ptr</Item>
			<Item Condition="_Ptr != 0" Name="[deleter and allocator]">*_Rep</Item>
		</Expand>
	</Type>

	<Type Name="std::weak_ptr&lt;*&gt;">
		<AlternativeType Name="std::tr1::weak_ptr&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString Condition="_Ptr == 0">empty</DisplayString>
		<DisplayString Condition="(_Ptr != 0) &amp;&amp; (_Rep-&gt;_Uses == 0)   &amp;&amp; (_Rep-&gt;_Weaks == 1)"  >expired [{_Rep-&gt;_Weaks} weak ref] [{*_Rep}]</DisplayString>
		<DisplayString Condition="(_Ptr != 0) &amp;&amp; (_Rep-&gt;_Uses == 0)   &amp;&amp; (_Rep-&gt;_Weaks &gt; 1)">expired [{_Rep-&gt;_Weaks} weak refs] [{*_Rep}]</DisplayString>
		<DisplayString Condition="(_Ptr != 0) &amp;&amp; (_Rep-&gt;_Uses == 1)   &amp;&amp; (_Rep-&gt;_Weaks == 2)"  >weak_ptr {*_Ptr} [{_Rep-&gt;_Uses} strong ref, {_Rep-&gt;_Weaks - 1} weak ref] [{*_Rep}]</DisplayString>
		<DisplayString Condition="(_Ptr != 0) &amp;&amp; (_Rep-&gt;_Uses == 1)   &amp;&amp; (_Rep-&gt;_Weaks &gt; 2)">weak_ptr {*_Ptr} [{_Rep-&gt;_Uses} strong ref, {_Rep-&gt;_Weaks - 1} weak refs] [{*_Rep}]</DisplayString>
		<DisplayString Condition="(_Ptr != 0) &amp;&amp; (_Rep-&gt;_Uses &gt; 1) &amp;&amp; (_Rep-&gt;_Weaks == 2)"  >weak_ptr {*_Ptr} [{_Rep-&gt;_Uses} strong refs, {_Rep-&gt;_Weaks - 1} weak ref] [{*_Rep}]</DisplayString>
		<DisplayString Condition="(_Ptr != 0) &amp;&amp; (_Rep-&gt;_Uses &gt; 1) &amp;&amp; (_Rep-&gt;_Weaks &gt; 2)">weak_ptr {*_Ptr} [{_Rep-&gt;_Uses} strong refs, {_Rep-&gt;_Weaks - 1} weak refs] [{*_Rep}]</DisplayString>
		<Expand>
			<Item Condition="(_Ptr != 0) &amp;&amp; (_Rep-&gt;_Uses &gt; 0)" Name="[ptr]">_Ptr</Item>
			<Item Condition="_Ptr != 0" Name="[deleter and allocator]">*_Rep</Item>
		</Expand>
	</Type>


	<Type Name="std::_Callable_base&lt;*,1&gt;">
		<AlternativeType Name="std::tr1::_Callable_base&lt;*,1&gt;" />
		<!-- VC10 -->
		<DisplayString>{*_Ptr}</DisplayString>
		<Expand>
			<Item Name="[ptr]">_Ptr</Item>
		</Expand>
	</Type>

	<Type Name="std::_Callable_base&lt;*,0&gt;">
		<AlternativeType Name="std::tr1::_Callable_base&lt;*,0&gt;" />
		<!-- VC10 -->
		<DisplayString>{_Object}</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::reference_wrapper&lt;*&gt;">
		<AlternativeType Name="std::tr1::reference_wrapper&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString>{_Callee}</DisplayString>
		<Expand>
			<ExpandedItem>_Callee</ExpandedItem>
		</Expand>
	</Type>


	<Type Name="std::plus&lt;*&gt;">
		<DisplayString>plus</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::minus&lt;*&gt;">
		<DisplayString>minus</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::multiplies&lt;*&gt;">
		<DisplayString>multiplies</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::divides&lt;*&gt;">
		<DisplayString>divides</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::modulus&lt;*&gt;">
		<DisplayString>modulus</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::negate&lt;*&gt;">
		<DisplayString>negate</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::equal_to&lt;*&gt;">
		<DisplayString>equal_to</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::not_equal_to&lt;*&gt;">
		<DisplayString>not_equal_to</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::greater&lt;*&gt;">
		<DisplayString>greater</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::less&lt;*&gt;">
		<DisplayString>less</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::greater_equal&lt;*&gt;">
		<DisplayString>greater_equal</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::less_equal&lt;*&gt;">
		<DisplayString>less_equal</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::logical_and&lt;*&gt;">
		<DisplayString>logical_and</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::logical_or&lt;*&gt;">
		<DisplayString>logical_or</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::logical_not&lt;*&gt;">
		<DisplayString>logical_not</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::bit_and&lt;*&gt;">
		<DisplayString>bit_and</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::bit_or&lt;*&gt;">
		<DisplayString>bit_or</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::bit_xor&lt;*&gt;">
		<DisplayString>bit_xor</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::identity&lt;*&gt;">
		<DisplayString>identity</DisplayString>
		<Expand/>
	</Type>


	<Type Name="std::unary_negate&lt;*&gt;">
		<DisplayString>not1({_Functor})</DisplayString>
		<Expand>
			<Item Name="[pred]">_Functor</Item>
		</Expand>
	</Type>

	<Type Name="std::binary_negate&lt;*&gt;">
		<DisplayString>not2({_Functor})</DisplayString>
		<Expand>
			<Item Name="[pred]">_Functor</Item>
		</Expand>
	</Type>

	<Type Name="std::binder1st&lt;*&gt;">
		<DisplayString>bind1st({op}, {value})</DisplayString>
		<Expand>
			<Item Name="op">op</Item>
			<Item Name="value">value</Item>
		</Expand>
	</Type>

	<Type Name="std::binder2nd&lt;*&gt;">
		<DisplayString>bind2nd({op}, {value})</DisplayString>
		<Expand>
			<Item Name="op">op</Item>
			<Item Name="value">value</Item>
		</Expand>
	</Type>

	<Type Name="std::pointer_to_unary_function&lt;*&gt;">
		<AlternativeType Name="std::pointer_to_binary_function&lt;*&gt;" />
		<DisplayString>ptr_fun({_Pfun})</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::mem_fun_t&lt;*&gt;">
		<AlternativeType Name="std::mem_fun1_t&lt;*&gt;" />
		<AlternativeType Name="std::const_mem_fun_t&lt;*&gt;" />
		<AlternativeType Name="std::const_mem_fun1_t&lt;*&gt;" />
		<DisplayString>mem_fun({_Pmemfun})</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::mem_fun_ref_t&lt;*&gt;">
		<AlternativeType Name="std::mem_fun1_ref_t&lt;*&gt;" />
		<AlternativeType Name="std::const_mem_fun_ref_t&lt;*&gt;" />
		<AlternativeType Name="std::const_mem_fun1_ref_t&lt;*&gt;" />
		<DisplayString>mem_fun_ref({_Pmemfun})</DisplayString>
		<Expand/>
	</Type>


	<Type Name="std::auto_ptr&lt;*&gt;">
		<DisplayString Condition="_Myptr == 0">empty</DisplayString>
		<DisplayString Condition="_Myptr != 0">auto_ptr {*_Myptr}</DisplayString>
		<Expand>
			<Item Condition="_Myptr != 0" Name="[ptr]">_Myptr</Item>
		</Expand>
	</Type>


	<Type Name="std::_Ph&lt;1&gt;">
		<AlternativeType Name="std::tr1::_Ph&lt;1&gt;" />
		<!-- VC10 -->
		<DisplayString>_1</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::_Ph&lt;2&gt;">
		<AlternativeType Name="std::tr1::_Ph&lt;2&gt;" />
		<!-- VC10 -->
		<DisplayString>_2</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::_Ph&lt;3&gt;">
		<AlternativeType Name="std::tr1::_Ph&lt;3&gt;" />
		<!-- VC10 -->
		<DisplayString>_3</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::_Ph&lt;4&gt;">
		<AlternativeType Name="std::tr1::_Ph&lt;4&gt;" />
		<!-- VC10 -->
		<DisplayString>_4</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::_Ph&lt;5&gt;">
		<AlternativeType Name="std::tr1::_Ph&lt;5&gt;" />
		<!-- VC10 -->
		<DisplayString>_5</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::_Ph&lt;6&gt;">
		<AlternativeType Name="std::tr1::_Ph&lt;6&gt;" />
		<!-- VC10 -->
		<DisplayString>_6</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::_Ph&lt;7&gt;">
		<AlternativeType Name="std::tr1::_Ph&lt;7&gt;" />
		<!-- VC10 -->
		<DisplayString>_7</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::_Ph&lt;8&gt;">
		<AlternativeType Name="std::tr1::_Ph&lt;8&gt;" />
		<!-- VC10 -->
		<DisplayString>_8</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::_Ph&lt;9&gt;">
		<AlternativeType Name="std::tr1::_Ph&lt;9&gt;" />
		<!-- VC10 -->
		<DisplayString>_9</DisplayString>
		<Expand/>
	</Type>

	<Type Name="std::_Ph&lt;10&gt;">
		<AlternativeType Name="std::tr1::_Ph&lt;10&gt;" />
		<!-- VC10 -->
		<DisplayString>_10</DisplayString>
		<Expand/>
	</Type>


	<Type Name="std::_Bind&lt;*&gt;">
		<DisplayString>bind({_Myfun}, {_Mybargs})</DisplayString>
		<Expand>
			<Item Name="[f]">_Myfun</Item>
			<Item Name="[bound_args]">_Mybargs</Item>
		</Expand>
	</Type>


	<Type Name="std::tr1::_Bind0&lt;*&gt;">
		<!-- VC10 -->
		<DisplayString>bind({_Callee._Object})</DisplayString>
		<Expand>
			<Item Name="[f]">_Callee._Object</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::_Bind1&lt;*&gt;">
		<!-- VC10 -->
		<DisplayString>bind({_Callee._Object}, {_Vx0})</DisplayString>
		<Expand>
			<Item Name="[f]">_Callee._Object</Item>
			<Item Name="[t1]">_Vx0</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::_Bind2&lt;*&gt;">
		<!-- VC10 -->
		<DisplayString>bind({_Callee._Object}, {_Vx0}, {_Vx1})</DisplayString>
		<Expand>
			<Item Name="[f]">_Callee._Object</Item>
			<Item Name="[t1]">_Vx0</Item>
			<Item Name="[t2]">_Vx1</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::_Bind3&lt;*&gt;">
		<!-- VC10 -->
		<DisplayString>bind({_Callee._Object}, {_Vx0}, {_Vx1}, {_Vx2})</DisplayString>
		<Expand>
			<Item Name="[f]">_Callee._Object</Item>
			<Item Name="[t1]">_Vx0</Item>
			<Item Name="[t2]">_Vx1</Item>
			<Item Name="[t3]">_Vx2</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::_Bind4&lt;*&gt;">
		<!-- VC10 -->
		<DisplayString>bind({_Callee._Object}, {_Vx0}, {_Vx1}, {_Vx2}, {_Vx3})</DisplayString>
		<Expand>
			<Item Name="[f]">_Callee._Object</Item>
			<Item Name="[t1]">_Vx0</Item>
			<Item Name="[t2]">_Vx1</Item>
			<Item Name="[t3]">_Vx2</Item>
			<Item Name="[t4]">_Vx3</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::_Bind5&lt;*&gt;">
		<!-- VC10 -->
		<DisplayString>bind({_Callee._Object}, {_Vx0}, {_Vx1}, {_Vx2}, {_Vx3}, {_Vx4})</DisplayString>
		<Expand>
			<Item Name="[f]">_Callee._Object</Item>
			<Item Name="[t1]">_Vx0</Item>
			<Item Name="[t2]">_Vx1</Item>
			<Item Name="[t3]">_Vx2</Item>
			<Item Name="[t4]">_Vx3</Item>
			<Item Name="[t5]">_Vx4</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::_Bind6&lt;*&gt;">
		<!-- VC10 -->
		<DisplayString>bind({_Callee._Object}, {_Vx0}, {_Vx1}, {_Vx2}, {_Vx3}, {_Vx4}, {_Vx5})</DisplayString>
		<Expand>
			<Item Name="[f]">_Callee._Object</Item>
			<Item Name="[t1]">_Vx0</Item>
			<Item Name="[t2]">_Vx1</Item>
			<Item Name="[t3]">_Vx2</Item>
			<Item Name="[t4]">_Vx3</Item>
			<Item Name="[t5]">_Vx4</Item>
			<Item Name="[t6]">_Vx5</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::_Bind7&lt;*&gt;">
		<!-- VC10 -->
		<DisplayString>bind({_Callee._Object}, {_Vx0}, {_Vx1}, {_Vx2}, {_Vx3}, {_Vx4}, {_Vx5}, {_Vx6})</DisplayString>
		<Expand>
			<Item Name="[f]">_Callee._Object</Item>
			<Item Name="[t1]">_Vx0</Item>
			<Item Name="[t2]">_Vx1</Item>
			<Item Name="[t3]">_Vx2</Item>
			<Item Name="[t4]">_Vx3</Item>
			<Item Name="[t5]">_Vx4</Item>
			<Item Name="[t6]">_Vx5</Item>
			<Item Name="[t7]">_Vx6</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::_Bind8&lt;*&gt;">
		<!-- VC10 -->
		<DisplayString>bind({_Callee._Object}, {_Vx0}, {_Vx1}, {_Vx2}, {_Vx3}, {_Vx4}, {_Vx5}, {_Vx6}, {_Vx7})</DisplayString>
		<Expand>
			<Item Name="[f]">_Callee._Object</Item>
			<Item Name="[t1]">_Vx0</Item>
			<Item Name="[t2]">_Vx1</Item>
			<Item Name="[t3]">_Vx2</Item>
			<Item Name="[t4]">_Vx3</Item>
			<Item Name="[t5]">_Vx4</Item>
			<Item Name="[t6]">_Vx5</Item>
			<Item Name="[t7]">_Vx6</Item>
			<Item Name="[t8]">_Vx7</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::_Bind9&lt;*&gt;">
		<!-- VC10 -->
		<DisplayString>bind({_Callee._Object}, {_Vx0}, {_Vx1}, {_Vx2}, {_Vx3}, {_Vx4}, {_Vx5}, {_Vx6}, {_Vx7}, {_Vx8})</DisplayString>
		<Expand>
			<Item Name="[f]">_Callee._Object</Item>
			<Item Name="[t1]">_Vx0</Item>
			<Item Name="[t2]">_Vx1</Item>
			<Item Name="[t3]">_Vx2</Item>
			<Item Name="[t4]">_Vx3</Item>
			<Item Name="[t5]">_Vx4</Item>
			<Item Name="[t6]">_Vx5</Item>
			<Item Name="[t7]">_Vx6</Item>
			<Item Name="[t8]">_Vx7</Item>
			<Item Name="[t9]">_Vx8</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::_Bind10&lt;*&gt;">
		<!-- VC10 -->
		<DisplayString>bind({_Callee._Object}, {_Vx0}, {_Vx1}, {_Vx2}, {_Vx3}, {_Vx4}, {_Vx5}, {_Vx6}, {_Vx7}, {_Vx8}, {_Vx9})</DisplayString>
		<Expand>
			<Item Name="[f]">_Callee._Object</Item>
			<Item Name="[t1]">_Vx0</Item>
			<Item Name="[t2]">_Vx1</Item>
			<Item Name="[t3]">_Vx2</Item>
			<Item Name="[t4]">_Vx3</Item>
			<Item Name="[t5]">_Vx4</Item>
			<Item Name="[t6]">_Vx5</Item>
			<Item Name="[t7]">_Vx6</Item>
			<Item Name="[t8]">_Vx7</Item>
			<Item Name="[t9]">_Vx8</Item>
			<Item Name="[t10]">_Vx9</Item>
		</Expand>
	</Type>

	<Type Name="std::tr1::_Bind&lt;*&gt;">
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Bind_fty&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString>{_Bx}</DisplayString>
		<Expand>
			<ExpandedItem>_Bx</ExpandedItem>
		</Expand>
	</Type>


	<Type Name="std::_Mem_fn_wrap&lt;*&gt;">
		<AlternativeType Name="std::tr1::_Mem_fn1&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Mem_fn2&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Mem_fn3&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Mem_fn4&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Mem_fn5&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Mem_fn6&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Mem_fn7&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Mem_fn8&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Mem_fn9&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Mem_fn10&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString>mem_fn({_Callee._Object})</DisplayString>
		<Expand/>
	</Type>


	<Type Name="std::tr1::_Impl_no_alloc0&lt;*&gt;">
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl_no_alloc1&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl_no_alloc2&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl_no_alloc3&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl_no_alloc4&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl_no_alloc5&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl_no_alloc6&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl_no_alloc7&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl_no_alloc8&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl_no_alloc9&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl_no_alloc10&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString>{_Callee._Object}</DisplayString>
		<Expand>
			<Item Name="[functor]">_Callee._Object</Item>
		</Expand>
	</Type>

	<Type Name="std::_Func_impl&lt;*&gt;">
		<AlternativeType Name="std::tr1::_Impl0&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl1&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl2&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl3&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl4&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl5&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl6&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl7&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl8&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl9&lt;*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::_Impl10&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString>{_Callee._Object}</DisplayString>
		<Expand>
			<Item Name="[functor]">_Callee._Object</Item>
			<Item Name="[allocator]">_Myal</Item>
		</Expand>
	</Type>

	<Type Name="std::function&lt;*&gt;">
		<AlternativeType Name="std::tr1::function&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString Condition="_Impl == 0">empty</DisplayString>
		<DisplayString Condition="_Impl != 0">{*_Impl}</DisplayString>
		<Expand>
			<Item Condition="_Impl != 0" Name="[functor and allocator]">*_Impl</Item>
		</Expand>
	</Type>


	<Type Name="std::hash&lt;*&gt;">
		<DisplayString>hash</DisplayString>
		<Expand/>
	</Type>


	<Type Name="std::basic_string&lt;char,*&gt;">
		<DisplayString Condition="_Myres &lt; _BUF_SIZE">{_Bx._Buf,s}</DisplayString>
		<DisplayString Condition="_Myres &gt;= _BUF_SIZE">{_Bx._Ptr,s}</DisplayString>
		<StringView Condition="_Myres &lt; _BUF_SIZE">_Bx._Buf,s</StringView>
		<StringView Condition="_Myres &gt;= _BUF_SIZE">_Bx._Ptr,s</StringView>
		<Expand>
			<Item Name="[size]">_Mysize</Item>
			<Item Name="[capacity]">_Myres</Item>
			<ArrayItems>
				<Size>_Mysize</Size>
				<ValuePointer Condition="_Myres &lt; _BUF_SIZE">_Bx._Buf</ValuePointer>
				<ValuePointer Condition="_Myres &gt;= _BUF_SIZE">_Bx._Ptr</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="std::basic_string&lt;unsigned short,*&gt;">
		<AlternativeType Name="std::basic_string&lt;wchar_t,*&gt;" />
		<DisplayString Condition="_Myres &lt; _BUF_SIZE">{_Bx._Buf,su}</DisplayString>
		<DisplayString Condition="_Myres &gt;= _BUF_SIZE">{_Bx._Ptr,su}</DisplayString>
		<StringView Condition="_Myres &lt; _BUF_SIZE">_Bx._Buf,su</StringView>
		<StringView Condition="_Myres &gt;= _BUF_SIZE">_Bx._Ptr,su</StringView>
		<Expand>
			<Item Name="[size]">_Mysize</Item>
			<Item Name="[capacity]">_Myres</Item>
			<ArrayItems>
				<Size>_Mysize</Size>
				<ValuePointer Condition="_Myres &lt; _BUF_SIZE">_Bx._Buf</ValuePointer>
				<ValuePointer Condition="_Myres &gt;= _BUF_SIZE">_Bx._Ptr</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="std::_String_iterator&lt;std::_String_val&lt;std::_Simple_types&lt;char&gt; &gt; &gt;">
		<AlternativeType Name="std::_String_const_iterator&lt;std::_String_val&lt;std::_Simple_types&lt;char&gt; &gt; &gt;" />
		<AlternativeType Name="std::_String_iterator&lt;char,*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::_String_const_iterator&lt;char,*&gt;" />
		<!-- VC10 -->
		<DisplayString>{_Ptr,s}</DisplayString>
		<StringView>_Ptr,s</StringView>
		<Expand>
			<Item Name="[ptr]">_Ptr</Item>
		</Expand>
	</Type>

	<Type Name="std::_String_iterator&lt;std::_String_val&lt;std::_Simple_types&lt;wchar_t&gt; &gt; &gt;">
		<AlternativeType Name="std::_String_const_iterator&lt;std::_String_val&lt;std::_Simple_types&lt;wchar_t&gt; &gt; &gt;" />
		<AlternativeType Name="std::_String_iterator&lt;std::_String_val&lt;std::_Simple_types&lt;unsigned short&gt; &gt; &gt;" />
		<AlternativeType Name="std::_String_const_iterator&lt;std::_String_val&lt;std::_Simple_types&lt;unsigned short&gt; &gt; &gt;" />
		<AlternativeType Name="std::_String_iterator&lt;wchar_t,*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::_String_const_iterator&lt;wchar_t,*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::_String_iterator&lt;unsigned short,*&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::_String_const_iterator&lt;unsigned short,*&gt;" />
		<!-- VC10 -->
		<DisplayString>{_Ptr,su}</DisplayString>
		<StringView>_Ptr,su</StringView>
		<Expand>
			<Item Name="[ptr]">_Ptr</Item>
		</Expand>
	</Type>


	<Type Name="std::array&lt;*&gt;">
		<AlternativeType Name="std::tr1::array&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString>{{ size={(size_t) _EEN_SIZE} }}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>_EEN_SIZE</Size>
				<ValuePointer>_Elems</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="std::_Array_iterator&lt;*&gt;">
		<AlternativeType Name="std::_Array_const_iterator&lt;*&gt;" />
		<DisplayString Condition="_EEN_IDL == 0">{*_Ptr}</DisplayString>
		<DisplayString Condition="(_EEN_IDL != 0) &amp;&amp; (_Idx != _EEN_SIZE)">{_Ptr[_Idx]}</DisplayString>
		<DisplayString Condition="(_EEN_IDL != 0) &amp;&amp; (_Idx == _EEN_SIZE)">end</DisplayString>
		<Expand>
			<Item Condition="_EEN_IDL == 0" Name="[ptr]">_Ptr</Item>
			<Item Condition="(_EEN_IDL != 0) &amp;&amp; (_Idx != _EEN_SIZE)" Name="[ptr]">_Ptr + _Idx</Item>
		</Expand>
	</Type>


	<Type Name="std::deque&lt;*&gt;">
		<DisplayString>{{ size={_Mysize} }}</DisplayString>
		<Expand>
			<IndexListItems>
				<Size>_Mysize</Size>
				<ValueNode>_Map[(($i + _Myoff) / _EEN_DS) % _Mapsize][($i + _Myoff) % _EEN_DS]</ValueNode>
			</IndexListItems>
		</Expand>
	</Type>

	<Type Name="std::_Deque_iterator&lt;*&gt;">
		<AlternativeType Name="std::_Deque_const_iterator&lt;*&gt;" />
		<DisplayString Condition="_Myoff &lt; ((_Mydeque_t *)_Myproxy-&gt;_Mycont)-&gt;_Myoff + ((_Mydeque_t *)_Myproxy-&gt;_Mycont)-&gt;_Mysize">{((_Mydeque_t *)_Myproxy-&gt;_Mycont)-&gt;_Map[(_Myoff / _EEN_DS) % ((_Mydeque_t *)_Myproxy-&gt;_Mycont)-&gt;_Mapsize][_Myoff % _EEN_DS]}</DisplayString>
		<DisplayString Condition="_Myoff &gt;= ((_Mydeque_t *)_Myproxy-&gt;_Mycont)-&gt;_Myoff + ((_Mydeque_t *)_Myproxy-&gt;_Mycont)-&gt;_Mysize">end</DisplayString>
		<Expand>
			<Item Condition="_Myoff &lt; ((_Mydeque_t *)_Myproxy-&gt;_Mycont)-&gt;_Myoff + ((_Mydeque_t *)_Myproxy-&gt;_Mycont)-&gt;_Mysize" Name="[index]">_Myoff - ((_Mydeque_t *)_Myproxy-&gt;_Mycont)-&gt;_Myoff</Item>
			<Item Condition="_Myoff &lt; ((_Mydeque_t *)_Myproxy-&gt;_Mycont)-&gt;_Myoff + ((_Mydeque_t *)_Myproxy-&gt;_Mycont)-&gt;_Mysize" Name="[ptr]">&amp;((_Mydeque_t *)_Myproxy-&gt;_Mycont)-&gt;_Map[(_Myoff / _EEN_DS) % ((_Mydeque_t *)_Myproxy-&gt;_Mycont)-&gt;_Mapsize][_Myoff % _EEN_DS]</Item>
		</Expand>
	</Type>


	<Type Name="std::forward_list&lt;*&gt;">
		<DisplayString Condition="_Myhead == 0">empty</DisplayString>
		<DisplayString Condition="_Myhead != 0">non-empty</DisplayString>
		<Expand>
			<LinkedListItems>
				<HeadPointer>_Myhead</HeadPointer>
				<NextPointer>_Next</NextPointer>
				<ValueNode>_Myval</ValueNode>
			</LinkedListItems>
		</Expand>
	</Type>

	<Type Name="std::_Flist_iterator&lt;*&gt;">
		<AlternativeType Name="std::_Flist_const_iterator&lt;*&gt;" />
		<DisplayString Condition="_Ptr == 0">end</DisplayString>
		<DisplayString Condition="_Ptr != 0">{_Ptr-&gt;_Myval}</DisplayString>
		<Expand>
			<Item Condition="_Ptr != 0" Name="[ptr]">&amp;_Ptr-&gt;_Myval</Item>
		</Expand>
	</Type>


	<Type Name="std::list&lt;*&gt;">
		<DisplayString>{{ size={_Mysize} }}</DisplayString>
		<Expand>
			<LinkedListItems>
				<Size>_Mysize</Size>
				<HeadPointer>_Myhead-&gt;_Next</HeadPointer>
				<NextPointer>_Next</NextPointer>
				<ValueNode>_Myval</ValueNode>
			</LinkedListItems>
		</Expand>
	</Type>

	<Type Name="std::_List_iterator&lt;*&gt;">
		<AlternativeType Name="std::_List_const_iterator&lt;*&gt;" />
		<DisplayString>{_Ptr-&gt;_Myval}</DisplayString>
		<Expand>
			<Item Name="[ptr]">&amp;_Ptr-&gt;_Myval</Item>
		</Expand>
	</Type>


	<Type Name="std::vector&lt;bool,*&gt;">
		<DisplayString>{{ size={_Mysize} }}</DisplayString>
		<Expand>
			<Item Name="[size]">_Mysize</Item>
			<Item Name="[capacity]">(_Myvec._Myend - _Myvec._Myfirst) * _EEN_VBITS</Item>
			<IndexListItems>
				<Size>_Mysize</Size>
				<ValueNode>(bool)((_Myvec._Myfirst[$i / _EEN_VBITS] &gt;&gt; ($i % _EEN_VBITS)) &amp; 1)</ValueNode>
			</IndexListItems>
		</Expand>
	</Type>

	<Type Name="std::_Vb_reference&lt;*&gt;">
		<AlternativeType Name="std::_Vb_iterator&lt;*&gt;" />
		<AlternativeType Name="std::_Vb_const_iterator&lt;*&gt;" />
		<DisplayString>{(bool)((*_Myptr &gt;&gt; _Myoff) &amp; 1)}</DisplayString>
		<Expand>
			<Item Name="[ptr]">_Myptr</Item>
			<Item Name="[offset]">_Myoff</Item>
		</Expand>
	</Type>


	<Type Name="std::vector&lt;*&gt;">
		<DisplayString>{{ size={_Mylast - _Myfirst} }}</DisplayString>
		<Expand>
			<Item Name="[size]">_Mylast - _Myfirst</Item>
			<Item Name="[capacity]">_Myend - _Myfirst</Item>
			<ArrayItems>
				<Size>_Mylast - _Myfirst</Size>
				<ValuePointer>_Myfirst</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="std::_Vector_iterator&lt;*&gt;">
		<AlternativeType Name="std::_Vector_const_iterator&lt;*&gt;" />
		<DisplayString>{*_Ptr}</DisplayString>
		<Expand>
			<Item Name="[ptr]">_Ptr</Item>
		</Expand>
	</Type>


	<Type Name="std::map&lt;*&gt;">
		<AlternativeType Name="std::multimap&lt;*&gt;" />
		<AlternativeType Name="std::set&lt;*&gt;" />
		<AlternativeType Name="std::multiset&lt;*&gt;" />
		<DisplayString>{{ size={_Mysize} }}</DisplayString>
		<Expand>
			<TreeItems>
				<Size>_Mysize</Size>
				<HeadPointer>_Myhead-&gt;_Parent</HeadPointer>
				<LeftPointer>_Left</LeftPointer>
				<RightPointer>_Right</RightPointer>
				<ValueNode Condition="_Isnil == 0">_Myval</ValueNode>
			</TreeItems>
		</Expand>
	</Type>

	<Type Name="std::_Tree_iterator&lt;*&gt;">
		<AlternativeType Name="std::_Tree_const_iterator&lt;*&gt;" />
		<DisplayString>{_Ptr-&gt;_Myval}</DisplayString>
		<Expand>
			<Item Name="[ptr]">&amp;_Ptr-&gt;_Myval</Item>
		</Expand>
	</Type>


	<Type Name="std::unordered_map&lt;*&gt;">
		<AlternativeType Name="std::unordered_multimap&lt;*&gt;" />
		<AlternativeType Name="std::unordered_set&lt;*&gt;" />
		<AlternativeType Name="std::unordered_multiset&lt;*&gt;" />
		<AlternativeType Name="stdext::hash_map&lt;*&gt;" />
		<AlternativeType Name="stdext::hash_multimap&lt;*&gt;" />
		<AlternativeType Name="stdext::hash_set&lt;*&gt;" />
		<AlternativeType Name="stdext::hash_multiset&lt;*&gt;" />
		<DisplayString>{_List}</DisplayString>
		<Expand>
			<ExpandedItem>_List</ExpandedItem>
		</Expand>
	</Type>


	<Type Name="std::queue&lt;*&gt;">
		<AlternativeType Name="std::stack&lt;*&gt;" />
		<DisplayString>{c}</DisplayString>
		<Expand>
			<Item Name="c">c</Item>
		</Expand>
	</Type>


	<Type Name="std::priority_queue&lt;*&gt;">
		<DisplayString>{c}</DisplayString>
		<Expand>
			<Item Name="c [heap]">c</Item>
			<Item Name="comp">comp</Item>
		</Expand>
	</Type>


	<Type Name="std::reverse_iterator&lt;*&gt;">
		<DisplayString>reverse_iterator current {current}</DisplayString>
		<Expand>
			<Item Name="current">current</Item>
		</Expand>
	</Type>


	<Type Name="std::back_insert_iterator&lt;*&gt;">
		<DisplayString>back_insert_iterator into {container}</DisplayString>
		<Expand>
			<Item Name="container">container</Item>
		</Expand>
	</Type>


	<Type Name="std::front_insert_iterator&lt;*&gt;">
		<DisplayString>front_insert_iterator into {container}</DisplayString>
		<Expand>
			<Item Name="container">container</Item>
		</Expand>
	</Type>


	<Type Name="std::insert_iterator&lt;*&gt;">
		<DisplayString>insert_iterator into {container} at {iter}</DisplayString>
		<Expand>
			<Item Name="container">container</Item>
			<Item Name="iter">iter</Item>
		</Expand>
	</Type>


	<Type Name="std::move_iterator&lt;*&gt;">
		<DisplayString>move_iterator current {current}</DisplayString>
		<Expand>
			<Item Name="current">current</Item>
		</Expand>
	</Type>


	<Type Name="std::complex&lt;*&gt;">
		<DisplayString Condition="(_Val[1] &lt; 0) &amp;&amp; (_Val[0] == 0)">-i*{-_Val[1]}</DisplayString>
		<DisplayString Condition="(_Val[1] &lt; 0) &amp;&amp; (_Val[0] != 0)">{_Val[0]}-i*{-_Val[1]}</DisplayString>
		<DisplayString Condition="_Val[1] == 0">{_Val[0]}</DisplayString>
		<DisplayString Condition="(_Val[1] &gt; 0) &amp;&amp; (_Val[0] == 0)">i*{_Val[1]}</DisplayString>
		<DisplayString Condition="(_Val[1] &gt; 0) &amp;&amp; (_Val[0] != 0)">{_Val[0]}+i*{_Val[1]}</DisplayString>
		<Expand>
			<Item Name="real">_Val[0]</Item>
			<Item Name="imag">_Val[1]</Item>
		</Expand>
	</Type>


	<Type Name="std::valarray&lt;*&gt;">
		<DisplayString>{{ size={_Mysize} }}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>_Mysize</Size>
				<ValuePointer>_Myptr</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>


	<Type Name="std::basic_regex&lt;*&gt;">
		<AlternativeType Name="std::tr1::basic_regex&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString Condition="_Rep == 0">empty</DisplayString>
		<DisplayString Condition="(_Rep != 0) &amp;&amp; (_EEN_VIS == 1)">{_Visualization}</DisplayString>
		<DisplayString Condition="(_Rep != 0) &amp;&amp; (_EEN_VIS != 1)">{*_Rep}</DisplayString>
		<StringView Condition="(_Rep != 0) &amp;&amp; (_EEN_VIS == 1)">_Visualization</StringView>
		<Expand/>
	</Type>

	<Type Name="std::sub_match&lt;char const *&gt;">
		<AlternativeType Name="std::sub_match&lt;wchar_t const *&gt;" />
		<AlternativeType Name="std::sub_match&lt;unsigned short const *&gt;" />
		<AlternativeType Name="std::sub_match&lt;char *&gt;" />
		<AlternativeType Name="std::sub_match&lt;wchar_t *&gt;" />
		<AlternativeType Name="std::sub_match&lt;unsigned short *&gt;" />
		<AlternativeType Name="std::tr1::sub_match&lt;char const *&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::sub_match&lt;wchar_t const *&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::sub_match&lt;unsigned short const *&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::sub_match&lt;char *&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::sub_match&lt;wchar_t *&gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::sub_match&lt;unsigned short *&gt;" />
		<!-- VC10 -->
		<DisplayString Condition="matched">{second - first}</DisplayString>
		<DisplayString Condition="!matched">false</DisplayString>
		<Expand>
			<Item Name="matched">matched</Item>
			<Item Name="first">first</Item>
			<Item Name="second">second</Item>
		</Expand>
	</Type>

	<Type Name="std::sub_match&lt;std::_String_const_iterator&lt;*&gt; &gt;">
		<AlternativeType Name="std::sub_match&lt;std::_String_iterator&lt;*&gt; &gt;" />
		<AlternativeType Name="std::tr1::sub_match&lt;std::_String_const_iterator&lt;*&gt; &gt;" />
		<!-- VC10 -->
		<AlternativeType Name="std::tr1::sub_match&lt;std::_String_iterator&lt;*&gt; &gt;" />
		<!-- VC10 -->
		<DisplayString Condition="matched">{second._Ptr - first._Ptr}</DisplayString>
		<DisplayString Condition="!matched">false</DisplayString>
		<Expand>
			<Item Name="matched">matched</Item>
			<Item Name="first">first</Item>
			<Item Name="second">second</Item>
		</Expand>
	</Type>

	<Type Name="std::match_results&lt;*&gt;">
		<AlternativeType Name="std::tr1::match_results&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString Condition="_Matches._Myfirst == _Matches._Mylast">empty</DisplayString>
		<DisplayString Condition="_Matches._Myfirst != _Matches._Mylast">{_Matches}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>_Matches._Mylast - _Matches._Myfirst</Size>
				<ValuePointer>_Matches._Myfirst</ValuePointer>
			</ArrayItems>
			<Item Condition="_Matches._Myfirst != _Matches._Mylast" Name="[prefix]">_Prefix</Item>
			<Item Condition="_Matches._Myfirst != _Matches._Mylast" Name="[suffix]">_Suffix</Item>
		</Expand>
	</Type>

	<Type Name="std::regex_iterator&lt;*&gt;">
		<AlternativeType Name="std::tr1::regex_iterator&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString Condition="_MyRe == 0">end</DisplayString>
		<DisplayString Condition="_MyRe != 0">{_MyVal}</DisplayString>
		<Expand>
			<Item Condition="_MyRe != 0" Name="[begin]">_Begin</Item>
			<Item Condition="_MyRe != 0" Name="[end]">_End</Item>
			<Item Condition="_MyRe != 0" Name="[pregex]">_MyRe</Item>
			<Item Condition="_MyRe != 0" Name="[flags]">_Flags</Item>
			<Item Condition="_MyRe != 0" Name="[match]">_MyVal</Item>
		</Expand>
	</Type>

	<Type Name="std::regex_token_iterator&lt;*&gt;">
		<AlternativeType Name="std::tr1::regex_token_iterator&lt;*&gt;" />
		<!-- VC10 -->
		<DisplayString Condition="_Res == 0">end</DisplayString>
		<DisplayString Condition="_Res != 0">{*_Res}</DisplayString>
		<Expand>
			<Item Condition="_Res != 0" Name="[position]">_Pos</Item>
			<Item Condition="_Res != 0" Name="[result]">_Res</Item>
			<Item Condition="_Res != 0" Name="[suffix]">_Suffix</Item>
			<Item Condition="_Res != 0" Name="[N]">_Cur</Item>
			<Item Condition="_Res != 0" Name="[subs]">_Subs</Item>
		</Expand>
	</Type>


</AutoVisualizer>