// Auto-generated file - DO NOT EDIT
// Generated by generate-event-hpp.js from TypeScript event schemas
// Compatible with MSVC 2008

#include "CvGameCoreDLLPCH.h"
#include "CvConnectionSchema.h"

// Static property arrays for each event
static const char* props_BarbariansCampCleared[] = {"PlotX", "PlotY", "PlayerID", NULL};
static const char* props_BarbariansCampFounded[] = {"PlotX", "PlotY", NULL};
static const char* props_BarbariansSpawnedUnit[] = {"PlotX", "PlotY", "UnitType", NULL};
static const char* props_BuildFinished[] = {"PlayerID", "PlotX", "PlotY", "ImprovementType", NULL};
static const char* props_CapitalChanged[] = {"PlayerID", "NewCapitalCityID", "OldCapitalCityID", NULL};
static const char* props_ChangeGoldenAgeProgressMeter[] = {"PlayerID", "Change", NULL};
static const char* props_CircumnavigatedGlobe[] = {"TeamID", NULL};
static const char* props_CityBeginsWLTKD[] = {"PlayerID", "CityX", "CityY", "Change", NULL};
static const char* props_CityBoughtPlot[] = {"PlayerID", "CityID", "PlotX", "PlotY", "!WithGold", "!WithFaithCulture", NULL};
static const char* props_CityCaptureComplete[] = {"OldOwnerID", "!IsCapital", "CityX", "CityY", "NewOwnerID", "Population", "!IsConquest", "TotalGreatWorks", "CapturedGreatWorks", NULL};
static const char* props_CityConstructed[] = {"OwnerID", "CityID", "BuildingType", "!IsGoldPurchase", "!IsFaithPurchase", NULL};
static const char* props_CityConvertsPantheon[] = {"OwnerID", "CityX", "CityY", NULL};
static const char* props_CityConvertsReligion[] = {"OwnerID", "ReligionID", "CityX", "CitY", NULL};
static const char* props_CityCreated[] = {"OwnerID", "CityID", "ProjectType", "!IsGoldPurchase", "!IsFaithPurchase", NULL};
static const char* props_CityEndsWLTKD[] = {"OwnerID", "PlotX", "PlotY", "Unused", NULL};
static const char* props_CityEventActivated[] = {"PlayerID", "CityID", "EventID", NULL};
static const char* props_CityEventChoiceActivated[] = {"PlayerID", "CityID", "ChoiceID", NULL};
static const char* props_CityEventChoiceEnded[] = {"PlayerID", "CityID", "ChoiceID", NULL};
static const char* props_CityExtendsWLTKD[] = {"PlayerID", "CityX", "CityY", "Change", NULL};
static const char* props_CityFlipped[] = {"CityID", "NewOwnerID", "OldOwnerID", NULL};
static const char* props_CityInvestedBuilding[] = {"PlayerID", "CityID", "BuildingClass", "!Invested", NULL};
static const char* props_CityInvestedUnit[] = {"PlayerID", "CityID", "UnitClass", "!Invested", NULL};
static const char* props_CityPrepared[] = {"PlayerID", "CityPtr", "SpecialistType", "GppChange", "GppThreshold", NULL};
static const char* props_CityProjectComplete[] = {"PlayerID", "CityID", "ProjectType", NULL};
static const char* props_CityPuppeted[] = {"PlayerID", "CityID", NULL};
static const char* props_CityRazed[] = {"PlayerID", "CityX", "CityY", NULL};
static const char* props_CitySoldBuilding[] = {"PlayerID", "CityID", "BuildingType", NULL};
static const char* props_CityTrained[] = {"PlayerID", "CityID", "UnitID", "!WithGold", "!WithFaith", NULL};
static const char* props_CombatEnded[] = {"AttackingPlayerID", "AttackingUnitID", "AttackerRemainingHP", "AttackerDamage", "AttackerMaxHP", "DefendingPlayerID", "DefendingUnitID", "DefenderRemainingHP", "DefenderDamage", "DefenderMaxHP", "InterceptingPlayerID", "InterceptingUnitID", "InterceptorDamage", "PlotX", "PlotY", NULL};
static const char* props_CombatResult[] = {"AttackingPlayerID", "AttackingUnitID", "AttackerRemainingHP", "AttackerDamage", "AttackerMaxHp", "DefendingPlayerID", "DefendingUnitID", "DefenderRemainingHP", "DefenderDamage", "DefenderMaxHp", "InterceptingPlayerID", "InterceptingUnitID", "InterceptorDamage", "PlotX", "PlotY", NULL};
static const char* props_ContractEnded[] = {"HolderPlayerID", "ContractType", NULL};
static const char* props_ContractStarted[] = {"PlayerID", "ContractType", "Turns", "Maintenance", NULL};
static const char* props_ContractsRefreshed[] = {NULL};
static const char* props_DealMade[] = {"FromPlayerID", "ToPlayerID", "StartTurn", "PeaceTreatyType", "*TradedItems", "FromPlayerID", "ItemType", "Data1", "Data2", "Data3", "Duration", NULL};
static const char* props_DeclareWar[] = {"OriginatingPlayerID", "TargetTeamID", "!IsAggressor", NULL};
static const char* props_ElectionResultFailure[] = {"PlayerID", "SpyID", "DiminishAmount", "CapitalX", "CapitalY", NULL};
static const char* props_ElectionResultSuccess[] = {"PlayerID", "SpyID", "Value", "CityX", "CityY", NULL};
static const char* props_EspionageNotificationData[] = {"CityX", "CityY", "SourcePlayerID", "TargetPlayerID", "SpyResult", "TechID", "AmountStolen", NULL};
static const char* props_EspionageResult[] = {"SpyOwnerID", "SpyIndex", "Result", "CityX", "CityY", NULL};
static const char* props_EspionageState[] = {"SpyOwnerID", "SpyIndex", "SpyState", "CityX", "CityY", NULL};
static const char* props_EventActivated[] = {"PlayerID", "EventID", NULL};
static const char* props_EventChoiceActivated[] = {"PlayerID", "EventChoiceID", NULL};
static const char* props_EventChoiceEnded[] = {"PlayerID", "EventChoiceID", NULL};
static const char* props_EventUnitCreated[] = {"PlayerID", "EventChoiceID", "UnitPointer", NULL};
static const char* props_GameCoreTestVictory[] = {NULL};
static const char* props_GameCoreUpdateBegin[] = {NULL};
static const char* props_GameCoreUpdateEnd[] = {NULL};
static const char* props_GameSave[] = {NULL};
static const char* props_GatherPerTurnReplayStats[] = {"PlayerID", NULL};
static const char* props_GoodyHutReceivedBonus[] = {"PlayerID", "UnitID", "GoodyType", "PlotX", "PlotY", NULL};
static const char* props_GoodyHutTechResearched[] = {"PlayerID", "TechID", NULL};
static const char* props_GovernmentCooldownChanges[] = {"PlayerID", "CurrentCooldown", NULL};
static const char* props_GovernmentCooldownRateChanges[] = {"PlayerID", "RateChangeValue", NULL};
static const char* props_GreatPersonExpended[] = {"PlayerID", "UnitID", "GreatPersonType", "CityX", "CityY", NULL};
static const char* props_GreatWorkCreated[] = {"PlayerID", "UnitID", "GreatWorkType", NULL};
static const char* props_IdeologyAdopted[] = {"PlayerID", "BranchType", NULL};
static const char* props_IdeologySwitched[] = {"PlayerID", "OldBranchType", "NewBranchType", NULL};
static const char* props_LoyaltyStateChanged[] = {"PlayerID", "CityID", "OldLoyaltyState", "NewLoyaltyState", NULL};
static const char* props_MakePeace[] = {"OriginatingPlayerID", "TargetTeamID", "!PacifierFlag", NULL};
static const char* props_MinorAlliesChanged[] = {"MinorPlayerID", "MajorPlayerID", "!IsNowAlly", "OldFriendship", "NewFriendship", NULL};
static const char* props_MinorFriendsChanged[] = {"MinorPlayerID", "MajorPlayerID", "!IsNowFriend", "OldFriendship", "NewFriendship", NULL};
static const char* props_MinorGift[] = {"MinorPlayerID", "MajorPlayerID", "GiftValue", "FriendshipBoost", "Reserved1", "!IsFirstDiscovery", "!Reserved2", "GiftType", NULL};
static const char* props_MinorGiftUnit[] = {"MinorPlayerID", "MajorPlayerID", "UnitType", NULL};
static const char* props_NaturalWonderDiscovered[] = {"TeamID", "FeatureType", "PlotX", "PlotY", "!IsFirst", NULL};
static const char* props_NuclearDetonation[] = {"PlayerID", "PlotX", "PlotY", "!IsWar", "!IsBystander", NULL};
static const char* props_PantheonFounded[] = {"PlayerID", "CityID", "ReligionType", "BeliefType", NULL};
static const char* props_ParadropAt[] = {"PlayerID", "UnitID", "FromX", "FromY", "ToX", "ToY", NULL};
static const char* props_PietyChanged[] = {"PlayerID", "CurrentPiety", "ChangeValue", NULL};
static const char* props_PietyRateChanged[] = {"PlayerID", "CurrentPietyRate", "ChangeValue", NULL};
static const char* props_PlaceResource[] = {"PlayerID", "ResourceType", "Quantity", "CityX", "CityY", NULL};
static const char* props_PlayerAdoptPolicy[] = {"PlayerID", "PolicyID", NULL};
static const char* props_PlayerAdoptPolicyBranch[] = {"PlayerID", "BranchType", NULL};
static const char* props_PlayerAdoptsCurrency[] = {"PlayerID", "NewCurrency", "OldCurrency", NULL};
static const char* props_PlayerAdoptsGovernment[] = {"PlayerID", "GovernmentType", NULL};
static const char* props_PlayerAnarchy[] = {"PlayerID", "!IsEntering", "Duration", NULL};
static const char* props_PlayerBoughtOut[] = {"BuyingPlayerID", "MinorPlayerID", NULL};
static const char* props_PlayerBuilding[] = {"OwnerID", "UnitID", "PlotX", "PlotY", "BuildType", "!IsFirstTime", NULL};
static const char* props_PlayerBuilt[] = {"OwnerID", "UnitID", "PlotX", "PlotY", "BuildType", NULL};
static const char* props_PlayerBullied[] = {"BullyingPlayerID", "MinorPlayerID", "Amount", "UnitType", "PlotX", "PlotY", "YieldType", NULL};
static const char* props_PlayerCityFounded[] = {"PlayerID", "PlotX", "PlotY", NULL};
static const char* props_PlayerDoTurn[] = {"PlayerID", NULL};
static const char* props_PlayerDoneTurn[] = {"PlayerID", "NextPlayerID", NULL};
static const char* props_PlayerEndOfMayaLongCount[] = {"PlayerID", "CurrentBaktun", "OldBaktun", NULL};
static const char* props_PlayerEndTurnCompleted[] = {"PlayerID", NULL};
static const char* props_PlayerEndTurnInitiated[] = {"PlayerID", NULL};
static const char* props_PlayerGifted[] = {"GivingPlayerID", "ReceivingPlayerID", "GoldAmount", "UnitType", "PlotX", "PlotY", NULL};
static const char* props_PlayerGoldenAge[] = {"PlayerID", "!IsStarting", "TurnChange", NULL};
static const char* props_PlayerLiberated[] = {"LiberatingPlayerID", "LiberatedPlayerID", "CityID", NULL};
static const char* props_PlayerPlunderedTradeRoute[] = {"PlunderingPlayerID", "PlunderingUnitID", "PlunderGoldValue", "OriginOwnerID", "OriginCityID", "DestinationOwnerID", "DestinationCityID", "ConnectionType", "Domain", NULL};
static const char* props_PlayerPreAIUnitUpdate[] = {"PlayerID", NULL};
static const char* props_PlayerProtected[] = {"MajorPlayerID", "MinorPlayerID", NULL};
static const char* props_PlayerRevoked[] = {"MajorPlayerID", "MinorPlayerID", "!PledgeNowBroken", NULL};
static const char* props_PlayerSecularizes[] = {"PlayerID", "StateReligion", "!IsSecularizing", NULL};
static const char* props_PlayerTradeRouteCompleted[] = {"OriginPlayerID", "OriginCityID", "DestinationPlayerID", "DestinationCityID", "Domain", "ConnectionType", NULL};
static const char* props_PlayerVictory[] = {"PlayerID", "VictoryType", NULL};
static const char* props_ProvinceLevelChanged[] = {"PlayerID", "CityID", "OldProvinceLevel", "NewProvinceLevel", NULL};
static const char* props_PushingMissionTo[] = {"PlayerID", "UnitID", "PlotX", "PlotY", "MissionData", NULL};
static const char* props_RebaseTo[] = {"PlayerID", "UnitID", "PlotX", "PlotY", NULL};
static const char* props_ReformCooldownChanges[] = {"PlayerID", "CurrentCooldown", NULL};
static const char* props_ReformCooldownRateChanges[] = {"PlayerID", "Value", NULL};
static const char* props_ReligionEnhanced[] = {"PlayerID", "ReligionID", "FirstEnhancerBelief", "SecondEnhancerBelief", NULL};
static const char* props_ReligionFounded[] = {"PlayerID", "HolyCityID", "ReligionID", "PantheonBelief", "FounderBelief1", "FounderBelief2", "FollowerBelief1", "FollowerBelief2", NULL};
static const char* props_ReligionReformed[] = {"PlayerID", "ReligionID", "ReformationBelief", NULL};
static const char* props_ResolutionResult[] = {"ResolutionType", "ProposerPlayerID", "Decision", "!IsEnact", "!Passed", NULL};
static const char* props_SetAlly[] = {"MinorPlayerID", "OldAllyPlayerID", "NewAllyPlayerID", NULL};
static const char* props_SetPopulation[] = {"CityX", "CityY", "OldPopulation", "NewPopulation", NULL};
static const char* props_StateReligionAdopted[] = {"PlayerID", "NewReligionID", "OldReligionID", NULL};
static const char* props_StateReligionChanged[] = {"PlayerID", "NewReligionID", "OldReligionID", NULL};
static const char* props_TeamMeet[] = {"OtherTeamID", "CurrentTeamID", NULL};
static const char* props_TeamSetEra[] = {"TeamID", "NewEra", NULL};
static const char* props_TeamSetHasTech[] = {"TeamID", "TechID", "!HasTech", NULL};
static const char* props_TeamTechResearched[] = {"TeamID", "TechID", "ChangeAmount", NULL};
static const char* props_TerraformingMap[] = {"EventType", "Phase", NULL};
static const char* props_TerraformingPlot[] = {"EventType", "PlotX", "PlotY", "Direction", "NewValue", "OldValue", "AdditionalParam1", "AdditionalParam2", NULL};
static const char* props_TestEvent[] = {"TestParameter1", "TestParameter2", "TestParameter3", "TestParameter4", NULL};
static const char* props_TileFeatureChanged[] = {"PlotX", "PlotY", "OwnerID", "OldFeatureID", "NewFeatureID", NULL};
static const char* props_TileImprovementChanged[] = {"PlotX", "PlotY", "OwnerID", "OldImprovementType", "NewImprovementType", "!IsPillaged", NULL};
static const char* props_TileOwnershipChanged[] = {"PlotX", "PlotY", "NewOwnerID", "OldOwnerID", NULL};
static const char* props_TileRevealed[] = {"PlotX", "PlotY", "RevealedToTeamID", "RevealedByTeamID", "!IsFirstDiscovery", "PlayerID", "UnitID", NULL};
static const char* props_TileRouteChanged[] = {"PlotX", "PlotY", "OwnerID", "OldRoute", "NewRoute", "!IsPillaged", NULL};
static const char* props_TurnComplete[] = {"ActivePlayerID", NULL};
static const char* props_UiDiploEvent[] = {"EventType", "AIPlayerID", "Arg1", "Arg2", NULL};
static const char* props_UnitCaptured[] = {"NewOwnerID", "CapturingUnitID", "OldOwnerID", "CapturedUnitID", "!WasKilled", "CaptureType", NULL};
static const char* props_UnitCityFounded[] = {"PlayerID", "UnitID", "UnitType", "PlotX", "PlotY", NULL};
static const char* props_UnitConverted[] = {"OldOwnerID", "NewOwnerID", "OriginalUnitID", "ConvertingUnitID", "!IsUpgrade", NULL};
static const char* props_UnitCreated[] = {"PlayerID", "UnitID", "UnitType", "PlotX", "PlotY", NULL};
static const char* props_UnitGetSpecialExploreTarget[] = {"PlayerID", "UnitID", NULL};
static const char* props_UnitKilledInCombat[] = {"KillerPlayerID", "KilledPlayerID", "KilledUnitType", "KillingUnitID", NULL};
static const char* props_UnitPrekill[] = {"OwnerID", "UnitID", "UnitType", "PlotX", "PlotY", "!DelayKill", "AttackingPlayerID", NULL};
static const char* props_UnitPromoted[] = {"PlayerID", "UnitID", "PromotionType", NULL};
static const char* props_UnitSetXY[] = {"PlayerID", "UnitID", "PlotX", "PlotY", NULL};
static const char* props_UnitUpgraded[] = {"PlayerID", "OldUnitID", "NewUnitID", "!IsGoodyHut", NULL};

std::map<std::string, const char**> GetEventSchemas() {
    static std::map<std::string, const char**> schemas;
    static bool initialized = false;

    if (!initialized) {
        schemas["BarbariansCampCleared"] = props_BarbariansCampCleared;
        schemas["BarbariansCampFounded"] = props_BarbariansCampFounded;
        schemas["BarbariansSpawnedUnit"] = props_BarbariansSpawnedUnit;
        schemas["BuildFinished"] = props_BuildFinished;
        schemas["CapitalChanged"] = props_CapitalChanged;
        schemas["ChangeGoldenAgeProgressMeter"] = props_ChangeGoldenAgeProgressMeter;
        schemas["CircumnavigatedGlobe"] = props_CircumnavigatedGlobe;
        schemas["CityBeginsWLTKD"] = props_CityBeginsWLTKD;
        schemas["CityBoughtPlot"] = props_CityBoughtPlot;
        schemas["CityCaptureComplete"] = props_CityCaptureComplete;
        schemas["CityConstructed"] = props_CityConstructed;
        schemas["CityConvertsPantheon"] = props_CityConvertsPantheon;
        schemas["CityConvertsReligion"] = props_CityConvertsReligion;
        schemas["CityCreated"] = props_CityCreated;
        schemas["CityEndsWLTKD"] = props_CityEndsWLTKD;
        schemas["CityEventActivated"] = props_CityEventActivated;
        schemas["CityEventChoiceActivated"] = props_CityEventChoiceActivated;
        schemas["CityEventChoiceEnded"] = props_CityEventChoiceEnded;
        schemas["CityExtendsWLTKD"] = props_CityExtendsWLTKD;
        schemas["CityFlipped"] = props_CityFlipped;
        schemas["CityInvestedBuilding"] = props_CityInvestedBuilding;
        schemas["CityInvestedUnit"] = props_CityInvestedUnit;
        schemas["CityPrepared"] = props_CityPrepared;
        schemas["CityProjectComplete"] = props_CityProjectComplete;
        schemas["CityPuppeted"] = props_CityPuppeted;
        schemas["CityRazed"] = props_CityRazed;
        schemas["CitySoldBuilding"] = props_CitySoldBuilding;
        schemas["CityTrained"] = props_CityTrained;
        schemas["CombatEnded"] = props_CombatEnded;
        schemas["CombatResult"] = props_CombatResult;
        schemas["ContractEnded"] = props_ContractEnded;
        schemas["ContractStarted"] = props_ContractStarted;
        schemas["ContractsRefreshed"] = props_ContractsRefreshed;
        schemas["DealMade"] = props_DealMade;
        schemas["DeclareWar"] = props_DeclareWar;
        schemas["ElectionResultFailure"] = props_ElectionResultFailure;
        schemas["ElectionResultSuccess"] = props_ElectionResultSuccess;
        schemas["EspionageNotificationData"] = props_EspionageNotificationData;
        schemas["EspionageResult"] = props_EspionageResult;
        schemas["EspionageState"] = props_EspionageState;
        schemas["EventActivated"] = props_EventActivated;
        schemas["EventChoiceActivated"] = props_EventChoiceActivated;
        schemas["EventChoiceEnded"] = props_EventChoiceEnded;
        schemas["EventUnitCreated"] = props_EventUnitCreated;
        schemas["GameCoreTestVictory"] = props_GameCoreTestVictory;
        schemas["GameCoreUpdateBegin"] = props_GameCoreUpdateBegin;
        schemas["GameCoreUpdateEnd"] = props_GameCoreUpdateEnd;
        schemas["GameSave"] = props_GameSave;
        schemas["GatherPerTurnReplayStats"] = props_GatherPerTurnReplayStats;
        schemas["GoodyHutReceivedBonus"] = props_GoodyHutReceivedBonus;
        schemas["GoodyHutTechResearched"] = props_GoodyHutTechResearched;
        schemas["GovernmentCooldownChanges"] = props_GovernmentCooldownChanges;
        schemas["GovernmentCooldownRateChanges"] = props_GovernmentCooldownRateChanges;
        schemas["GreatPersonExpended"] = props_GreatPersonExpended;
        schemas["GreatWorkCreated"] = props_GreatWorkCreated;
        schemas["IdeologyAdopted"] = props_IdeologyAdopted;
        schemas["IdeologySwitched"] = props_IdeologySwitched;
        schemas["LoyaltyStateChanged"] = props_LoyaltyStateChanged;
        schemas["MakePeace"] = props_MakePeace;
        schemas["MinorAlliesChanged"] = props_MinorAlliesChanged;
        schemas["MinorFriendsChanged"] = props_MinorFriendsChanged;
        schemas["MinorGift"] = props_MinorGift;
        schemas["MinorGiftUnit"] = props_MinorGiftUnit;
        schemas["NaturalWonderDiscovered"] = props_NaturalWonderDiscovered;
        schemas["NuclearDetonation"] = props_NuclearDetonation;
        schemas["PantheonFounded"] = props_PantheonFounded;
        schemas["ParadropAt"] = props_ParadropAt;
        schemas["PietyChanged"] = props_PietyChanged;
        schemas["PietyRateChanged"] = props_PietyRateChanged;
        schemas["PlaceResource"] = props_PlaceResource;
        schemas["PlayerAdoptPolicy"] = props_PlayerAdoptPolicy;
        schemas["PlayerAdoptPolicyBranch"] = props_PlayerAdoptPolicyBranch;
        schemas["PlayerAdoptsCurrency"] = props_PlayerAdoptsCurrency;
        schemas["PlayerAdoptsGovernment"] = props_PlayerAdoptsGovernment;
        schemas["PlayerAnarchy"] = props_PlayerAnarchy;
        schemas["PlayerBoughtOut"] = props_PlayerBoughtOut;
        schemas["PlayerBuilding"] = props_PlayerBuilding;
        schemas["PlayerBuilt"] = props_PlayerBuilt;
        schemas["PlayerBullied"] = props_PlayerBullied;
        schemas["PlayerCityFounded"] = props_PlayerCityFounded;
        schemas["PlayerDoTurn"] = props_PlayerDoTurn;
        schemas["PlayerDoneTurn"] = props_PlayerDoneTurn;
        schemas["PlayerEndOfMayaLongCount"] = props_PlayerEndOfMayaLongCount;
        schemas["PlayerEndTurnCompleted"] = props_PlayerEndTurnCompleted;
        schemas["PlayerEndTurnInitiated"] = props_PlayerEndTurnInitiated;
        schemas["PlayerGifted"] = props_PlayerGifted;
        schemas["PlayerGoldenAge"] = props_PlayerGoldenAge;
        schemas["PlayerLiberated"] = props_PlayerLiberated;
        schemas["PlayerPlunderedTradeRoute"] = props_PlayerPlunderedTradeRoute;
        schemas["PlayerPreAIUnitUpdate"] = props_PlayerPreAIUnitUpdate;
        schemas["PlayerProtected"] = props_PlayerProtected;
        schemas["PlayerRevoked"] = props_PlayerRevoked;
        schemas["PlayerSecularizes"] = props_PlayerSecularizes;
        schemas["PlayerTradeRouteCompleted"] = props_PlayerTradeRouteCompleted;
        schemas["PlayerVictory"] = props_PlayerVictory;
        schemas["ProvinceLevelChanged"] = props_ProvinceLevelChanged;
        schemas["PushingMissionTo"] = props_PushingMissionTo;
        schemas["RebaseTo"] = props_RebaseTo;
        schemas["ReformCooldownChanges"] = props_ReformCooldownChanges;
        schemas["ReformCooldownRateChanges"] = props_ReformCooldownRateChanges;
        schemas["ReligionEnhanced"] = props_ReligionEnhanced;
        schemas["ReligionFounded"] = props_ReligionFounded;
        schemas["ReligionReformed"] = props_ReligionReformed;
        schemas["ResolutionResult"] = props_ResolutionResult;
        schemas["SetAlly"] = props_SetAlly;
        schemas["SetPopulation"] = props_SetPopulation;
        schemas["StateReligionAdopted"] = props_StateReligionAdopted;
        schemas["StateReligionChanged"] = props_StateReligionChanged;
        schemas["TeamMeet"] = props_TeamMeet;
        schemas["TeamSetEra"] = props_TeamSetEra;
        schemas["TeamSetHasTech"] = props_TeamSetHasTech;
        schemas["TeamTechResearched"] = props_TeamTechResearched;
        schemas["TerraformingMap"] = props_TerraformingMap;
        schemas["TerraformingPlot"] = props_TerraformingPlot;
        schemas["TestEvent"] = props_TestEvent;
        schemas["TileFeatureChanged"] = props_TileFeatureChanged;
        schemas["TileImprovementChanged"] = props_TileImprovementChanged;
        schemas["TileOwnershipChanged"] = props_TileOwnershipChanged;
        schemas["TileRevealed"] = props_TileRevealed;
        schemas["TileRouteChanged"] = props_TileRouteChanged;
        schemas["TurnComplete"] = props_TurnComplete;
        schemas["UiDiploEvent"] = props_UiDiploEvent;
        schemas["UnitCaptured"] = props_UnitCaptured;
        schemas["UnitCityFounded"] = props_UnitCityFounded;
        schemas["UnitConverted"] = props_UnitConverted;
        schemas["UnitCreated"] = props_UnitCreated;
        schemas["UnitGetSpecialExploreTarget"] = props_UnitGetSpecialExploreTarget;
        schemas["UnitKilledInCombat"] = props_UnitKilledInCombat;
        schemas["UnitPrekill"] = props_UnitPrekill;
        schemas["UnitPromoted"] = props_UnitPromoted;
        schemas["UnitSetXY"] = props_UnitSetXY;
        schemas["UnitUpgraded"] = props_UnitUpgraded;
        initialized = true;
    }

    return schemas;
}
